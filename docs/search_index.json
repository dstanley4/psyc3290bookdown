[["index.html", "Welcome! Course:", " Welcome! David J. Stanley 2022-01-09 Course: These notes are a resource for students in my PSYC 3290 class. "],["about-the-author.html", "About the Author", " About the Author David J. Stanley is an Associate Professor of Industrial and Organizational Psychology at the University of Guelph in Canada. He obtained a BA in Psychology, with a Minor in Statistics, from University of Waterloo and his PhD in Psychology from Western University in London, Ontario. David has published articles in Advances in Methods and Practices in Psychological Science, Organizational Research Methods, Journal of Applied Psychology, Perspectives in Psychological Science, Journal of Business and Psychology, Journal of Vocational Behaviour, Journal of Personality and Social Psychology, Behavior Research Methods, Industrial and Organizational Psychology, and Emotion among other journals. David also created the apaTables R package. "],["introduction.html", "Chapter 1 Introduction 1.1 A focus on workflow 1.2 R works with plug-ins 1.3 Create an account at R Studio Cloud 1.4 Join the class workspace 1.5 Exploring the R Studio Interface 1.6 Writing your first script 1.7 Loading your data 1.8 Checking out your data 1.9 Run vs. Source with Echo vs. Source 1.10 Trying Source with Echo 1.11 A few key points about 1.12 Revisiting read_csv() 1.13 Importing to RStudio Cloud 1.14 That’s it!", " Chapter 1 Introduction Welcome! In this guide, we will teach you about statistics using the statistical software R with the interface provided by R Studio. The purpose of this chapter to is provide you with a set of activities that get you up-and-running in R quickly so get a sense of how it works. In later chapters we will revisit these same topics in more detail. 1.1 A focus on workflow An important part of this guide is training you in a workflow that will avoid many problems than can occur when using R. 1.2 R works with plug-ins R is a statistical language with many plug-ins called packages that you will use for analyses. You can think of R as being like your smartphone. To do things with your phone you need an App (R equivalent: a package) from the App Store (R equivalent: CRAN). Apps need to be downloaded (R equivalent: install.packages) before you can use them. To use the app you need Open it (R equivalent: library command). These similarities are illustrated in Table 1.1 below. TABLE 1.1: R packages are similar to smart phone apps (Kim, 2018) Smart Phone Terminology R Terminology App package App Store CRAN Download App from App Store install.packages(“apaTables,” dependencies = TRUE) Open App library(“apaTables”) 1.3 Create an account at R Studio Cloud R Studio Cloud accounts are free and required for this guide. Please go to the website and set up a new account. 1.4 Join the class workspace To do the assignment required for this class you need to join the class workspace on R Studio Cloud. To do so: Log into R Studio Cloud (if you haven’t already done so) using your university email. On Courselink, in the Content section, find the Join RStudio Cloud link. Join the class workspace using your university email. You should see a screen like the one below in Figure 1.1. Click on the Join button. FIGURE 1.1: Screenshot of workspace join message Then you should see the welcome message illustrated in Figure 1.2. Above this message is the Projects menu option. Click on the word Project. FIGURE 1.2: Screenshot of welcome message You should now see the First Project displayed as in 1.3. Click the Start button. You will then move to a view of R Studio. FIGURE 1.3: Screenshot of starting first assignment In R Studio it is essential you use projects to keep your files organized and in the same spot. For this course, when your start an assignment on R Studio Cloud and the project will already have been made for you. Later you will learn to make your own R Studio Projects. 1.5 Exploring the R Studio Interface Once you have opened (or created) a Project folder, you are presented with the R Studio interface. There are a few key elements to the user interface that are illustrated in Figure 1.4 In the lower right of the screen you can see the a panel with several tabs (i.e., Files, Plots, Packages, etc) that I will refer to as the Files pane. You look in this pane to see all the files associated with your project. On the left side of the screen is the Console which is an interactive pane where you type and obtain results in real time. I’ve placed two large grey blocks on the screen with text to more clearly identify the Console and Files panes. Not shown in this figure is the Script panel where we can store our commands for later reuse. FIGURE 1.4: R Studio interface 1.5.1 Console panel When you first start R, the Console panel is on the left side of the screen. Sometimes there are two panels on the left side (one above the other); if so, the Console panel is the lower one (and labeled accordingly). We can use R a bit like a calculator. Try typing the following into the Console window: 8 + 6 + 7 + 5. You can see that R immediately produced the result on a line preceded by two hashtags (##). 8 + 6 + 7 + 5 ## [1] 26 We can also put the result into a variable to store it. Later we can use the print command to see that result. In the example below we add the numbers 3, 0, and 9 and store the result in the variable my_sum. The text “&lt;-” indicate you are putting what is on the right side of the arrow into the variable on the left side of the arrow. You can think of a variable as a cup into which you can put different things. In this case, imagine a real-world cup with my_sum written on the outside and inside the cup we have stored the sum of 3, 0, and 9 (i.e., 12). my_sum &lt;- 3 + 0 + 9 We can inspect the contents of the my_sum variable (i.e., my_sum cup) with the print command: print(my_sum) ## [1] 12 Variables are very useful in R. We will use them to store a single number, an entire data set, the results of an analysis, or anything else. 1.5.2 Script Panel Although you can use R with just with the Console panel, it’s a better idea to use scripts via the Script panel - not visible yet. Scripts are just text files that contain R commands that you run as a batch. You can run a script (as you will see below) using the Run or Source buttons located in the top right of the Script panel. Scripts are valuable because if you need to run an analysis a second time you don’t have to type the command in a second time. You can run the script again and again without retyping your commands. More importantly though, the script provides a record of your analyses. A common problem in science is that after an article is published, the authors can’t reproduce the numbers in the paper. You can read more about the important problem in a surprising article in the journal Molecular Brain. In this article an editor reports how a request for the data underlying articles resulted in the wrong data for 40 out of 41 papers. Long story short – keep track of the data and scripts you use for your paper. In a later chapter, it’s generally poor practice to manipulate or modify or analyze your data using any menu driven software because this approach does not provide a record of what you have done. 1.5.3 Cheatsheets As you learn R and RStudio you should be aware there are a number of cheatsheets available. There is even one for the RStudio interface. 1.6 Writing your first script 1.6.1 Create the script file Create a script in your R Studio project by using the menu File &gt; New File &gt; R Script. Save the file with an appropriate name using the File menu. The file will be saved in your Project folder. A common, and good, convention for naming is to start all script names with the word “script” and separate words with an underscore. You might save this first script file with the name “script_my_first_one.R.” The advantage of beginning all script files with the word script is that when you look at your list of files alphabetically, all the script files will cluster together. Likewise, it’s a good idea to save all data files such that they begin with “data_.” This way all the data files will cluster together in your directory view as well. You can see there is already a data file with this convention called “data_okcupid.csv.” You can see as discussed previously, we are trying to instill an effective workflow as you learn R. Using a good naming convention (that is consistent with what others use) is part of the workflow. When you write your scripts it’s a good idea to follow the tidyverse style guide for script names, variable name, file names, and more. 1.6.2 Add a comment to your script In the previous section you created your first script. We begin by adding a comment to the script. A comment is something that will be read by humans rather than the computer/R. You make comments for other people that will read your code and need to understand what you have done. However, realize that you are also making comments for your future self as illustrated in an XKCD cartoon. A good way to start every script is with a comment that includes the date of your script (or even better when you installed your packages, more on this later). Like smartphone apps, packages are updated regularly. Sometimes after a package is updated it will no longer work with an older script. Fortunately, the checkpoint package lets users role back the clock and use older versions of packages. Adding a comment with the date of your script will help future users (including you) to use your script with the same version of the package used when you wrote the script. Dating your script is an important part of an effective and reproducible workflow. # Code written on: YYYY/MM/DD # By: John Smith Moving forward, I suggest you use comments to make your own personal notes in your own code as you write it. Note that in the above comment I used the internationally accepted date format order Year/Month/Day created by the International Organization for Standardization (ISO). Some people use the mnemonic You’re My Dream to remember the Year Month Day order. Wikipedia provides more information about this International Date Format (ISO 8601). An XKCD cartoon highlights the ISO date format: 1.6.3 Background about the tidyverse There are generally two broad ways of using R, the older way and the newer way. Using R the older way is referred to as using base R. A more modern approach to using R is the tidyverse. The tidyverse represents a collection of packages that work together to give R a modern workflow. These packages do many things to help the data analyst (loading data, rearranging data, graphing, etc.). We will use the tidyverse approach to R in this guide. As noted, the tidyverse is a collection of packages. Each package adds new commands to R. The number of packages and correspondingly the number of new commands added to R by the tidyverse is large. Below is a list of the tidyverse packages: ## [1] &quot;broom&quot; &quot;cli&quot; &quot;crayon&quot; ## [4] &quot;dbplyr&quot; &quot;dplyr&quot; &quot;dtplyr&quot; ## [7] &quot;forcats&quot; &quot;googledrive&quot; &quot;googlesheets4&quot; ## [10] &quot;ggplot2&quot; &quot;haven&quot; &quot;hms&quot; ## [13] &quot;httr&quot; &quot;jsonlite&quot; &quot;lubridate&quot; ## [16] &quot;magrittr&quot; &quot;modelr&quot; &quot;pillar&quot; ## [19] &quot;purrr&quot; &quot;readr&quot; &quot;readxl&quot; ## [22] &quot;reprex&quot; &quot;rlang&quot; &quot;rstudioapi&quot; ## [25] &quot;rvest&quot; &quot;stringr&quot; &quot;tibble&quot; ## [28] &quot;tidyr&quot; &quot;xml2&quot; &quot;tidyverse&quot; Before you can use a package it needs to be installed – this is the same as downloading an app from the App Store. Normally, you can install a single package with the install.packages command. Previously, you needed to run an install.package command for every package in the tidyverse as illustrated below (though we no longer use this approach). # The old way of installing the tidyverse packages # Like downloading apps from the app store install.packages(&quot;broom&quot;, dep = TRUE) install.packages(&quot;cli&quot;, dep = TRUE) install.packages(&quot;ggplot&quot;, dep = TRUE) # etc Fortunately, the tidyverse packages can now be installed with a single install.packages command. Specifically, the install.packages command below will install all of the packages listed above. Class note: For the “First Lab,” I’ve done the install.packages for you. So there is no need to use the install.packages command below in this first lab. install.packages(&quot;tidyverse&quot;, dep = TRUE) 1.6.4 Add library(tidyverse) to your script The tidyverse is now installed, so we need to activate it. We do that with the library command. Put the library line below at the top of your script file (below your comment): # Code written on: YYYY/MM/DD # By: John Smith library(tidyverse) 1.6.5 Activate tidyverse auto-complete for your script Select the library(tidyverse) text with your mouse/track-pad so that it is highlighted. Then click the Run button in the upper right of the Script panel. Doing this “runs” the selected text. After you click the Run button you should see text like the following in the Console panel: ## ── Attaching packages ─────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.1 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() When you use library(tidyverse) to activate the tidyverse you activate the most commonly used subset of the tidyverse packages. In the output you see checkmarks beside names of the tidyverse packages you have activated. By activating these packages you have added new commands to R that you will use. Sometimes these packages replace older versions of commands in R. The “Conflicts” section in the output shows you where the packages you activated replaced older R commands with newer R commands. You can activate the other tidyverse packages by running a library command for each package – if needed. No need to do so now. Most importantly, running the library(tidyverse) prior to entering the rest of your script allows R Studio to present auto-complete options when typing your text. Remember to start each script with the library(tidyverse) command and then Run it so you get the autocomplete options for the rest of the commands your enter. 1.7 Loading your data 1.7.1 Use read_csv (not read.csv) to open files. If you inspect the Files pane on the right of the screen you see the data_okcupid.csv data file in our project directory. We will load this data with the commands below. If you followed the steps above, you should have auto-complete for the tidyverse commands you type from now on – in the current R session. Enter the command below into your script. As you start to type read_csv you will likely be presented with an auto-complete option. You can use the arrow keys to move up and down the list of options to select the one you want - then press tab to select it. Once your command looks like the one below select the text and click on the “Run” button. Note: If you are not in the class, the data file is available here: data_okcupid.csv okcupid_profiles &lt;- read_csv(file = &quot;data_okcupid.csv&quot;) ## Rows: 59946 Columns: 6 ## ── Column specification ──────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (4): diet, pets, sex, status ## dbl (2): age, height ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. The output indicates that you have loaded a data file and the type of data in each column. The sex column is of type col_character which indicates it contains text/letters. Most of the columns are of the type character. The age and height columns contain numbers are correspondingly indicated to be the type col_double. The label col_double indicates that a column of numbers represented in R with high precision. There are other ways of representing numbers in R but this is the type we will see/use most often. 1.8 Checking out your data There many ways of viewing the actual data you loaded. A few of these are illustrated now. 1.8.1 view(): See a spreadsheet view of your data You can inspect your data in a spreadsheet view by using the view command. Do NOT add this command to your script file – EVER. Adding it to the script can cause substantial problems. Type this command in the Console. view(okcupid_profiles) 1.8.2 print(): See your data in the Console You can inspect the first few rows of your data with the print() command. It is OK to add a print command to your script. Try the print() command below in the Console: print(okcupid_profiles) ## # A tibble: 59,946 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 22 strictly anything 75 likes dogs … m single ## 2 35 mostly other 70 likes dogs … m single ## 3 38 anything 68 has cats m availa… ## 4 23 vegetarian 71 likes cats m single ## 5 29 &lt;NA&gt; 66 likes dogs … m single ## 6 29 mostly anything 67 likes cats m single ## 7 32 strictly anything 65 likes dogs … f single ## 8 31 mostly anything 65 likes dogs … f single ## 9 24 strictly anything 67 likes dogs … f single ## 10 37 mostly anything 65 likes dogs … m single ## # … with 59,936 more rows 1.8.3 head(): Check out the first few rows of data You can inspect the first few rows of your data with the head() command. Try the command below in the Console: head(okcupid_profiles) ## # A tibble: 6 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 22 strictly anything 75 likes dogs a… m single ## 2 35 mostly other 70 likes dogs a… m single ## 3 38 anything 68 has cats m availa… ## 4 23 vegetarian 71 likes cats m single ## 5 29 &lt;NA&gt; 66 likes dogs a… m single ## 6 29 mostly anything 67 likes cats m single You can be even more specific and indicate you only want the first three row of your data with the head() command. Try the command below in the Console: head(okcupid_profiles, 3) ## # A tibble: 3 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 22 strictly anything 75 likes dogs a… m single ## 2 35 mostly other 70 likes dogs a… m single ## 3 38 anything 68 has cats m availa… 1.8.4 tail(): Check out the last few rows of data You can inspect the last few rows of your data with the tail() command. Try the command below in the Console: tail(okcupid_profiles) ## # A tibble: 6 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 31 &lt;NA&gt; 62 likes dogs f single ## 2 59 &lt;NA&gt; 62 has dogs f single ## 3 24 mostly anything 72 likes dogs and … m single ## 4 42 mostly anything 71 &lt;NA&gt; m single ## 5 27 mostly anything 73 likes dogs and … m single ## 6 39 &lt;NA&gt; 68 likes dogs and … m single You can be even more specific and indicate you only want the last three row of your data with the tail() command. Try the command below in the Console: tail(okcupid_profiles, 3) ## # A tibble: 3 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 42 mostly anything 71 &lt;NA&gt; m single ## 2 27 mostly anything 73 likes dogs and … m single ## 3 39 &lt;NA&gt; 68 likes dogs and … m single 1.8.5 summary(): Quick summaries You can create a short summary of your data with the summary() command. Note that we will use the summary() command in many places in the guide. The output of the summary() command changes depending on what you give it - that is put inside the brackets. You can give the summary() command many things such as data, the results of a regression analysis, etc. Try the command below in the Console. You will see that summary() gives the mean and median for each of the numeric variables (age and height). summary(okcupid_profiles) ## age diet height ## Min. : 18.0 Length:59946 Min. : 1.0 ## 1st Qu.: 26.0 Class :character 1st Qu.:66.0 ## Median : 30.0 Mode :character Median :68.0 ## Mean : 32.3 Mean :68.3 ## 3rd Qu.: 37.0 3rd Qu.:71.0 ## Max. :110.0 Max. :95.0 ## NA&#39;s :3 ## pets sex status ## Length:59946 Length:59946 Length:59946 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## 1.9 Run vs. Source with Echo vs. Source There are different ways of running commands in R. So far you have used two of these. You can enter them into the Console as we have done already. Or you can put them in your script select the text and click the Run button. There are four ways of running commands in your script. You can: Console: Enter commands directly Script: Select the command(s) and press the Run button. Script: Source (Without Echo) Script: Source With Echo Two of these approaches involve using the Source button, see Figure 1.5. You bring up the options for the Source button, illustrated in this figure, by clicking on the small arrow to the right of the word Source. FIGURE 1.5: Source button options 1.9.1 Run select text The Run button will run the text you highlight and present the relevant output. You have used this command a fair amount already. I strongly suggest you ONLY use the Run button when testing a command to make sure it works or to debug a script. Or to run library(tidyverse) as you start working on your script so that you get the autocomplete options. In general, you should always try to execute your R Scripts using the Source with Echo command (preceded by a Restart, see below). This ensures your script will work beginning to end for you in the future and for others that attempt to use it. Using the Run button in an ad lib basis can create output that is not reproducible. 1.9.2 Source (without Echo) Source (without Echo) is not designed for the typical analysis workflow. It is mostly helpful when you run simulations. When you run Source (without Echo) much of the output you would wish to read is suppressed. In general, avoid this option. If you use it, you often won’t see what you want to see in the output. 1.9.3 Source with Echo The Source with Echo command runs all of the contents of a script and presents the output in the R console. This is the approach you should use to running your scripts in most cases. Prior to running Source with Echo (or just Source), it’s always a good idea do do two things: 1) Save your script. 2) Use the menu item: Session &gt; Restart R. This makes sure you clear the computer memory of any errors from any previous runs. So you should do the following EVERY time you run your script. Save your script Use the menu item: Session &gt; Restart R Click the down arrow beside the Source button, and click on Source With Echo This will clear potentially problematic previous stats and variables from memory, run the script commands, and display the output in the Console. Moving forward we will use this approach for running scripts. Once you have used Source with Echo once, you can just click the Source button and it will use Source with Echo automatically (without the need to use the pull down option for selecting Source with Echo). Using Restart R before you run a script, or R code in general, is a critical workflow tip. 1.10 Trying Source with Echo Put the head(), tail(), and summary() command we used previously into your script. Then save your script using using the File &gt; Save menu. You script should appear as below. # Code written on: YYYY/MM/DD # By: John Smith library(tidyverse) okcupid_profiles &lt;- read_csv(file = &quot;data_okcupid.csv&quot;) head(okcupid_profiles) tail(okcupid_profiles) summary(okcupid_profiles) Now do the following: Use the menu item: Session &gt; Restart R Click the down arrow beside the Source button, and click on Source With Echo You should see the output below: # Code written on: YYYY/MM/DD # By: John Smith library(tidyverse) okcupid_profiles &lt;- read_csv(file = &quot;data_okcupid.csv&quot;) ## Rows: 59946 Columns: 6 ## ── Column specification ──────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (4): diet, pets, sex, status ## dbl (2): age, height ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(okcupid_profiles) ## # A tibble: 6 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 22 strictly anything 75 likes dogs a… m single ## 2 35 mostly other 70 likes dogs a… m single ## 3 38 anything 68 has cats m availa… ## 4 23 vegetarian 71 likes cats m single ## 5 29 &lt;NA&gt; 66 likes dogs a… m single ## 6 29 mostly anything 67 likes cats m single tail(okcupid_profiles) ## # A tibble: 6 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 31 &lt;NA&gt; 62 likes dogs f single ## 2 59 &lt;NA&gt; 62 has dogs f single ## 3 24 mostly anything 72 likes dogs and … m single ## 4 42 mostly anything 71 &lt;NA&gt; m single ## 5 27 mostly anything 73 likes dogs and … m single ## 6 39 &lt;NA&gt; 68 likes dogs and … m single summary(okcupid_profiles) ## age diet height ## Min. : 18.0 Length:59946 Min. : 1.0 ## 1st Qu.: 26.0 Class :character 1st Qu.:66.0 ## Median : 30.0 Mode :character Median :68.0 ## Mean : 32.3 Mean :68.3 ## 3rd Qu.: 37.0 3rd Qu.:71.0 ## Max. :110.0 Max. :95.0 ## NA&#39;s :3 ## pets sex status ## Length:59946 Length:59946 Length:59946 ## Class :character Class :character Class :character ## Mode :character Mode :character Mode :character ## ## ## ## Congratulations you just ran your first script! 1.11 A few key points about Sometimes you will need to send a command additional information. Moreover, that information often needs to be grouped together into a vector or a list before you can send it to the command. We’ll learn more about doing so in the future but here is a quick over view of vectors and lists to provide a foundation for future chapters. 1.11.0.1 Vector of numbers We can create a vector of only numbers using the “c” function - which you can think of as being short for “combine” (or concatenate). In the commands below we create a vector of a few even numbers called “even_numbers.” even_numbers &lt;- c(2, 4, 6, 8, 10) print(even_numbers) ## [1] 2 4 6 8 10 We can obtain the second number in the vector using the following notation: print(even_numbers[2]) ## [1] 4 1.11.0.2 Vector of characters We can also create vectors using only characters. Note that I use SHIFT RETURN after each comma to move to the next line. favourite_things &lt;- c(&quot;copper kettles&quot;, &quot;woolen mittens&quot;, &quot;brown paper packages&quot;) print(favourite_things) ## [1] &quot;copper kettles&quot; &quot;woolen mittens&quot; ## [3] &quot;brown paper packages&quot; As before, you can obtain the second item in the vector using the following notation: print(favourite_things[2]) ## [1] &quot;woolen mittens&quot; 1.11.1 Lists Lists are similar to vectors in that you can create them and access items by their numeric position. Vectors must be all characters or all numbers. Lists can be a mix of characters or numbers. Most importantly items in lists can be accessed by their label. Note that I use SHIFT RETURN after each comma to move to the next line in the code below. my_list &lt;- list(last_name = &quot;Smith&quot;, first_name = &quot;John&quot;, office_number = 1913) print(my_list) ## $last_name ## [1] &quot;Smith&quot; ## ## $first_name ## [1] &quot;John&quot; ## ## $office_number ## [1] 1913 You can access an item in a list using double brackets: print(my_list[2]) ## $first_name ## [1] &quot;John&quot; You can access an item in a list by its label/name using the dollar sign: print(my_list$last_name) ## [1] &quot;Smith&quot; print(my_list$office_number) ## [1] 1913 1.12 Revisiting read_csv() In the text above we learned about vectors of characters. This information can be used to handle missing values in the read_csv() command. Consider a data set where for many participants we did not get a response to a question. We might have that represented in various ways within the data file. The value for that question might simply be omitted (i.e., represented by nothing – ““), represented by NA for not available, or maybe simply be something like -777. When we load data with read_csv() we can indicate to the computer how missing values are represented. This ensures the computer sees something like -777 as a missing value rather than an actual value. We do so in the read_csv() command below using the na argument (not available). Note: use SHIFT-RETURN or SHIFT-ENTER to move the next line within the read_csv() command. Failure to indicate the missing value codes within read_csv() will result in incorrect answers in most scenarios with missing data. okcupid_profiles &lt;- read_csv(file = &quot;data_okcupid.csv&quot;, na = c(&quot;&quot;, &quot;NA&quot;, &quot;-777&quot;)) 1.13 Importing to RStudio Cloud If you are using RStudio via the RStudio Cloud interface you may need to, on occasion, upload a file from your computer. Here is how to do so. We begin be downloading a file from this website to your computer. Download the data_ratings.csv by right clicking the filename in this sentence. Doing this will put the file in your Downloads folder. NOTE: The data_ratings.csv file may automatically open in Numbers or Excel. DO NOT save the file if this happens. You MUST use the file from the Downloads folder - not a saved version. Saving the file from Excel or Numbers will likely cause substantial problems. Find the Downloads folder on your computer and obtain the file from this folder. Move the data_ratings.csv from the Downloads folder to your Desktop. In RStudio Cloud, click on the Upload button on the Files tab. FIGURE 1.6: Import file button Clicking the Upload makes the window below appear. In this window, click the Choose File button. Then select the file data_ratings.csv from your desktop. FIGURE 1.7: Select file window Click the OK button. The data_ratings.csv will appear the Files tab. Now load the file using the read_csv() command: data_ratings &lt;- read_csv(file = &quot;data_ratings.csv&quot;, na = c(&quot;&quot;, &quot;NA&quot;, &quot;-777&quot;)) Glimpse() the data you loaded. glimpse(data_ratings) ## Rows: 30 ## Columns: 7 ## $ rating &lt;dbl&gt; 43, 63, 71, 61, 81, 43, 58, 71, 72, 67,… ## $ complaints &lt;dbl&gt; 51, 64, 70, 63, 78, 55, 67, 75, 82, 61,… ## $ privileges &lt;dbl&gt; 30, 51, 68, 45, 56, 49, 42, 50, 72, 45,… ## $ learning &lt;dbl&gt; 39, 54, 69, 47, 66, 44, 56, 55, 67, 47,… ## $ raises &lt;dbl&gt; 61, 63, 76, 54, 71, 54, 66, 70, 71, 62,… ## $ critical &lt;dbl&gt; 92, 73, 86, 84, 83, 49, 68, 66, 83, 80,… ## $ advance &lt;dbl&gt; 45, 47, 48, 35, 47, 34, 35, 41, 31, 41,… 1.14 That’s it! Congratulations! You’ve reached the end of the introduction to R. Take a break, have a cookie, and read some more about R tomorrow! "],["handling-data-with-the-tidyverse.html", "Chapter 2 Handling Data with the Tidyverse 2.1 Required 2.2 Objective 2.3 Using the Console 2.4 Tidyverse help with the Introverse 2.5 Basic tidyverse commands 2.6 Advanced tidyverse commands 2.7 Using help 2.8 Base R vs tidyverse", " Chapter 2 Handling Data with the Tidyverse A key component of doing statistics in the modern world is managing/wrangling or cleaning data to make it ready for analysis. Indeed, some estimate that those who do data science spend 80% of their time engaged in cleaning data. Although this specific percentage may not be accurate it does accurately reflect the fact that data scientists do spend a substantial portion of their time preparing data for analysis. Many complain about this fact but as Leigh Dodds points out “I would argue that spending time working with data. To transform, explore and understand it better is absolutely what data scientists should be doing. This is the medium they are working in.” In this chapter we focus on teaching you foundational skills for data preparation. The skills taught in this chapter largely revolve around using the tidyverse packages to manage data that will eventually help with data cleaning in the Workflow and Qualtrics chapters. There are some additional resources you may want to consult as you learn these tidyverse skills: R for Data Science book. This is an excellent free online book! But it does reflect an exploratory analysis mindset compared to the confirmatory mindset we typically use in Psychological science. You may find a cheatsheet helpful. Specifically, the Data Transformation cheatsheet. tidyverse website 2.1 Required The data files below are used in this chapter. Right click to save each file. Required Data data_okcupid.csv data_experiment.csv The following CRAN packages must be installed: Required CRAN Packages tidyverse remotes The following GitHub package must be installed: Required GitHub Packages spielmanlab/introverse After the remotes package is installed, it can be used to install the introverse package from GitHub (an alternative “App Store”). If you get asked if you would like to install more recent versions of packages on your machine press “1” and Return to indicate “All” (if you are asked, you may not be). remotes::install_github(&quot;spielmanlab/introverse&quot;) 2.2 Objective The objective of this chapter is to familiarize you with some key commands in the tidyverse. These commands are used in isolation of each other for the most part. In the next chapter we will use these commands in a more coordinated way as we load a data set and move it from raw data to data that is ready for analysis (i.e., analytic data). You can start this project by Starting the class assignment on R Studio Cloud that corresponds to the chapter name. 2.3 Using the Console All of the commands in this chapter should be typed into the Console within R. If you see a command split over multiple lines, use SHIFT-RETURN (macOS) or SHIFT-ENTER (Windows) to move the next line that is part of the same command. 2.4 Tidyverse help with the Introverse The introverse package is just additional documentation that is helpful for beginners - until you learn to read the standard R documentation. The first command we will use in this chapter is the read_csv() command. You get the standard R help for this command using the code below in the R Console: library(tidyverse) # this actives the tidyverse commands ?read_csv This gives you help that looks like this: But you can obtain the better introverse documentation by typing the code below in the R Console: library(introverse) # this actives the intoverse help get_help(&quot;read_csv&quot;) This gives you help that looks like this: Most importantly, when you scroll down on the introverse help pages - it gives you code examples that are easy to follow. If at any point during this course you want more information about how a command works use the introverse get_help() command. The get_help() command is especially valuable because it tells you which package (of the many tidyverse packages) a particular command comes from. For example, you can see the read_csv() command is from the readr package when you inspect the introverse help above. 2.5 Basic tidyverse commands If you inspect the Files tab on the lower-right panel in R Studio you will see the file data_okcupid.csv. The code below loads that file. Recall you should type this code into the R Console. library(tidyverse) okcupid_profiles &lt;- read_csv(&quot;data_okcupid.csv&quot;) You can see the first few rows of the data using the print() command. Each row presents a person whereas each column represents a variable. If you have a large number of columns you will only see the first several columns with this approach to viewing your data. print(okcupid_profiles) ## # A tibble: 59,946 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 22 strictly anything 75 likes dogs … m single ## 2 35 mostly other 70 likes dogs … m single ## 3 38 anything 68 has cats m availa… ## 4 23 vegetarian 71 likes cats m single ## 5 29 &lt;NA&gt; 66 likes dogs … m single ## 6 29 mostly anything 67 likes cats m single ## 7 32 strictly anything 65 likes dogs … f single ## 8 31 mostly anything 65 likes dogs … f single ## 9 24 strictly anything 67 likes dogs … f single ## 10 37 mostly anything 65 likes dogs … m single ## # … with 59,936 more rows But it’s also helpful just to see a list of the columns in the data with the glimpse() command: glimpse(okcupid_profiles) ## Rows: 59,946 ## Columns: 6 ## $ age &lt;dbl&gt; 22, 35, 38, 23, 29, 29, 32, 31, 24, 37, 35,… ## $ diet &lt;chr&gt; &quot;strictly anything&quot;, &quot;mostly other&quot;, &quot;anyth… ## $ height &lt;dbl&gt; 75, 70, 68, 71, 66, 67, 65, 65, 67, 65, 70,… ## $ pets &lt;chr&gt; &quot;likes dogs and likes cats&quot;, &quot;likes dogs an… ## $ sex &lt;chr&gt; &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;… ## $ status &lt;chr&gt; &quot;single&quot;, &quot;single&quot;, &quot;available&quot;, &quot;single&quot;, … The glimpse() command is useful because it quickly allows you to see all of the columns. Moreover, it allows you to see the type for each column. Types were briefly discussed in the last chapter. Notice in the output beside each column name that some columns are labeled “dbl” which is short for double – a type of numeric column. Other columns are labeled “chr” which is short for character - meaning the columns contain characters. These designations will become important in the next chapter as we prepare data for analysis. 2.5.1 select() The select() command allows you to obtain a subset of the columns in your data. The commands below can be used to obtain the age and height columns. You can read the command as: take the okcupid_profiles data and then select the age and height columns. The “%&gt;%” symbol can be read as “and then.” You can see that this code prints out the data with just the age and height columns. Remember, use SHIFT-ENTER or SHIFT-RETURN to move to the next line in the block of code. okcupid_profiles %&gt;% select(age, height) ## # A tibble: 59,946 × 2 ## age height ## &lt;dbl&gt; &lt;dbl&gt; ## 1 22 75 ## 2 35 70 ## 3 38 68 ## 4 23 71 ## 5 29 66 ## 6 29 67 ## 7 32 65 ## 8 31 65 ## 9 24 67 ## 10 37 65 ## # … with 59,936 more rows Of course, it’s usually of little help to just print the subset of the data. It’s better to store it in a new data. In the command below we store the resulting data in a new data set called new_data. new_data &lt;- okcupid_profiles %&gt;% select(age, height) The glimpse() command shows us that only the age and height columns are in new_data. glimpse(new_data) ## Rows: 59,946 ## Columns: 2 ## $ age &lt;dbl&gt; 22, 35, 38, 23, 29, 29, 32, 31, 24, 37, 35,… ## $ height &lt;dbl&gt; 75, 70, 68, 71, 66, 67, 65, 65, 67, 65, 70,… In the above example we indicated the columns we wanted to retain from the okcupid_profiles data using the select() command. However, we can also indicate the columns we want to drop from okcupid_profiles using a minus sign (-) in front of the columns we specify in the select() command. new_data &lt;- okcupid_profiles %&gt;% select(-age, -height) The glimpse() command shows us that we kept all the columns except the age and height columns when we created new_data. glimpse(new_data) ## Rows: 59,946 ## Columns: 4 ## $ diet &lt;chr&gt; &quot;strictly anything&quot;, &quot;mostly other&quot;, &quot;anyth… ## $ pets &lt;chr&gt; &quot;likes dogs and likes cats&quot;, &quot;likes dogs an… ## $ sex &lt;chr&gt; &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;… ## $ status &lt;chr&gt; &quot;single&quot;, &quot;single&quot;, &quot;available&quot;, &quot;single&quot;, … 2.5.2 summarise() The summarise() command can be used to generate descriptive statistics for a specified column. You can easily calculate column descriptive statistics using the corresponding commands for mean(), sd(), min(), max(), among others. In the example below we calculate the mean for the age column. In the code below, mean(age, na.rm = TRUE), indicates to R that it should calculate the mean of the age column. The na.rm indicates how missing values should be handled. The na stands for not available; in R missing values are classified as Not Available or NA. The rm stands for remove. Consequently, na.rm is asking: “Should we remove missing values when calculating the mean?” The TRUE indicates that yes, missing values should be removed when calculating the mean. The result of this calculation is placed into a variable labelled age_mean, though we could have used any label we wanted instead of age_mean. We see that the mean of the age column is, with rounding, 32.3. okcupid_profiles %&gt;% summarise(age_mean = mean(age, na.rm = TRUE)) ## # A tibble: 1 × 1 ## age_mean ## &lt;dbl&gt; ## 1 32.3 More than one calculation can occur in the same summarise() command. You can easily add the calculation for the standared deviation with the sd() command. okcupid_profiles %&gt;% summarise(age_mean = mean(age, na.rm = TRUE), age_sd = sd(age, na.rm = TRUE)) ## # A tibble: 1 × 2 ## age_mean age_sd ## &lt;dbl&gt; &lt;dbl&gt; ## 1 32.3 9.45 Often this process does too much rounding. We can get more exact results by adding an as.data.frame() to the end of the commands. okcupid_profiles %&gt;% summarise(age_mean = mean(age, na.rm = TRUE), age_sd = sd(age, na.rm = TRUE)) %&gt;% as.data.frame() ## age_mean age_sd ## 1 32.34 9.453 2.5.3 filter() The filter() command allows you to obtain a subset of the rows in your data. In the example below we create a new data set with just the males from the original data. Notice the structure of the original data below in the glimpse() output. There is a column called sex that uses m and f to indicate male and female, respectively. Also notice that there are 59946 rows in the okcupid_profiles data. glimpse(okcupid_profiles) ## Rows: 59,946 ## Columns: 6 ## $ age &lt;dbl&gt; 22, 35, 38, 23, 29, 29, 32, 31, 24, 37, 35,… ## $ diet &lt;chr&gt; &quot;strictly anything&quot;, &quot;mostly other&quot;, &quot;anyth… ## $ height &lt;dbl&gt; 75, 70, 68, 71, 66, 67, 65, 65, 67, 65, 70,… ## $ pets &lt;chr&gt; &quot;likes dogs and likes cats&quot;, &quot;likes dogs an… ## $ sex &lt;chr&gt; &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;… ## $ status &lt;chr&gt; &quot;single&quot;, &quot;single&quot;, &quot;available&quot;, &quot;single&quot;, … We use the filter command to select a subset of the rows based on the content of any column. In this case the sex column is used to obtain a subset of the rows; the rows with the value “m” are obtained. Notice the double equals sign is used to indicate “equal to.” The reason a double equals sign is used here (instead of a single equals sign) is to distinguish it from the use of the single equals sign in the summarise command above. In the summarise command above, the single equal sign was used to indicate “assign to.” That is, assign to age_mean the mean of the column age after it is calculated. A single equals sign indicates “assign to” whereas a double equals sign indicates “is equal to.” okcupid_males &lt;- okcupid_profiles %&gt;% filter(sex == &quot;m&quot;) We use glimpse() to inspect these all male data. Notice that only the letter m is in the sex column - indicating only males are in the data set. Also notice that there are 35829 rows in the okcupid_males data - fewer people because males are a subset of the total number of rows. glimpse(okcupid_males) ## Rows: 35,829 ## Columns: 6 ## $ age &lt;dbl&gt; 22, 35, 38, 23, 29, 29, 37, 35, 28, 24, 33,… ## $ diet &lt;chr&gt; &quot;strictly anything&quot;, &quot;mostly other&quot;, &quot;anyth… ## $ height &lt;dbl&gt; 75, 70, 68, 71, 66, 67, 65, 70, 72, 72, 70,… ## $ pets &lt;chr&gt; &quot;likes dogs and likes cats&quot;, &quot;likes dogs an… ## $ sex &lt;chr&gt; &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;… ## $ status &lt;chr&gt; &quot;single&quot;, &quot;single&quot;, &quot;available&quot;, &quot;single&quot;, … The filter command can be combined with the summarise command to get the descriptive statistics for males without the hassle of creating new data. This is again done using the %&gt;% “and then” operator. okcupid_profiles %&gt;% filter(sex == &quot;m&quot;) %&gt;% summarise(age_mean = mean(age, na.rm = TRUE), age_sd = sd(age, na.rm = TRUE)) ## # A tibble: 1 × 2 ## age_mean age_sd ## &lt;dbl&gt; &lt;dbl&gt; ## 1 32.0 9.03 We see that for the 35829 males the mean age is 32.0 and the standard deviation is 9.0. Likewise, we can obtain the descriptive statistics for females with only a slight modification, changing m to f in the filter command: okcupid_profiles %&gt;% filter(sex == &quot;f&quot;) %&gt;% summarise(age_mean = mean(age, na.rm = TRUE), age_sd = sd(age, na.rm = TRUE)) ## # A tibble: 1 × 2 ## age_mean age_sd ## &lt;dbl&gt; &lt;dbl&gt; ## 1 32.8 10.0 We see that for the 24117 females the mean age is 32.8 and the standard deviation is 10.0. 2.5.4 group_by() The process we used with the filter command would quickly become onerous if we had many subgroups for a column. Consequently, it’s often better to use the group() command to calculate descriptive statistics for the levels (e.g., male/female) of a variable. By telling the computer to group_by() sex the summarise command is run separately for every level of sex (i.e., m and f). okcupid_profiles %&gt;% group_by(sex) %&gt;% summarise(age_mean = mean(age, na.rm = TRUE), age_sd = sd(age, na.rm = TRUE)) ## # A tibble: 2 × 3 ## sex age_mean age_sd ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 f 32.8 10.0 ## 2 m 32.0 9.03 Fortunately, it’s possible to use more than one grouping variable with the group_by() command. In the code below we group by sex and status (i.e., dating status). okcupid_profiles %&gt;% group_by(sex, status) %&gt;% summarise(age_mean = mean(age, na.rm = TRUE), age_sd = sd(age, na.rm = TRUE)) ## `summarise()` has grouped output by &#39;sex&#39;. You can override using the `.groups` argument. ## # A tibble: 10 × 4 ## # Groups: sex [2] ## sex status age_mean age_sd ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 f available 32.2 8.54 ## 2 f married 33.7 8.13 ## 3 f seeing someone 28.1 6.44 ## 4 f single 33.0 10.2 ## 5 f unknown 27.8 5.91 ## 6 m available 34.8 9.40 ## 7 m married 38.7 10.1 ## 8 m seeing someone 30.8 7.06 ## 9 m single 31.9 9.04 ## 10 m unknown 40.7 8.87 The resulting output provide for age the mean and standard deviation for every combination of sex and dating status. The first five rows provide output for females at every level of dating status whereas the subsequent five rows provide output for males at every level of dating status. 2.5.5 mutate() The mutate() command can be used to calculate a new column in a data. In the example below we calculate a new column called age_centered which is the new version of the age_column where the mean of the column has been removed from every value. This is merely an example of the many different types of calculations we can perform to create a new column using mutate(). okcupid_profiles &lt;- okcupid_profiles %&gt;% mutate(age_centered = age - mean(age, na.rm = TRUE)) Notice that the glimpse() command reveals that after we use the mutate() command there is a new column called age_centered. glimpse(okcupid_profiles) ## Rows: 59,946 ## Columns: 7 ## $ age &lt;dbl&gt; 22, 35, 38, 23, 29, 29, 32, 31, 24, 3… ## $ diet &lt;chr&gt; &quot;strictly anything&quot;, &quot;mostly other&quot;, … ## $ height &lt;dbl&gt; 75, 70, 68, 71, 66, 67, 65, 65, 67, 6… ## $ pets &lt;chr&gt; &quot;likes dogs and likes cats&quot;, &quot;likes d… ## $ sex &lt;chr&gt; &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;m&quot;, &quot;f&quot;, &quot;f… ## $ status &lt;chr&gt; &quot;single&quot;, &quot;single&quot;, &quot;available&quot;, &quot;sin… ## $ age_centered &lt;dbl&gt; -10.3403, 2.6597, 5.6597, -9.3403, -3… 2.6 Advanced tidyverse commands In this advanced selection we revisit the commands from the basic tidyverse section but use more complicated code to either select or apply an action to more than one column at a time. We will indicate the columns that we want to select or apply an action to using: starts_with(), ends_with(), contains(), matches(), or where(). The first four of these are used to indicate columns based on column names. In contrast, the last command, where(), is used to indicate the columns based on the column type (numeric, character, factor, etc.). We will review all five commands for indicating the columns we want in the select() selection below. Following that we will, for brevity, typically use only one of the five commands when illustrating how they work with summarise() and mutate(). We begin by loading a new data. library(tidyverse) data_exp &lt;- read_csv(&quot;data_experiment.csv&quot;) ## Rows: 6 Columns: 6 ## ── Column specification ──────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): sex ## dbl (5): id, t1_vomit, t1_aggression, t2_vomit, t2_aggre... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. The glimpse() command reveals that this is a small data set where every row represents one rat. The sex of the rat is recorded as well as, for each of two time points, a rating of vomiting and aggression. glimpse(data_exp) ## Rows: 6 ## Columns: 6 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, … ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; 6, 7, 6, 7, 5, 8 2.6.1 select() 2.6.1.1 select() using column name 2.6.1.1.1 starts_with() starts_with() allows us to select columns based on how the column name begins. Here we put the columns that begin with “t1” into a new data called data_time1. data_time1 &lt;- data_exp %&gt;% select(starts_with(&quot;t1&quot;)) The glimpse command shows us the new data only contains the columns that begin with “t1” glimpse(data_time1) ## Rows: 6 ## Columns: 2 ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 2.6.1.1.2 ends_with() ends_with() allows us to select columns based on how the column name ends. Here we put the columns that end with “aggression” into a new data set called data_aggression. data_aggression &lt;- data_exp %&gt;% select(ends_with(&quot;aggression&quot;)) glimpse(data_aggression) ## Rows: 6 ## Columns: 2 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 ## $ t2_aggression &lt;dbl&gt; 6, 7, 6, 7, 5, 8 2.6.1.1.3 contains() contains() allows us to select columns based on the contents of the column name. Here we put the columns that have “_” in the name into a new data set called new_data. new_data &lt;- data_exp %&gt;% select(contains(&quot;_&quot;)) glimpse(new_data) ## Rows: 6 ## Columns: 4 ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; 6, 7, 6, 7, 5, 8 2.6.1.1.4 matches() It’s also possible to use regex (i.e., a regular expression) to select columns. Regex is a powerful way to specify search/matching requirements for text - in this case the text of column names. An explanation of regex is beyond the scope of this chapter. Nonetheless the example below uses regex to select any column with an underscore in the column name followed by any character. The result is the same as the above for the contains() command. However, the matches() command is more flexible than the contains() command and can take into account substantially more complicated situations. data_matched &lt;- data_exp %&gt;% select(matches(&quot;(_.)&quot;)) You can see the columns selected using regex: glimpse(data_matched) ## Rows: 6 ## Columns: 4 ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; 6, 7, 6, 7, 5, 8 You can learn about regex at RegexOne and test your regex specification at Regex101. Ideally though, as we discuss in the next chapter, you can use naming conventions that are sufficiently thoughtful that you don’t need regex, or only rarely. The reason for this is that regex can be challenging to use. As Twitter user @ThatJenPerson noted “Regex is like tequila: use it to try to solve a problem and now you have two problems.” Nonetheless, at one or two points in the future we will use regex to solve a problem (but not tequila). 2.6.1.2 select() using column type In many cases we will want to select or perform an action on a column based on whether the column is a numeric, character, or factor column (indicated in glimpse output as dbl, chr, and fct, respectively). We will learn more about factors later in this chapter. Each of these column types can be selected by using is.numeric, is.character, or is.factor, respectively, in combination with the where() command. We can select numeric columns using where() and is.numeric: data_numeric_columns &lt;- data_exp %&gt;% select(where(is.numeric)) You can see the new data contains only the numeric columns: glimpse(data_numeric_columns) ## Rows: 6 ## Columns: 5 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; 6, 7, 6, 7, 5, 8 We can select character (i.e., chr) columns using where() and is.character: data_character_columns &lt;- data_exp %&gt;% select(where(is.character)) You can see the new data contains only the character columns: glimpse(data_character_columns) ## Rows: 6 ## Columns: 1 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;f… In a future chapter you will see how we can select factors using where(is.factor). 2.6.2 summarise() The summarise() command can summarise multiple columns when combined with starts_with(), ends_with(), contains(), matches(), and where(). However, to use these powerful tools for indicating columns with the summarise command we need the help of the across() command (i.e., across multiple columns). If we want to obtain the mean of all the columns that start with “t1” we use the commands below. The across command requires that we indicate the columns we want via the .cols argument and the command/function we want to run on those columns via the .fns argument. In the example below, we also add na.rm = TRUE at the end; this is something we send to the mean command to let it know how we want to handle missing data. We add as.data.frame() to get a larger number of decimals. data_exp %&gt;% summarise(across(.cols = starts_with(&quot;t1&quot;), .fns = mean, na.rm = TRUE)) %&gt;% as.data.frame() ## t1_vomit t1_aggression ## 1 1.833 5.5 If you want to get more sophisticated, you can also add this .names argument below which tells R to call label each output mean by the column name followed by “_mean”. data_exp %&gt;% summarise(across(.cols = starts_with(&quot;t1&quot;), .fns = mean, na.rm = TRUE, .names = &quot;{col}_mean&quot;)) %&gt;% as.data.frame() ## t1_vomit_mean t1_aggression_mean ## 1 1.833 5.5 Often you want to calculate more than one statistic for each column. For example, you might want the mean, standard deviation, min, and max. These statistics can be calculated via the mean, sd, min, and max commands, respectively. However, you need to create a list with the statistics you desire. Below we create a list of the descriptive statistics we desire called desired_statistics, but you can use any name you want. This list only needs to be specified once, but we will repeat it in the examples below for clarity. desired_descriptives &lt;- list( mean = ~mean(.x, na.rm = TRUE), sd = ~sd(.x, na.rm = TRUE) ) Once you have created the list of descriptive statistics you want you can run the command below to obtain those statistics. However, as you will see the output is too wide to be helpful. data_exp %&gt;% summarise(across(.cols = starts_with(&quot;t1&quot;), .fns = desired_descriptives)) %&gt;% as.data.frame() ## t1_vomit_mean t1_vomit_sd t1_aggression_mean ## 1 1.833 1.169 5.5 ## t1_aggression_sd ## 1 1.871 Consequently, we add the t() command (i.e., transpose command) to the end of the summarise request to get a more readable list of statistics: desired_descriptives &lt;- list( mean = ~mean(.x, na.rm = TRUE), sd = ~sd(.x, na.rm = TRUE) ) data_exp %&gt;% summarise(across(.cols = starts_with(&quot;t1&quot;), .fns = desired_descriptives)) %&gt;% as.data.frame() %&gt;% t() ## [,1] ## t1_vomit_mean 1.833 ## t1_vomit_sd 1.169 ## t1_aggression_mean 5.500 ## t1_aggression_sd 1.871 Note that in the across command above we could also have used: ends_with(), contains(), matches(), or where(). 2.6.3 mutate() The mutate() command can also be applied to multiple columns using the across() command. However, sometimes we need to embed our calculation in a custom function. Below is a custom function called make_centered. This custom function takes the values in a column and subtracts the column mean from each value in the column. This is the same task we did previous using the mutate() command in the basic tidyverse section. make_centered &lt;- function(values) { values_out &lt;- values - mean(values, na.rm = TRUE) return(values_out) } The glimpse() command shows us all the column names. Also notice the values in the agresssion columns are integers. glimpse(data_exp) ## Rows: 6 ## Columns: 6 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, … ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; 5, 6, 4, 7, 3, 8 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; 6, 7, 6, 7, 5, 8 We combine the mutate() command, with the across() command, and our custom make_centered() command below. The command “centers” or subtracts the mean from any column that ends with “aggression.” data_exp &lt;- data_exp %&gt;% mutate(across(.cols = ends_with(&quot;aggression&quot;), .fns = make_centered)) You can see via the glimpse() output that the contents of all the columns that end with “aggression” have changed. Every value in each of these columns has had the column mean subtracted from it. glimpse(data_exp) ## Rows: 6 ## Columns: 6 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, … ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; -0.5, 0.5, -1.5, 1.5, -2.5, 2.5 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; -0.5, 0.5, -0.5, 0.5, -1.5, 1.5 Note that in the across() command above, we could also have used: starts_with(), contains(), matches(), or where(). 2.6.3.1 mutate() within rows Researchers often want to average within rows and across columns to create a new column. That is, for each participant (i.e., rat in the current data) we might want to calculate a vomit score that is the average of the two time points (that we will call vomit_avg). To average within rows (and across columns) we use the rowwise() command to inform R of our intent. However, after we do the necessary calculations we have to shut off the rowwise() calculation state by using the ungroup() command. As well, when we are averaging within rows we have to use c_across() instead of across(). The commands below create a new column called vomit_avg which is the average of the vomit ratings across both times. As before, we also include na.rm = TRUE so the computer drops missing values (if present) when calculating the mean. data_exp &lt;- data_exp %&gt;% rowwise() %&gt;% mutate(vomit_avg = mean( c_across(cols = ends_with(&quot;vomit&quot;)), na.rm = TRUE)) %&gt;% ungroup() You can see the new column we created with the glimpse() command: glimpse(data_exp) ## Rows: 6 ## Columns: 7 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, … ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; -0.5, 0.5, -1.5, 1.5, -2.5, 2.5 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; -0.5, 0.5, -0.5, 0.5, -1.5, 1.5 ## $ vomit_avg &lt;dbl&gt; 2.5, 1.5, 0.5, 2.5, 1.5, 1.5 The print() command could make it easier to see that the new column is the average of the other two, but if we use the print() command below it wouldn’t work. Why? There are too many columns in the data set, so only the first few columns are shown. print(data_exp) To see that the new column, vomit_avg, is the average of the other vomit columns we use the select command before print(). This prints only the relvant columns. When this is done, it’s easy to see how the values in the vomit_avg column are the mean of the other two columns. data_exp %&gt;% select(contains(&quot;vomit&quot;)) %&gt;% print() ## # A tibble: 6 × 3 ## t1_vomit t2_vomit vomit_avg ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3 2 2.5 ## 2 2 1 1.5 ## 3 0 1 0.5 ## 4 3 2 2.5 ## 5 2 1 1.5 ## 6 1 2 1.5 2.6.3.2 mutate() within rows using column names Sometimes it can be difficult to use one of the advanced select commands to obtain the columns you need to average across. The advanced commands like ends_with() and starts_with() can sometimes include columns you don’t want. The command below is equivalent to the one above, however, we explicitly name the variables we want to average across. data_exp &lt;- data_exp %&gt;% rowwise() %&gt;% mutate(vomit_avg = mean( c_across(cols = c(t1_vomit, t2_vomit)), na.rm = TRUE)) %&gt;% ungroup() You can use print() to confirm we get the same result: data_exp %&gt;% select(contains(&quot;vomit&quot;)) %&gt;% print() ## # A tibble: 6 × 3 ## t1_vomit t2_vomit vomit_avg ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3 2 2.5 ## 2 2 1 1.5 ## 3 0 1 0.5 ## 4 3 2 2.5 ## 5 2 1 1.5 ## 6 1 2 1.5 2.6.3.3 mutate() for factors It is critical that you indicate to R that categorical variables are in fact categorical variables. In R, categorical variables are referred to as factors. For humans, a factor like sex has three possible levels: female, male, intersex. An inspection of the glimpse() command output reveals that the sex column has the type character - as indicated by “chr.” Also notice, as you inspect this output, that we use words (e.g., female) to indicate the sex in the column rather than a number to represent a female participant (e.g., 2). This is the preferred, but less common, approach to entering data. glimpse(data_exp) ## Rows: 6 ## Columns: 7 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, … ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; -0.5, 0.5, -1.5, 1.5, -2.5, 2.5 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; -0.5, 0.5, -0.5, 0.5, -1.5, 1.5 ## $ vomit_avg &lt;dbl&gt; 2.5, 1.5, 0.5, 2.5, 1.5, 1.5 We need to convert the sex column to a factor in order for R to handle it appropriately in analyses. Failure to indicate the column is a factor column could result in R conducting all the analyses and presenting incorrect results. Consequently, it is critical that we covert the column to a factor. Fortunately, that is easily done using the as_factor() command (there is also an as.factor command if as_factor won’t work for some reason). We convert the sex column to a factor with this code: data_exp &lt;- data_exp %&gt;% mutate(sex = as_factor(sex)) You can confirm this worked with the glimpse() command: glimpse(data_exp) ## Rows: 6 ## Columns: 7 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6 ## $ sex &lt;fct&gt; male, female, male, female, male, fe… ## $ t1_vomit &lt;dbl&gt; 3, 2, 0, 3, 2, 1 ## $ t1_aggression &lt;dbl&gt; -0.5, 0.5, -1.5, 1.5, -2.5, 2.5 ## $ t2_vomit &lt;dbl&gt; 2, 1, 1, 2, 1, 2 ## $ t2_aggression &lt;dbl&gt; -0.5, 0.5, -0.5, 0.5, -1.5, 1.5 ## $ vomit_avg &lt;dbl&gt; 2.5, 1.5, 0.5, 2.5, 1.5, 1.5 If you entered your data using words for each level of sex (e.g., male, female) you’re done at this point. However, if you used numbers to represent each level of sex in your data, there is one more step. Imagine your data was entered in a poorly advised manner, such that 1 was used to indicate male, 2 was used to indicate female, and 3 was used to indicate intersex. If this was the case, you need to indicate to R what each of those values represent. We do that with the code below. data_exp &lt;- data_exp %&gt;% mutate(sex = fct_recode(sex, male = &quot;1&quot;, female = &quot;2&quot;, intersex = &quot;3&quot;)) 2.7 Using help In order to become efficient at analyzing data using R, you will need to become adapt at reading and understanding the help files associated with each command. After you have activated a package using the library command (e.g., library(tidyverse)) you can access the help page for every command in that package. To access the help page simply type a question mark followed by the command you want to know how to use (no space between them). The code below brings up the help page for the select() command. Notice that we put the library() command first - just a reminder that this needs to be done prior to using help for that package. Try the commands below in the Console: library(tidyverse) ?select Examine the page that appears on the Help tab in the panel in the lower right of your screen. Read through the help file comparing what you read there to what we have learned about the select command. Notice how the help file tells you about the argument that you sent into the select() command, and also what the select() command returns when it receives those commands. Pay particular attention to the examples near the bottom of the help page. At the very bottom of the help page you will see [Package dplyr version 1.0.0 Index]. This tells you the select() command is from the dplyr package (part of the tidyverse). Notice that the word “Index” is underlined. Click on the word Index. You will be presented with list of other commands in the dplyr package. As you become more experienced with R help pages, this is how you will learn to use new commands. Examine the help pages for the commands below by typing a question mark into the Console followed by the command name. Note that for filter and starts_with you will be presented with a menu instead of help page. This typically occurs because the command is in more than one package. If this does occur, read through the options you are presented with to try and figure out which one you wanted. Typically, you want the first option. If you’re not sure, try one. If it’s not what you want, use the back arrow in the Help panel to go back and pick another one. mutate filter starts_with 2.8 Base R vs tidyverse All of the commands used to this point in the chapter have been the tidyverse approach to using R. That is the approach we will normally use. However, it’s important to note that there is another way of using R, called base R. Sometimes students have problems with their code when they mix and match these approaches using a bit of both. We will be using the tidyverse approach to using R but on the internet you will often see sample code that uses the older base R approach. A bit of background knowledge is helpful for understanding why we do things one way (e.g., read_csv with the tidyverse) instead of another (e.g., read.csv with base R). 2.8.1 Tibbles vs. data frames When you load data into R, it is typically represented in one of two formats inside the computer - depending on the command you used. The original format for representing a data set in R is the data frame. You will see this term used frequently when you read about R. When you load data using read.csv(), your data is loaded into a data frame in the computer. That is, your data is represented in the memory of the computer in a particular format and structure called a data frame. This contrasts with the newer tidyverse approach to representing data in the computer called a tibble - which is just a newer more advanced version of the data frame. 2.8.2 read.csv() and data frames When you read data into R using the command read.csv() (with a period) you load the data into a data frame (base R). my_dataframe &lt;- read.csv(file = &quot;data_okcupid.csv&quot;) Notice that when you print a data frame it does not show you the number of rows or columns above the data like our example did with the okcupid_profiles data. Likewise, it does not show you the type of data in each column (e.g., dbl, fct, chr). It also presents all of your data rather than just the first few rows (as the tibble does). As a result, in the output below, we show only the first 10 rows of the output - because all the rows are printed in your Console with a data frame (too much to show here). print(my_dataframe) ## age diet height pets ## 1 22 strictly anything 75 likes dogs and likes cats ## 2 35 mostly other 70 likes dogs and likes cats ## 3 38 anything 68 has cats ## 4 23 vegetarian 71 likes cats ## 5 29 &lt;NA&gt; 66 likes dogs and likes cats ## 6 29 mostly anything 67 likes cats ## 7 32 strictly anything 65 likes dogs and likes cats ## 8 31 mostly anything 65 likes dogs and likes cats ## 9 24 strictly anything 67 likes dogs and likes cats ## 10 37 mostly anything 65 likes dogs and likes cats ## sex status ## 1 m single ## 2 m single ## 3 m available ## 4 m single ## 5 m single ## 6 m single ## 7 f single ## 8 f single ## 9 f single ## 10 m single 2.8.3 read_csv() and tibbles When you read data into R using the command read_csv() (with an underscore) you load the data into a tibble (tidyverse). my_tibble &lt;- read_csv(file = &quot;data_okcupid.csv&quot;) ## Rows: 59946 Columns: 6 ## ── Column specification ──────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (4): diet, pets, sex, status ## dbl (2): age, height ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. The tibble is modern version of the data frame. Notice that when you print a tibble it DOES show you the number of rows and columns. As well, it shows you the type of data in each column. Importantly, the tibble only provides the first few rows of output so it doesn’t fill your screen. print(my_tibble) ## # A tibble: 59,946 × 6 ## age diet height pets sex status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 22 strictly anything 75 likes dogs … m single ## 2 35 mostly other 70 likes dogs … m single ## 3 38 anything 68 has cats m availa… ## 4 23 vegetarian 71 likes cats m single ## 5 29 &lt;NA&gt; 66 likes dogs … m single ## 6 29 mostly anything 67 likes cats m single ## 7 32 strictly anything 65 likes dogs … f single ## 8 31 mostly anything 65 likes dogs … f single ## 9 24 strictly anything 67 likes dogs … f single ## 10 37 mostly anything 65 likes dogs … m single ## # … with 59,936 more rows In short, you should always use tibbles (i.e., use read_csv() not read.csv()). The differences between data frames and tibbles run deeper than the superficial output provided here. On some rare occasions an old package or command may not work with a tibble so you need to make it a data frame. You can do so with the commands below. We will flag these rare occurances to you when they occur. # Create a data frame from a tibble new_dataframe &lt;- as.data.frame(my_tibble) "],["graphing.html", "Chapter 3 Graphing 3.1 Required 3.2 Data 3.3 Graph basics 3.4 Graphing efficiently 3.5 Aesthetics 3.6 APA style 3.7 Axes 3.8 Axis values 3.9 Custom colours 3.10 Emoji 3.11 Accessible Colors 3.12 Saving", " Chapter 3 Graphing A great part of learning R is learning how to use ggplot2 which is part of the tidyverse. One way to learn ggplot2 is via the free ggplot book - I encourage you to check it out. You might also check out this ggplot2 cheatsheet. As well, you might consult this blog to learn more about how themes and colors are handled in ggplot2. In this chapter we merely provide a brief overview of how ggplot2 works. 3.1 Required The data files below are used in this chapter. Right click to save each file. Required Data data_movies.csv The following packages CRAN must be installed: Required CRAN Packages tidyverse RColorBrewer remotes The following GitHub packages must be installed: Required GitHub Packages dill/emoGG After the remotes package is installed, it can be used to install a package from GitHub: remotes::install_github(&quot;dill/emoGG&quot;) 3.2 Data To learn about making graphs using the tidyverse we use movie ratings and box office data obtained at the time of writing. Movie ratings were obtained from the IMDB and RottenTomatoes. Box office data (in millions of dollars) was obtained from Box Office Mojo. If you enjoy learning about movies these are all excellent sites. We begin by loading data_movies.csv using read_csv(), not read.csv(): movie_data &lt;- read_csv(&quot;data_movies.csv&quot;) Next we inspect movie_data using the print() command. We see that each row of the data set corresponds to a superhero movie. print(movie_data) ## # A tibble: 8 × 7 ## title short_title year imdb tomatoes_aud boxoffice ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Iron Man Iron 2008 7.9 96 585 ## 2 Thor Ragna… Thor 2017 7.9 93 854 ## 3 Avengers I… AV3 2018 8.5 91 2048 ## 4 Avengers E… AV4 2019 8.7 91 2744 ## 5 Man of Ste… Sup 2013 7.1 75 668 ## 6 Batman v S… BvS 2015 6.5 63 873 ## 7 Justice Le… JL 2017 6.5 72 657 ## 8 Wonder Wom… WW 2017 7.5 88 821 ## # … with 1 more variable: studio &lt;chr&gt; Next we use glimpse() to see the columns. glimpse(movie_data) ## Rows: 8 ## Columns: 7 ## $ title &lt;chr&gt; &quot;Iron Man&quot;, &quot;Thor Ragnarok&quot;, &quot;Avenger… ## $ short_title &lt;chr&gt; &quot;Iron&quot;, &quot;Thor&quot;, &quot;AV3&quot;, &quot;AV4&quot;, &quot;Sup&quot;, … ## $ year &lt;dbl&gt; 2008, 2017, 2018, 2019, 2013, 2015, 2… ## $ imdb &lt;dbl&gt; 7.9, 7.9, 8.5, 8.7, 7.1, 6.5, 6.5, 7.5 ## $ tomatoes_aud &lt;dbl&gt; 96, 93, 91, 91, 75, 63, 72, 88 ## $ boxoffice &lt;dbl&gt; 585, 854, 2048, 2744, 668, 873, 657, … ## $ studio &lt;chr&gt; &quot;Marvel&quot;, &quot;Marvel&quot;, &quot;Marvel&quot;, &quot;Marvel… The title and short_title columns provide the full title and short title for each movie. Additionally, the IMDB rating, the Rotten Tomatoes Audience rating, and the Box Office Mojo revenue numbers are provided in the imdb, tomatoes_aud, and boxoffice columns, respectively. Finally, the last column, studio, indicates the studio that made the movie (Marvel or DC). It is extremely important for graphing and analyses that you tell R which columns are composed of categorical variables. We do that using the as_factor command. The as_factor command turns a column into a categorical column. We use the mutate command to replace the original column with the column that has been defined as a categorical variables using as_factor. movie_data &lt;- movie_data %&gt;% mutate(across(.cols = where(is.character), .fns = as_factor)) We can confirm the column type has changed by using the glimpse() command again and examing the column types: glimpse(movie_data) ## Rows: 8 ## Columns: 7 ## $ title &lt;fct&gt; Iron Man, Thor Ragnarok, Avengers Inf… ## $ short_title &lt;fct&gt; Iron, Thor, AV3, AV4, Sup, BvS, JL, WW ## $ year &lt;dbl&gt; 2008, 2017, 2018, 2019, 2013, 2015, 2… ## $ imdb &lt;dbl&gt; 7.9, 7.9, 8.5, 8.7, 7.1, 6.5, 6.5, 7.5 ## $ tomatoes_aud &lt;dbl&gt; 96, 93, 91, 91, 75, 63, 72, 88 ## $ boxoffice &lt;dbl&gt; 585, 854, 2048, 2744, 668, 873, 657, … ## $ studio &lt;fct&gt; Marvel, Marvel, Marvel, Marvel, DC, D… 3.3 Graph basics In this section we teach you how to make a graph from first principles to form a foundation for understanding how the tidyverse graphing command ggplot() works. Note, however, that the approach used for creating a graph in this section is for teaching purposes only. Later we will make graphs in a typical, and more efficient, manner. We start a graph using the ggplot() command. The ggplot() command creates an empty template for the graph. After creating the template we have to add content (like bars) to the graph using the geom_col() command. We can also add text using the geom_text() command. Commands that plot information on the graph, such as geom_col(), need to know what data set to use to create the graph. We specify the data set to use via the data argument. For example, we use “data = movie_data” to tell a command which data set to use. Additionally, graphing commands, such as geom_col(), must know the columns/variables to use within that data set when plotting the graph. Specifically, commands need to know which variable/column will vary over the x- and y-axes. We can indicate these columns via the mapping argument. For example, we use “mapping = aes(x = short_title, y = boxoffice)” to tell ggplot() that we should use the column short_title along the x-axis and the column boxoffice when determining heights on the y-axis. This information is nested within the aes() command which is short for aesthetic. You are telling ggplot() about the aesthetics for the graph (i.e., which columns to use for the x- and y-axes) using the aes() command. There are a larger number of aesthetics that you can specify within the aes() command (e.g., color, fill, linetype, etc.). In the examples that follow we tell each command (geom_col, geom_text) which data set and columns to use via the data and mapping arguments. Use geom_col() to put each boxoffice column value into a bar. my_graph &lt;- ggplot() + geom_col(data = movie_data, mapping = aes(x = short_title, y = boxoffice)) print(my_graph) Next, we want to put the boxoffice revenue above each bar so it easier to interpret. In R terms, we are putting a label above each bar. We want the contents for the labels to come from the boxoffice column. Therefore, we add the geom_text() command below: my_graph &lt;- ggplot() + geom_col(data = movie_data, mapping = aes(x = short_title, y = boxoffice)) + geom_text(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice)) print(my_graph) Unfortunately, when we position the text at the exact height of each column it overlaps with the column making it difficult to read. We fix this on the next page using nudge_y. We can nudge each label higher on the y-axis using the nudge_y command. In the above code, we nudge it up 150 units. Since nudge_y uses the values on the y-axis we are nudging the labels up by 150 million on the y-axis. my_graph &lt;- ggplot() + geom_col(data = movie_data, mapping = aes(x = short_title, y = boxoffice)) + geom_text(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice), nudge_y = 150) print(my_graph) 3.4 Graphing efficiently You may have noticed that creating the graphs the way we did above required repeating the data and mapping assignments within each command (e.g., geom_text, geom_col). Fortunately, we can use a shortcut and specify the data and mapping only once in the ggplot() command. Once we do that, the contents of the mapping argument are invisibly copied into each subsequent command (e.g., geom_col, geom_text). In this way, we only have to specify the data and the mapping once. Examine the code below and compare it to the code above. Notice how in the geom_col() command we don’t have anything specified – the data and mapping from the ggplot command are used. Likewise, notice how in the geom_text() command we only specify the arguments we need that are different from those in the ggplot command. In this case, that means simply adding the nudge_y = 150 to the geom_text command. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice)) + geom_col() + geom_text(nudge_y = 150) print(my_graph) 3.5 Aesthetics Exactly how does that aesthetic, aes(), command work? What happens when we put the data and mapping in the ggplot() command instead of the specific commands such as geom_col()? When we put data and the mapping arguments in the ggplot() command we set those attributes for the entire graph. To understand this, you need to know that ggplot uses an internal data set that we will call the “black box” data set (i.e., inside the black box of ggplot). To create a graph ggplot maps/copies columns from your data set (e.g., movie_data) to an internal data set. This internal data set is then used to create the graph. Figure 3.1 below illustrates what is happening “inside the black box” when you create the graph using the code above. FIGURE 3.1: Internal data structure for ggplot 3.5.1 Fill color You might want to influence the color of the bars in the graph such that the bars for Marvel and DC movies have different colors. That’s easy to do with the aes() command. We simply tell aes() that the fill color of any object in the graph should be determined by the studio column. Simply adding “fill = studio” to the aes() command changes the colors of the bars – and any other object on the graph for which fill would be relevant. The internal workings are illustrated in Figure 3.2. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio )) + geom_col() + geom_text(nudge_y = 150) print(my_graph) FIGURE 3.2: Adding a fill column to the internal data 3.5.2 Overriding aes() Just because you specify something in the ggplot() command doesn’t mean that you are “stuck with it” for all your subsequent commands. Recall how at the start of this exercise we specified the data and the mapping for each geom_col() and geom_text() individually. We can still do that. Now we want to add the Rotten Tomatoes Audience score for each movie above the box office revenue. But if we use geom_text(), like we did before, it will plot the same boxoffice information because of “label = boxoffice” in the aes() specification within ggplot(). We want the new geom_text() command to plot different text; that is, we want it to use “label = tomatoes_aud.” Fortunately, if we simply put “mapping = aes(label = tomatoes_aud)” within the new geom_text() command we get the desired information on the graph. The mapping/aes arguments within geom_text() override the mapping/aes arguments within ggplot(). Or more accurately, the new geom_text() command creates its own version of the internal data set in which the label column is filled with information from tomatoes_aud. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud)) print(my_graph) Notice that we have the same problem as before with the text being difficult to read because it overlaps with the bar. We add “nudge_y = 400” to move the text higher than the boxoffice text/label. Don’t forget the units used by nudge_y are the units on the y-axis. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) print(my_graph) 3.6 APA style Use theme_classic() to make the graph apear in APA style. We use theme_classic(12) to make the graph APA style with a 12-point font: my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + theme_classic(12) print(my_graph) 3.7 Axes 3.7.1 Range We use the coord_cartesian() command to adjust range of axes. In the code below we use coord_cartesian() to make the y-axis range from 0 to 3500. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + theme_classic(12) print(my_graph) Note that if you had a continuous variable on the x-axis (we do not in this example), you could set the range of both the x- and y-axes like this: coord_cartesian(ylim = c(0, 3500), xlim = c(0, 3500)) 3.7.2 Ticks We use the scale_y_continuous() command to adjust the ticks on the y-axis. We set the ticks on the y-axis to range from 0 to 3500 in 500 tick increments using the scale_y_continuous command below via the breaks argument: my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + theme_classic(12) print(my_graph) Note that if you had a continuous variable on the x-axis (we do not in this example), you could set the ticks of the x-axis like the code below using scale_x_continuous: scale_x_continuous(breaks = seq(0, 3500, by = 500)) 3.7.3 Labels Labels are an extremely important part of any graph. This fact is the focus of the xkcd cartoon below: We use the labs() command to set the labels for the x- and y-axes: my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) print(my_graph) 3.8 Axis values 3.8.1 Text What if we want to use the full movie title rather than the short version on the x-axis of the graph? That is, you want to change the values along the x-axis. Two methods are presented below. 3.8.1.1 Method 1: Recoding axis values Our data file contains a column with the long/full version of the movie names. But many times you won’t have the additional/longer labels available in this manner. In this situation, you use the scale_x_discrete() command to change the values along the x-axis. The values along the x-axis come from the short_title column which is a factor. The levels of that factor correspond to the short titles for the movies (Iron, Thor, etc.). We need to relabel the levels of the short_title factor to get a graph with full titles. We relabel the levels of the short_title factor using the scale_x_discrete() command. The graph code with scale_x_discrete() command is below - notice the problem we have with the labels overlapping though. On the next page, we’ll use an easier approach though - since we have an extra column with the full titles. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = short_title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + scale_x_discrete(labels=c(&quot;Iron&quot; = &quot;Iron Man&quot;, &quot;Thor&quot; = &quot;Thor Ragnarkok&quot;, &quot;AV3&quot; = &quot;Avengers Infinity War&quot;, &quot;AV4&quot; = &quot;Avengers Endgame&quot;, &quot;Sup&quot; = &quot;Man of Steel&quot;, &quot;BvS&quot; = &quot;Batman v Superman&quot;, &quot;JL&quot; = &quot;Justice League&quot;, &quot;WW&quot; = &quot;Wonder Woman&quot;)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) print(my_graph) 3.8.1.2 Method 2: Longer label columns With our movie data we don’t need to use scale_x_discrete() because we have a column in the data with the full titles. Consequently, to use full length titles we just have to change the mappingfor x from short_title to title. Notice that we still have the problem with overlapping labels on the x-axis! my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) print(my_graph) 3.8.2 Angle Use theme() to adjust the angle of x-axis labels. Notice, however, that the longer titles are vertically centered on each point on the x-axis. In the next section we fix this problem. Important: The theme command must come after the theme_classic command. Otherwise, theme_classic will undo the work done by the theme_command if it appears after the theme command. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60)) print(my_graph) 3.8.3 Alignment Use theme() and the hjust argument to adjust the alignment of the x-axis labels. To make the titles look correct on the x-axis we need them at an angle, but we also need them right justified against the x-axis. We do that with the the hjust argument (1 means right justify). See the code below: my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) print(my_graph) 3.8.4 Order 3.8.4.1 Increasing order We can make the movie bars go left to right in lowest to highest box office receipt order by changing the factor order prior to creating the graph. We do so with the mutate() and fct_reorder() commands. The default order is ascending values even though we don’t specify it. movie_data &lt;- movie_data %&gt;% mutate(title = fct_reorder(title, boxoffice)) my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) print(my_graph) 3.8.4.2 Decreasing order We can make the movie bars go left to right in highest to lowest box office receipt order by changing the factor order prior to creating the graph. We use the same code as before but add the desc() command (i.e.,descending) around boxoffice in the fct_reorder() call: movie_data &lt;- movie_data %&gt;% mutate(title = fct_reorder(title, desc(boxoffice))) my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) print(my_graph) 3.8.4.3 Custom order We can make the movie bars go left to right in a custom order by changing the factor order prior to creating the graph. Because we want a custom order of the factor levels we use fct_relevel(), instead of the the fct_reorder() command from the previous two examples. Below I use this approach to manually order movies highest to lowest boxoffice within movie studio (Marvel or DC). movie_data &lt;- movie_data %&gt;% mutate(title = fct_relevel(title, &quot;Avengers Endgame&quot;, &quot;Avengers Infinity War&quot;, &quot;Thor Ragnarok&quot;, &quot;Iron Man&quot;, &quot;Batman v Superman&quot;, &quot;Wonder Woman&quot;, &quot;Man of Steel&quot;, &quot;Justice League&quot;)) my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) 3.8.5 Legend order After inspecting the graph on the previous page, you might think that Marvel should be above DC in the legend. You can do that by reordering the studio factor: movie_data &lt;- movie_data %&gt;% mutate(studio = fct_relevel(studio, &quot;Marvel&quot;, &quot;DC&quot;)) my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) 3.9 Custom colours 3.9.1 R palette You might look at the previous graph and think “Marvel should be red and DC should be blue since those are the colours of their respective logos.” You can do that with the code below. Note that you specify the colours in the order the names appear in the legend (top to bottom). R colour names/pictures can be found here: http://sape.inf.usi.ch/quick-reference/ggplot2/colour my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_manual(values = c(&quot;red&quot;, &quot;blue&quot;)) 3.9.2 Hex colours If you are a really big geek (like me) you might look at the previous graph and think “Those aren’t the proper colours for the Marvel and DC - lame!” So… you do some internet research and determine that you can specify colours using hexidecimal numbers. More specifically, you find Marvel red is #ed1d24 and DC blue is #0476F2 using hex colour codes. You can use those precise colours via the scale_fill_manual() command below. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 400) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_manual(values = c(&quot;#ed1d24&quot;, &quot;#0476F2&quot;)) 3.10 Emoji Make the graph more fun with the emoGG package. You might like to make the graph more fun by putting tomatoes on the graph to indicate what the extra numbers mean. We can do that with the emoGG package. The installation instructions for this package are at the start of this chapter; note, that it is installed via GitHub rather than the CRAN. Course R Studio Cloud users - the installation has already been done. After installation you need to activate the emoGG package: library(emoGG) Visit this link to check out the codes for emoji: https://apps.timwhitlock.info/emoji/tables/unicode If you scroll down to section 5 Uncategorized on this page you will find the code for a tomato is 1f345. Note that the code below will only work with an internet connection. The command geom_emoji() needs internet access to retrieve the emoji graphic requested. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 600, colour = &quot;red&quot;) + geom_emoji(mapping = aes(y = boxoffice + 400), emoji=&quot;1f345&quot;) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_manual(values = c(&quot;#ed1d24&quot;, &quot;#0476F2&quot;)) 3.11 Accessible Colors The current version of the graph is much improved from where we started at the begining of the chapter. One notable improvement was the use of the “proper” colors for the Marvel and DC studios. Although using these colors was aethetically pleasing, a major consideration is ensuring your graphs are accessible to a wide audience. Color blindness is an issue that affects approximately five percent of the population. A nuanced discussion of the different types of color blindness is beyond the scope of this chapter. We can, however, take a momement to think about every graph as being composed of two parts that work together to create the colors overall image. We can think of there being a lightness (i.e., light vs. dark) component and a hue component (e.g., magenta, yellow, etc.). Together these two components work together to create colors that we see. This distinction between lightness and hue is relevant to all images not just graphs (see Margulis 2005). FIGURE 3.3: Hue removed from current graph Figure 3.3A presents our current graph whereas Figure 3.3B presents the same graph with the hue component removed. You can see that when the hue component is removed that the distinction between the Marvel and DC bars is also removed. The particular colors used to represent Marvel/DC differ in terms of hue but not lightness. Consequently, when we remove the hue component we are left with a graph, 3.3B, that does not differentiate between the two studios. In order for a color graph to be accessible to people with color blindness we need to pick colors that vary in terms of lightness as well as hue. We can do that with the help of the RColorBrewer package. 3.11.1 RColorBrewer 3.11.1.1 Picking a palette The RColorBrewer package can be used to generate color palettes for graphs that are accessible to people with color blindness. That is, it creates sets of colors, called palettes, for which the colors vary in terms of both lightness and hue. You can see the color-blind accessible palettes, along with their respective names, by using the command below. This code produces a wide range of color-blind accessible palettes with a large number of colors in each palette - as illustrated in Figure 3.4. library(RColorBrewer) display.brewer.all(n = NULL, colorblindFriendly = TRUE) FIGURE 3.4: Wide range color palette (color-blind accessible) In Figure 3.4, above, we showed palettes with a large number of colors. But if you have a smaller number of possible colors in your graph - you want a palette with fewer colors (to ensure maximum contrast between those colors). You can, for example, obtain palettes with only three colors using the code below. library(RColorBrewer) display.brewer.all(n = 3, colorblindFriendly = TRUE) The above code generates the three-color palettes presented in Figure 3.5. FIGURE 3.5: Narrow range color palette (color-blind accessible) 3.11.1.2 Using a palette We can use a color palette by specifying its name within scale_fill_brewer(). We want to use the “Paired” palette in Figure 3.5 so we use the code: scale_fill_brewer(palette = “Paired”), as illustrated below: my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 600, colour = &quot;red&quot;) + geom_emoji(mapping = aes(y = boxoffice + 400), emoji=&quot;1f345&quot;) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_brewer(palette = &quot;Paired&quot;) 3.11.1.3 Palette subsets Our graph had only two colors but the “Paired” palette had three colors. When ggplot made the graph it automatically used the first two colors of the three color palette. What if you wanted the second two colors in the palette? We can do that but we have to revert to a manual color process like we used before via the scale_fill_manual(). But we want to do so using the colors from the “Paired” palette. We can obtain the color codes for the “Paired” palette with the code below: brewer.pal(n = 3, name = &quot;Paired&quot;) ## [1] &quot;#A6CEE3&quot; &quot;#1F78B4&quot; &quot;#B2DF8A&quot; The numbers in the output correspond to values representing the three colors of the “Paired” palette, see Figure 3.6. If we want the last two colors in the palette for our graph that means we want the colors: #1F78B4 and #B2DF8A. FIGURE 3.6: Paired palette colors with hex numbers We can put the two colors we want (#1F78B4 and #B2DF8A) on the graph by using the scale_fill_manual() command - instead of the scale_fill_brewer() command. We can see this in the code below: my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 600, colour = &quot;red&quot;) + geom_emoji(mapping = aes(y = boxoffice + 400), emoji=&quot;1f345&quot;) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_manual(values = c(&quot;#1F78B4&quot;, &quot;#B2DF8A&quot;)) Now that we have used a color-blind accessible palette in the graph we can look at the graph without the hue component. In Figure 3.7B, below, notice that the bars representing the two studios are easily distinguishable based on lightness alone. That is, the lightness graph in Figure 3.7B demonstrates the new color-blind accessible colors vary in term of both hue and lightness - not just hue. Therefore, when hue is removed the two colors are distinguishable. This makes the graph accessible to color-blind individuals. FIGURE 3.7: Color information (i.e., hue) removed from new color-blind accessible graph 3.11.2 Avoid color When you only have two colors on a graph another option for creating an accessible graph is to remove the colors entirely and make a black and white graph. In the code below we use scale_fill_manual() with the values “#ffffff” (white) and ““#000000” (black). The intent was to create bars that are white for Marvel and black for DC. Unfortunately, because the graph has a white background you can see this resulted in the Marvel bars disappearing. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col() + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 600, colour = &quot;red&quot;) + geom_emoji(mapping = aes(y = boxoffice + 400), emoji=&quot;1f345&quot;) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_manual(values = c(&quot;#ffffff&quot;, &quot;#000000&quot;)) How do we get around the Marvel bars disappearing when we use white? Color vs. fill. The ggplot packages makes a distinction between fill and color. The term fill is used to refer to the inside color of bars. In contrast, color is used to the refer to the lines that outline the shape of each bar. In the previous code we used fill to change the colors of the bars but we did not use the “color” argument in a command. In the code below, we modify the geom_col() command to use the “color” argument. Specifically, we change geom_col() to geom_col(color = “black”). This change adds a black outline around all the bars – including the ones with a white fill. You can see the result is a much improved graph. This black/white graph is accessible to everyone. my_graph &lt;- ggplot(data = movie_data, mapping = aes(x = title, y = boxoffice, label = boxoffice, fill = studio)) + geom_col(color = &quot;black&quot;) + geom_text(nudge_y = 150) + geom_text(mapping = aes(label = tomatoes_aud), nudge_y = 600, colour = &quot;red&quot;) + geom_emoji(mapping = aes(y = boxoffice + 400), emoji=&quot;1f345&quot;) + coord_cartesian(ylim = c(0, 3500)) + scale_y_continuous(breaks = seq(0, 3500, by = 500)) + labs(x = &quot;Movie&quot;, y = &quot;Box office (millions)&quot;, fill = &quot;Studio&quot;) + theme_classic(12) + theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_fill_manual(values = c(&quot;#ffffff&quot;, &quot;#000000&quot;)) 3.12 Saving If you have a Mac it is easy to drag and drop a PDF file into MS Word - so making a PDF file is the best bet for saving your graph. You can do so with the code below which creates a 6 inch by 6 inch graph. 3.12.1 MAC If you are able to use PDFs in your workflow that’s often the best option for saving. PDFs are mathematical in nature and therefore can be printed at any size at high quality. With a MAC you can just drag and drop the PDF file into your MSWord document. ggsave(plot = my_graph, filename = &quot;emoji_graph.pdf&quot;, width = 6, height = 6) 3.12.2 PC or MAC If you have a PC it’s hard to put a PDF into MSWord. Therefore, save the graph as a .jpg file. You do so with the code below. This creates a picture type file at a resolution (dpi = dots per inch) that is sufficiently high for quality printing. With a PC you need to use the INSERT menu and insert the graph as a picture in MSWord. With a MAC you can just drag and drop the .jpg file into your MSWord document. ggsave(plot = my_graph, filename = &quot;emoji_graph.jpg&quot;, width = 6, height = 6, dpi = &quot;print&quot;) References "],["populations.html", "Chapter 4 Populations 4.1 Notation 4.2 Population vs samples 4.3 A small population 4.4 Visualizing populations 4.5 Comparisons: Same \\(\\sigma\\) 4.6 Comparisons: Different \\(\\sigma\\) 4.7 Comparisons: Repeated Measures 4.8 Comparison Benchmarks 4.9 Population relations 4.10 Relation benchmarks 4.11 Key points 4.12 Minor Points 4.13 Self Assessment", " Chapter 4 Populations 4.1 Notation In this chapter we will use summation notation. If you are not familiar with summation notation, we present a brief overview here. Consider a scenario where we have the IQ data for three participants We use the N symbol to represent the number of participants. Because we have three participants N = 3. The data for these participants is illustrated in Figure 4.1. Notice how each person in the data set can be represented by the variable X: the first person by \\(X_1\\), the second by \\(X_2\\), and the third by \\(X_3\\). Often we refer to individuals in a data set by using the variable X accompanied by a subscript (e.g., 1, 2, 3, etc.). FIGURE 4.1: Data for understanding summation notation Referring to participants using the variable X and subscript is valuable because it can be used in conjunction with the sigma (i.e., \\(\\Sigma\\)) symbol for summation. Consider the example below in which we use the summation notation to indicate that we want to add all the X values (representing IQ) for the participants. We use a lower case \\(i\\) to represent all possible subscript values. The notation, \\(i\\) = 1, below the \\(\\Sigma\\) symbol indicates that we should start with participant 1. The notation, N, above the \\(\\Sigma\\) symbol indicates that we should iterate \\(i\\) up to the value indicated by N; in this case 3, because there are three participants. \\[ \\begin{aligned} \\sum_{i=1}^{N} X_i &amp;= X_1 + X_2 + X_3\\\\ &amp;= 110 + 120 + 100 \\\\ &amp;= 330 \\end{aligned} \\] Sometimes, to simplify the notation, the numbers above and below the \\(\\Sigma\\) symbol are omitted. Likewise, the \\(i\\) subscript is omitted. There is a general understanding that when these components of the notation are omitted the version of the notation above is implied. \\[ \\begin{aligned} \\sum{X} &amp;= X_1 + X_2 + X_3\\\\ &amp;= 110 + 120 + 100\\\\ &amp;= 330 \\end{aligned} \\] Calculating a mean. The full version of the notation can be used to indicate how an average/mean is calculated. \\[ \\begin{aligned} \\bar{X} &amp;= \\frac{\\sum_{i=1}^{N} X_i}{N} \\\\ &amp;= \\frac{X_1 + X_2 + X_3}{3}\\\\ &amp;= \\frac{110 + 120 + 100}{3}\\\\ &amp;= \\frac{330}{3}\\\\ &amp;= 110\\\\ \\end{aligned} \\] Likewise, the concise version of the notation can be used to indicate how an average/mean is calculated. \\[ \\begin{aligned} \\bar{X} &amp;= \\frac{\\sum{X}}{N} \\\\ &amp;= \\frac{X_1 + X_2 + X_3}{3}\\\\ &amp;= \\frac{110 + 120 + 100}{3}\\\\ &amp;= \\frac{330}{3}\\\\ &amp;= 110\\\\ \\end{aligned} \\] Calculating squared differences. A common task in statistics is to calculate 1) the squared difference between each person and the mean, and 2) add up those squared differences. This calculation is easily expressed with the full version of the notation. \\[ \\begin{aligned} \\sum_{i=1}^{N}{(X_i - \\bar{X})^2} &amp;= (X_1-\\bar{X})^2 + (X_2-\\bar{X})^2 + (X_3-\\bar{X})^2\\\\ &amp;= (110-110)^2 + (120-110)^2 + (100-110)^2\\\\ &amp;= (0)^2 + (10)^2 + (-10)^2 \\\\ &amp;= 0 + 100 + 100 \\\\ &amp;= 200 \\end{aligned} \\] Likewise, the sum of the squared differences from the mean can be expressed using the concise version of the notation. \\[ \\begin{aligned} \\sum{(X - \\bar{X})^2} &amp;= (X_1-\\bar{X})^2 + (X_2-\\bar{X})^2 + (X_3-\\bar{X})^2\\\\ &amp;= (110-110)^2 + (120-110)^2 + (100-110)^2\\\\ &amp;= (0)^2 + (10)^2 + (-10)^2 \\\\ &amp;= 0 + 100 + 100 \\\\ &amp;= 200 \\end{aligned} \\] 4.2 Population vs samples As we move closer to conducting our own research it is critical to make a distinction between populations and samples. A population is the complete set of people/animals about which we want to make conclusions. A sample is a randomly selected subset of the population. In most scenarios it is impractical to work with an entire population and, for practical reasons, we study a subset of the population called a sample. Researchers, and consumers of research, typically have little interest in making conclusions at the sample level. In general, we care about conclusions that generalize to the population but not conclusions that only apply to specific individuals in the sample. Consider the case of COVID-19. Imagine a research team creates a vaccine that they hope generates immunity to COVID-19. We care very little if the immunity only works for the specific individuals in the study. However, we care a great deal if the immunity works, or is likely to work, for all Canadians or all humans. We study samples but typically wish to make conclusions that apply to the population. Thus, even if you are an experimental researcher it’s critical that you think in terms of populations and not samples. Indeed, statistical tests (such as the t-test) are a means of helping researchers use sample data to make conclusions at the population level. In this chapter, our focus is on describing populations. When we calculate a number that summarises an attribute of all of the people/animals in the population we refer to it as a parameter. 4.3 A small population In this section we review how to calculate three commonly used population parameters (mean, variance, and standard deviation). Populations are typically quite large but for simplicity we focus on a population composed of the weights of just three chocolate chip cookies. We refer to the three cookies as \\(X_1\\), \\(X_2\\), and \\(X_3\\). The cookies have the weights of 8, 10, and 12 grams, respectively. 4.3.1 Mean (\\(\\mu\\)) It can be helpful to create a model that describes our data. Of course, the model won’t describe every participant perfectly and each participant will differ to some extent from the model. Model: To create a model we first need data, which in this example will be the weight of three different chocolate chip cookies. As mentioned previously, the weights of the three cookies are designated by \\(X_1\\), \\(X_2\\), and \\(X_3\\). A simple model for our cookie weight data is the mean. At the population level the mean is represented by the symbol \\(\\mu\\) see Formula (4.1) below. At the sample level a different notation is used. \\[\\begin{equation} \\mu = \\frac{\\sum{X}}{N} \\tag{4.1} \\end{equation}\\] Using that equation with values: \\[ \\begin{aligned} \\mu &amp;= \\frac{\\sum{X}}{N} \\\\ &amp;= \\frac{X_1 + X_2 + X_3}{3}\\\\ &amp;= \\frac{8 + 10 + 12}{3}\\\\ &amp;= \\frac{30}{3}\\\\ &amp;= 10\\\\ \\end{aligned} \\] We can think of the “mean cookie” as our model for our cookie weight data, see Figure 4.2. The “mean cookie” is represented by \\(\\mu\\) in equations. FIGURE 4.2: Variance as a fit index for the mean Error: As mentioned previously, each participant (i.e., cookie) differs to some extent from our model (“mean cookie”). In general this can be conceptualized as: \\[ \\begin{aligned} X_i &amp;= model + error_i \\\\ \\end{aligned} \\] More specifically, the difference between the weight of any individual cookie (\\(X_i\\)) and the model (\\(\\mu\\)) is indicated by \\(error_i\\) as shown below. \\[ \\begin{aligned} X_i &amp;= \\mu + error_i \\\\ \\end{aligned} \\] The model, above is just a concise way of describing the following: \\[ \\begin{aligned} X_1 &amp;= \\mu + error_1 \\\\ X_2 &amp;= \\mu + error_2 \\\\ X_3 &amp;= \\mu + error_3 \\\\ \\end{aligned} \\] That is the weights of the three cookies (\\(X_1 = 8\\), \\(X_2 = 10\\), and \\(X_3 = 12\\)) can be conceptualized as: \\[ \\begin{aligned} X_1 &amp;= 10 + (-2) \\\\ X_2 &amp;= 10 + 0 \\\\ X_3 &amp;= 10 + 2 \\\\ \\end{aligned} \\] The mean/average of the population, \\(\\mu = 10\\), is a parameter that serves as a model for the cookie weight data. However, it’s helpful to have an index, known as variance, that indicates the extent to which the data do not correspond to the model from the model. 4.3.2 Variance (\\(\\sigma^2\\)) Variance is a simple way of calculating a single number to represent how data differ from a model. It is represented, at the population level, by the symbol \\(\\sigma^2\\); a different notation is used at the sample level. Previously, how we expressed the difference/deviation of cookie weights (data) from the model (i.e., mean) with an error term in the equation \\(X_i = \\mu +error_i\\), see Figure 4.2. The model for all the cookies is \\(\\mu = 10\\). If we consider a single cookie weight of 8 grams (a data point represented by \\(X_1\\)), the difference between the cookie from the model is -2 (i.e., error): \\[ \\begin{aligned} X_1 &amp;= 10 + (-2) \\\\ \\end{aligned} \\] We want a number that indicates the quality of the cookie model. Specifically, we want a single number that indexes overall how the data (i.e., cookie weights) differ from the model (i.e., the mean cookie). We refer to that index as variance (\\(\\sigma^2\\)). Calculating Squared Differences/Errors. To calculate variance (\\(\\sigma^2\\)), we use the errors for the cookies – how the cookies differ from the mean/model. The first step is to square the errors/differences Those squared numbers are referred to as the “squared differences” or “squared errors.” The calculation of the squared error for each cookie weight is shown below. The squared errors (or squared differences) are 4, 0, and 4. Cookie Weight Model Squared Difference/Error \\(X_1 = 8\\) \\(\\mu = 10\\) \\((X_1 - \\mu)^2 =(8 - 10)^2= 4\\) \\(X_2 = 10\\) \\(\\mu = 10\\) \\((X_2 - \\mu)^2 =(10 - 10)^2= 0\\) \\(X_3 = 12\\) \\(\\mu = 10\\) \\((X_3 - \\mu)^2 =(12 - 10)^2= 4\\) Averaging Squared Errors. To obtain variance we calculate the average of the squared errors. At the population level the variance is represented by the symbol \\(\\sigma^2\\) see Formula (4.2) below. In this formula, \\(N\\) refers to the number of people in the population. At the sample level a different notation is used. \\[\\begin{equation} \\sigma^2 = \\frac{\\sum{(X - \\mu)^2}}{N} \\tag{4.2} \\end{equation}\\] Using that equation with values: \\[ \\begin{aligned} \\sigma^2 &amp;= \\frac{\\sum{(X - \\mu)^2}}{N}\\\\ &amp;= \\frac{(X_1-\\mu)^2 + (X_2-\\mu)^2 + (X_3-\\mu)^2}{N} \\\\ &amp;= \\frac{(8-10)^2 + (10-10)^2 + (12-10)^2}{3}\\\\ &amp;= \\frac{(-2)^2 + (0)^2 + (2)^2}{3} \\\\ &amp;= \\frac{4 + 0 + 4}{3} \\\\ &amp;= \\frac{8}{3} \\\\ &amp;= 2.67 grams^2 \\\\ \\end{aligned} \\] The resulting variance is 2.67 grams\\(^2\\). The cookie weights were measured in grams. The unit for variance, however, is grams\\(^2\\) because we squared the errors as part of the calculation. Recall the formula for calculating an average (shown below) and compare it to the variance calculation (above). Notice that variance is just an average – an average of squared errors. Correspondingly, in some areas of statistics they don’t use the term variance, they use a synonym - mean squared error. \\[ \\begin{aligned} \\bar{X} &amp;= \\frac{\\sum{X}}{N} \\\\ \\end{aligned} \\] It probably strikes you as an odd choice to square the difference between each data point and the model. Why not just use the difference (e.g., \\((8 - 10) = -2\\)) when calculating variance? Why not use the absolute difference (e.g., \\(|8 - 10|= 2\\)) when calculating variance? The answer is somewhat complex, but it relates to the more general situation in statistics of trying to find models that best fit the data (which occurs by minimizing errors). When we use squared errors it is easier to apply calculus, via derivatives, to calculate a model that minimizes the errors (i.e., obtains the best fit). Long story short, for complex mathematical reasons, we use squared errors, (rather than just errors) when calculating the fit (or lack of fit) of a model. Interpretation. A variance of zero indicates that the model fits the data perfectly. In the cookie case, if the variance was zero, that would indicate that all the cookies had the same weight as the model, exactly 10 grams. To the extent that the variance is larger than zero it implies the data points (i.e., cookie weights) differ from the model (i.e., the mean cookie). By implication, a larger variance indicates larger differences among the observations (e.g., cookie weights). That is, when the variance is small, cookie weights tend to be similar to the model – and each other. In contrast, when the variance is large, cookie weights tend to be different from the model – and each other. 4.3.3 Standard Deviation (\\(\\sigma\\)) An alternative index for how data differ from the mean/model is the standard deviation. To understand standard deviation you have to understand variance. Variance is a single number that indexes how data differ from a model. The interpretation of variance is straight forward. It is the average of the squared differences/errors between the data and the model. Standard deviation is represented by the symbol \\(\\sigma\\) and can be calculated as the square root of variance as in Formula (4.3) below. \\[\\begin{equation} \\sigma = \\sqrt{\\frac{\\sum{(X - \\mu)^2}}{N}} \\tag{4.3} \\end{equation}\\] Using that equation with values: \\[ \\begin{aligned} \\sigma &amp;= \\sqrt{\\frac{\\sum{(X - \\mu)^2}}{N}}\\\\ &amp;= \\sqrt{\\sigma^2} \\\\ &amp;= \\sqrt{2.67} \\\\ &amp;= 1.63 grams\\\\ \\end{aligned} \\] One reason that people like standard deviation is that it presents the difference between the data and the model in the original units (e.g., grams). This is in contrast to variance which presents the difference betweeen the data and the model in squared units (e.g., 2.67 grams\\(^2\\)). Interpretation. Unfortunately, although variance has a straight forward interpretation, standard deviation does not. Sometimes standard deviation is, incorrectly, described as how much data points differ on average from the mean. A quick calculation of the average difference reveals a number (1.33) that does not correspond to the standard deviation (1.63): \\[ \\begin{aligned} \\overline{diff} &amp;= \\frac{\\sum{|X - \\mu|}}{N}\\\\ &amp;= \\frac{|8-10| + |10-10| + |12 - 10|}{3}\\\\ &amp;= \\frac{2 + 0 + 2}{3}\\\\ &amp;= \\frac{4}{3}\\\\ &amp;= 1.33\\\\ \\end{aligned} \\] As illustrated above, standard deviation is not equal to the average of the deviations from the mean. Because standard deviation is not an average, it’s much harder to describe how to interpret it. In our view, the best way to think of standard deviation is simply as the square root of variance; because variance has a straight forward interpretation. Therefore, we encourage you to think primarily in terms of variance rather than standard deviation due to the fact the interpretation of variance is more straightforward. Additionally, variance is foundational in the language used to describe regression and analysis of variance. That said, standard deviation is used in the calculation of some standardized effect sizes - so it is important to know and understand both indices. Overall, the rules for interpreting standard deviation are similar to those for variance; but the standard deviation values are smaller than variance values. In the cookie case, if the standard deviation was zero, that would indicate that all the cookies had the same weight as the model, exactly 10 grams. To the extent that the standard deviation is larger than zero it implies the data points (i.e., cookie weights) differ from the model (i.e., the mean cookie). By implication, a larger standard deviation indicates larger differences among the observations (e.g., cookie weights). That is, when the standard deviation is small, cookie weights tend to be similar to the model – and each other. In contrast, when the standard deviation is large, cookie weights tend to be different from the model – and each other. 4.4 Visualizing populations Populations are typically quite large in nature and it’s often imposssible to pratically list all of the members of the population. Consequently, it helps to have ways to visual the entire population. In Figure 4.3 we present three ways of visualizing a population. In all three graphs (A, B, C) in this figure the x-axis represents heights in centimeter and the y-axis is used to indicate which values on the x-axis are more common. In Figure 4.3A we use a large number of X’s to indicate the members of the population. Because X’s are also used in formulas to represent individual participants, a strength of this graph is that it reminds you that it is a graph reflecting a large number of individuals. In Figure 4.3B we present a standard histogram that illustrate the distribution of heights. In Figure 4.3C we present a density curve that illustrate the distribution of heights. All three approaches are useful for illustrating that most people have heights around 170 cm. FIGURE 4.3: Three ways of visualizing a population distribution 4.5 Comparisons: Same \\(\\sigma\\) In this section we review a method of comparing two population means when the populations have the same standard deviation. To facilitate comparing two populations we use the heights of males and females, measured in centimeters, as an example. On average males are taller than females. There is, however, variability in the heights of both males and females. The variability in heights is the same for males and females even though the means differ. We illustrate these differences in a series of figures below. Each figure contains three scenarios (labeled A, B, C) in which we manipulate the mean height and variability of the populations. In each scenario the standard deviation of heights is the same for the male and female populations. 4.5.1 Standardized units 4.5.1.1 Individual scores Often when we compare two means we use the original metric. In the case of the male and female heights that metric is centimeters. The original units are a useful way to convey information about the difference between two populations. In addition to the original unit it is also possible, and sometimes desirable, to use the standardized mean difference. The word standardized is used to indicate that the comparison is relative to the standard deviation. Imagine a population of male heights (\\(\\mu = 170\\), \\(\\sigma = 10\\)) from which we have obtained a single individual, Ian, whose height is 185 cm. \\[ X_{Ian} = 185cm \\] The original units are useful for describing Ian’s height but it doesn’t tell us about his height relative to the other people in the population. We have to know the mean and standard deviation of the population to know if Ian is shorter or taller than the average height - and by how much. We use a \\(z\\)-score calculation for this purpose: \\[ \\begin{aligned} z_{Ian} &amp;= \\frac{X_{Ian} - \\mu_{males}}{\\sigma_{males}}\\\\ &amp;= \\frac{185 - 170}{10}\\\\ &amp;= \\frac{15}{10}\\\\ &amp;= 1.50 \\end{aligned} \\] The above calculation is a ratio. Ratios are used to compare two numbers. The numerator (number on the top) is compared to the denominator (number on bottom) through division. The resulting number tells you how much larger the numerator is than the denominator. In this case, the numerator is the extent to which Ian is taller than the mean height for males (\\(X_{Ian} - \\mu_{males}\\)). This numerator is compared to the denominator – which is the standard deviation for males (\\(\\sigma_{males}\\)). The resulting number is 1.50 which indicates the numerator is 1.50 times larger than the denominator. In other words, Ian is 1.50 standard deviations taller than the average male. This is a standardized score for Ian’s height - it expresses the difference between his height and the mean height in standard deviation units. 4.5.1.2 Independent Group: Population Means The same approach to generating standardized scores can be applied to population means. Consider a situation where we have population of male heights (\\(\\mu = 170\\), \\(\\sigma = 10\\)) and a population of female heights (\\(\\mu = 165\\), \\(\\sigma = 10\\)). Notice that both populations have the same standard deviation. We can calculate a standardized value to compare these heights. This standardized value is called the standardized mean difference (SMD). Alternatively, it is also known as Cohen’s \\(d\\) which is represented at the population level with the symbol \\(\\delta\\). Calculation of the standardized mean difference is based on the premise that both populations have the same standard deviation. In this calculation the numerator represents the difference between the two population means. The denominator represents the population standard deviation - which is the same for both populations see Formula (4.4) below. \\[\\begin{equation} \\delta = \\frac{\\mu_{1} - \\mu_{2}}{\\sigma} \\tag{4.4} \\end{equation}\\] Using that equation with values: \\[ \\begin{aligned} \\delta &amp;= \\frac{\\mu_{males} - \\mu_{females}}{\\sigma}\\\\ &amp;= \\frac{170 - 165}{10}\\\\ &amp;= \\frac{5}{10}\\\\ &amp;= 0.50 \\end{aligned} \\] The resulting division of this ratio reveals that the numerator is 0.50 times as large (i.e., half as large) as the denominator. That is, the difference between the populations is half as large as the standard deviation. Therefore, the population mean for males is 0.50 standard deviations larger than the population mean for female; \\(\\delta = 0.50\\): 4.5.2 Cohen’s \\(d\\) units Because the unit for the standardized mean difference is the standard deviation it can be easy to interpret if you are unfamiliar with the original units. It is usually a good idea to report the difference between populations in both the original units (cm) and standardized units (\\(\\delta\\)). Figure 4.4 illustrates three different population difference scenarios (A through C). The population standard deviation is held constant across the three scenarios. You can see that as the difference between the population means increases in raw units - it does the same in \\(\\delta\\) (i.e., Cohen’s \\(d\\)) units. In raw units (i.e., cm), the difference between the population means for scenarios A through C are 5 cm, 10 cm, and 20 cm, respectively. In standardized units (i.e., standard deviations), the difference between the population means for scenarios A through C are 0.50 standard deviations, 1.0 standard deviations, and 2.0 standard deviations, respectively. In other words, the population-level Cohen’s \\(d\\)-values are 0.50, 1.0, and 2.0 for scenarios A through C. FIGURE 4.4: The difference between two population means can be expressed in the original units as indicated by \\(\\Delta M\\). Alternatively, the difference can be expressed using a Standardized Mean Difference (SMD). The SMD index is also known as the population-level \\(d\\)-value and is represented by the symbol \\(\\delta\\). The SMD is a way of expressing the difference between population means without using the original units. 4.5.3 Cohen’s \\(d\\) advantages The standardized mean difference takes into account the variability of heights around each population mean. This means that the same difference between two population means can produce different standardized mean difference values if the population standard deviation varies. In the scenarios depicted in Figure 4.5 the population standard deviation becomes increasing small - resulting in larger standardized mean difference values (i.e., \\(\\delta\\)). This larger \\(\\delta\\) value corresponds to progressively less overlap between the two populations. Thus, taking into account the standard deviation of the populations can be viewed as a strength of using the standardized mean difference. FIGURE 4.5: An advantage of using the Standardized Mean Difference (SMD) to index the difference between two population means (i.e., \\(\\delta\\)) is that it takes the population standard deviation into account. In these three examples, the difference between the populations means is the same using the original/raw units of centimeters. However, the standard deviation of the populations varies across scenarios A, B, and C. The SMD illustrates that these three scenarios are different. If you only examined the difference in the original units (i.e., \\(\\Delta M\\)) you would conclude the effect is the same across the three scenarios. However, by using SMD, indexed by \\(\\delta\\) - the population \\(d\\)-value, you see that the effect is progressively stronger from scenario A, to B, to C. This is illustrated by the fact that there is progressively less overlap between the distributions as you move from scenario A to C. 4.5.4 Cohen’s \\(d\\) caveats It is important to also look at the original units when interpreting results - not just the standardized mean difference. Examine the scenarios in Figure 4.6. Notice how the \\(\\delta\\) value stays constant across scenarios - as does the overlap of the two distributions. However, inspect the shape of the curves and the original units to see how the scenarios vary. Both the original units and the standardized mean difference (i.e., Cohen’s \\(d\\)) provide important interpretational information - don’t rely on just one of them. FIGURE 4.6: The three scenarios in this figure illustrate that a Standardized Mean Difference (i.e., population \\(d\\)-value or \\(\\delta\\)) can remain constant across scenarios when there is a change in the raw difference (i.e., \\(\\Delta M\\)) between the population means. This SMD is consistent across the three scenario despite a change in the mean difference using original units; this occurs because the standard deviations also changes across the three scenarios. 4.6 Comparisons: Different \\(\\sigma\\) The calculation of the standardized mean difference values (\\(\\delta\\)-values) above assumed that the two populations had identical standard deviations. In some scenarios, you might reasonably expect the standard deviations to be different for two populations. When the populations being compared have different standard deviations, we can still calculate a standardized mean difference (i.e, \\(\\delta\\)-value) but we need to pick one of the standard deviations to use in the formula. In many cases, it makes sense to think of one population as the frame of reference for the comparison; a “Control” population of sorts. In this case, you use the standard deviation of the control population as the reference/denominator when calculating the \\(\\delta\\)-value as illustrated in Formula (4.5) below. Make sure you recognize we are talking about a scenario with different population standard deviations (not sample standard deviations) as the appropriate situation for this type of calculation. \\[\\begin{equation} \\delta = \\frac{\\mu_{1} - \\mu_{2}}{\\sigma_{control}} \\tag{4.5} \\end{equation}\\] 4.7 Comparisons: Repeated Measures Sometimes we measures the members of a single population twice and are interested in the change across occasions. Consider a scenario where everyone in a large population (N = 1000000) attempts to loose weight over a given period of time. We weigh everyone in the population at time 1 before the weight loss attempt. Then we weigh everyone in the population at time 2 after the weight loss attempt. Think of this scenario concretely with respect to how we would record this information. Imagine a large spreadsheet with 1000000 rows - each representing a person. There are two columns. The first column contains time 1 weights. The second column contains time 2 weights. We are interested in how weights changed across the times. So we create a third column, called diff, by subtracting time 1 weight from time 2 weights. That is, diff = time 2 weight - time 1 weight. The new diff column indicates how the weights for each person have changed over the diet. We can think of this single column of differences as being a population. This column is used to calculate the repeated-measures \\(\\delta\\)-value. Specifically, the mean of the diff column (\\(bar{x}_{diff}\\)) and the standard deviation of the diff column (\\(s_{diff}\\)) are used in Formula (4.6) below: \\[\\begin{equation} \\delta = \\frac{\\mu_{diff}}{\\sigma_{diff}} \\tag{4.6} \\end{equation}\\] 4.8 Comparison Benchmarks Regardless of how the standardized mean difference (i.e., \\(\\delta\\)-value) is calculated, Cohen suggested that the values of 0.20, 0.50, and 0.80 correspond to the effect size labels of small, medium, and large, respectively (Cohen 1988). These effect sizes are illustrated in Figure 4.7. As described in an interesting blog post, these benchmark values came from reviewing a single issue of the Journal of Abnormal and Social Psychology. Basing benchmarks on such a small number of studies is potentially problematic - as is the fact that at that time all the studies were prone to publication bias. A recent investigation (see Schäfer and Schwarz 2019) of effect sizes in pre-registered studies, with no publication bias, suggests substantially lower benchmark values. FIGURE 4.7: Cohen’s (1988) effect size benchmarks You can visualize any \\(\\delta\\) value (i.e., population \\(d\\)-value) using the rpsychologist website. This website also provides a number of interesting statistics such as the percentage of overlapping values in two populations for a given \\(\\delta\\)/d value. Take a minute to use this website now. Cohen’s benchmarks for standardized mean differences are displayed in the table below. These effect size labels should be interpreted with caution. The magnitude of an effect is best considered in the context of the field of research and the consequences of an effect on individuals in both the short and long run. Cohen (1988) Label Value Small \\(\\delta\\) = .20 Medium \\(\\delta\\) = .50 Large \\(\\delta\\) = .80 4.9 Population relations Often researchers are interested in the extent to which one variable is related to another variable. For example, to what extent does variability in weight relate to variability in height? In other words, is there a relation between weight and height? One approach to this question is to calculate a regression equation relating weight to height - this provides an index of the relation in the original units of the variables. Here we focus on a second approach to describing the relation between variables, namely, the correlation. The correlation is standardized effect size for the linear relation between two variables. A population correlation is represented by the symbol \\(\\rho\\) (pronounced rho) and calculated using Formula (4.7) below. The correlation may range from -1.00 to 1.00. A strong negative correlation indicates that as one variable increases the other decreases. A positive correlation indicates that as one variable increases the other increases. There are at least thirteen ways to conceptualize a correlations (see Lee Rodgers and Nicewander 1988) but it’s easiest to think of it as an index of the extent to which the variables covary in a linear way. \\[\\begin{equation} \\rho = \\frac{\\Sigma (X - \\mu_X)(Y - \\mu_Y)}{\\sqrt{\\Sigma (X - \\mu_X)^2\\Sigma (Y - \\mu_Y)^2}} \\tag{4.7} \\end{equation}\\] Because a correlation only provides an index of a linear relation - it is important to plot the data. Weak correlations (close to zero) may indicate there is not a linear relation. But there may still be a relation between the variables - just not one that follows a straight line. Indeed, the same correlation may take many different forms. Consider the data sets from the datasauRus package presented in Figure 4.8. The graphs for each data set appear quite different. Yet, the following is true for all 12 data sets: The mean of X is 54.3 and the standard deviation is 16.8 The mean of Y is 47.8 and the standard deviation is 26.9 The correlation between X and Y is \\(\\rho\\) = -.06 Therefore, make sure you ALWAYS graph your data. The numbers only tell part of the story. FIGURE 4.8: Various data sets with the same correlation, same means, and same standard deviations 4.10 Relation benchmarks Plots of linear relations are presented in Figure 4.9. The three graphs in this figure corresponds to Cohen’s benchmarks for correlations (i.e., \\(\\rho\\)), displayed in the table below. Cohen (1988) Label Value Small \\(\\rho\\) = .10 Medium \\(\\rho\\) = .30 Large \\(\\rho\\) = .50 These effect size labels should be interpreted with caution. The magnitude of an effect is best considered in the context of the field of research and the consequences of an effect on individuals in both the short and long run. FIGURE 4.9: Populations of various strengths. 4.11 Key points Populations are described using numbers called parameters. Population-level parameters are often represented using Greek letter. Commonly used parameters include mean (\\(\\mu\\) or \\(\\bar{X}\\)), variance (\\(\\sigma^2\\)), or standard deviation (\\(\\sigma\\)). Individual scores can be expressed in standardized units. Population differences can be described in original raw units or standardized units called the standardized mean difference (SMD). SMD is based on the premise that the two populations being compared have the same standard deviation. SMD is a ratio that compares two numbers (the numerator and the denominator). Make sure you understand what is represented by both the numerator and denominator in the SMD ratio. SMD (i.e., Cohen’s d) represents the number of standard deviations between two population means. Recall both populations have the same standard deviation. SMD is indicated at the population level using the Greek letter delta (\\(\\delta\\)). At the sample level we tend to use the term “\\(d\\)-value” or “Cohen’s \\(d\\).” 4.12 Minor Points Standardized mean differences are reported with a leading zero: \\(\\delta\\) = 0.50. Correlations are reported without a leading zero: \\(\\rho\\) = .30. The difference in reporting is an APA-style issue. Values that are bounded between 0 and 1 (or between -1 and +1) are reported without a leading zero (e.g., \\(\\rho\\) and \\(r\\)). Values that are not bounded are reported with the leading zero (e.g., \\(\\delta\\) and \\(d\\)). 4.13 Self Assessment What is the difference between parameters and statistics? Are the formulas (excluding notation differences) always the same for parameters and statistics? If not, explain why not? Grade 4 students in Ontario are taller than the Grade 3 students. Specifically, \\(\\delta\\) = 0.30. How would you describe what this value means to an audience of experts at a conference? How would you describe what this values means to community members during a talk at the local public library? We reviewed three different ways of calculating a standardized mean different (\\(\\delta\\)). What is the appropriate circumstance to use each formula? Describe a concrete scenario for each one. There is a strong relation between two variables that follows an upside-down U-shape. Would you expect there to be a strong correlation between these two variables? Why or why not? References "],["sampling-accuracy.html", "Chapter 5 Sampling Accuracy 5.1 Overview 5.2 Data for the chapter 5.3 Notation 5.4 Estimating \\(\\mu\\) 5.5 Estimating \\(\\sigma^2\\) 5.6 Estimating \\(\\sigma\\) 5.7 Estimating \\(\\delta\\) 5.8 Estimating \\(\\rho\\) 5.9 Overview 5.10 Meta-analysis 5.11 A joke 5.12 Key Points", " Chapter 5 Sampling Accuracy The following CRAN packages must be installed: Required CRAN Packages tidyverse remotes The following GitHub packages must be installed: Required GitHub Packages dstanley4/learnSampling A GitHub package can be installed using the code below: remotes::install_github(&quot;dstanley4/learnsampling&quot;) Required Data data_cor_pop.csv 5.1 Overview Researchers are usually interested in describing the attributes of a population; numbers that describe the population are called parameters. Two parameters that are frequently of interest are the mean and variance of the population. Unfortunately, it’s rarely possible to obtain information from every member of a population to calculate a parameter. Consequently, researchers use subsets of the population called samples to estimate parameters. Numbers calculated from sample data are called statistics. Typically, sample statistics are used to estimate population parameters. Sample statistics, however, often differ from population parameters. The difference between a sample statistic and the population parameter occurs because the sample data is random subset of the population data — with correspondingly fewer observations. This difference is typically refered to as sampling error. Sometimes a sample statistic will be higher than the population parameter; other times the sample statistic will be lower than the population parameter. Because random sampling is used to select the sample data the direction and magnitude of the difference between the sample statistic and the population parameter will vary randomly. Sample accuracy refers to the extent to which sample statistics correctly estimate the population parameter. We typically used the terms biased and unbiased to describe the accuracy of sample statistics. Consider a scenario where we take many thousands of samples from the same population. For each sample, we calculate a statistic (e.g., the mean). If the average of the sample statistics (e.g., sample means) equals the population parameter (e.g., population mean) then we refer to the statistic as being unbiased. In contrast, if the average of the sample statistics (e.g., sample means) does not equal the population parameter (e.g., population mean) then we refer to the statistic as being biased. Further complicating matters is the fact that the formula used for a sample statistic may, or may not, be the same as the formula used for the corresponding population parameter. This occurs because the purpose of the sample statistic is typically not to describe the sample. Rather the purpose of the sample statistic is to estimate the population parameter. Depending on the parameter, you may or may not be able to use the same formula with sample data as you would with population data. Also keep in mind that, even if you conduct experiments, the distinction between samples and populations is relevant to you. Consider a scenario where you run an experiment to test the effectiveness of a particular drug. Half the rats are assigned to a placebo condition (e.g., saline injection) whereas the other half of the rats are assigned to the drug condition (e.g., drug injection). Recognize that the placebo-condition rats are considered a sample from a much larger population of all rats who could have received the placebo. Likewise, the drug-condition rats are considered a sample of a much large population of all rats who could have received the drug. Indeed, when you conduct your analyses on this experiment the results do not tell you about the rats in your study - rather they tell you about rats in general (i.e., the larger populations of rats). Therefore, when we discuss the importance of estimating a population parameter from a sample realize that it applies to both experimental and survey research. 5.2 Data for the chapter In this chapter we will use a population of heights to learn about random sampling. To engage in the learning activities you need to activate the required packages: library(tidyverse) library(learnSampling) Next, we create a large population with 100,000 people using the get_height_population() command: pop_data &lt;- get_height_population() The print() command can be used to confirm that the population contains 100,000 people. We see that each row in pop_data represents a single person. There is a column called height that contains the heights for everyone in the population. print(pop_data) ## # A tibble: 100,000 × 3 ## id sex height ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 male 177 ## 2 2 female 151 ## 3 3 female 171 ## 4 4 male 157 ## 5 5 male 169 ## 6 6 male 187 ## 7 7 female 163 ## 8 8 male 173 ## 9 9 female 172 ## 10 10 male 193 ## # … with 99,990 more rows 5.3 Notation In the formulas below, when we refer to the population, we use uppercase letters to indicate members (\\(X\\)) or the size (\\(N\\)). The population mean is indicated by the symbol \\(\\mu\\). In contrast, when we refer to the sample, we use lowercase letters to indicate members (\\(x\\)) or the size (\\(n\\)). The sample mean is indicated by the symbol \\(\\bar{x}\\). A single bar above a letter indicates a mean. If we calculate the average of several sample means we indicate this with the symbol \\(\\bar{\\bar{x}}\\). A double bar above a letter indicates a mean of means. Make sure you notice the similarities between subsequent population and sample formulas even though the notation often differs. 5.4 Estimating \\(\\mu\\) We are interested in the sample mean (\\(\\bar{x}\\)) to the extent that it provides an accurate estimate of the population mean (\\(\\mu\\)). The population mean is calculated using Formula (5.1). In this formula, the letter \\(N\\) corresponds to the number of people in the population. \\[\\begin{equation} \\mu = \\frac{\\sum{X}}{N} \\tag{5.1} \\end{equation}\\] We can calculate the population mean for the height column of pop_data using the summarise() and mean() commands. The mean() command uses Formula (5.1). We see in the output that the population mean is 172.50 (\\(\\mu = 172.50\\)). pop_data %&gt;% summarise(pop_mean = mean(height)) %&gt;% as.data.frame() ## pop_mean ## 1 172.5 As noted previously, we rarely have access to data from an entire population. Consequently, we use the sample mean as an estimate of the population mean. The sample mean, \\(\\bar{x}\\), is a statistic calculated using the using Formula (5.2) below. The bar above the \\(x\\), indicates that it is a mean. Notice that Formula (5.1) and Formula (5.2) are the same - even though they use different notation. In this formula, the letter \\(n\\) corresponds to the number of people in the sample. \\[\\begin{equation} \\bar{x} = \\frac{\\sum{x}}{n} \\tag{5.2} \\end{equation}\\] Because a sample mean (a statistic) is calculated using a random subset of the population it is likely to differ from the population mean (a parameter). If you, inaccurately, believe that you can learn something meaningful from a single study, this fact may be disconcerting. Statisticians know, however, that rarely can you learn anything from a single study, or even a small set of studies. Consequently, they are more interested in the extent to which sample means are right, on average. That is, they are interested in the extent to which the mean of many sample means (\\(\\bar{\\bar{x}}\\)) corresponds to the population mean (\\(\\mu\\)). The mean of many sample means can be calculated using Formula (5.3) below. In this formula, the letter \\(k\\) corresponds to the number of sample means. \\[\\begin{equation} \\bar{\\bar{x}} = \\frac{\\sum{\\bar{x}}}{k} \\tag{5.3} \\end{equation}\\] If the mean of the sample means, \\(\\bar{\\bar{x}}\\), equals the population mean, \\(\\mu\\), then the sample mean is an unbiased (or accurate) estimate of the population mean. Figure 5.1 illustrates the concept of accuracy/bias with a distribution of sample means (i.e., \\(\\bar{x}\\)). Accuracy/bias is an index of the extent to which the mean of many sample means, \\(\\bar{\\bar{x}}\\), deviates from the population mean, \\(\\mu\\). FIGURE 5.1: Sampling accuracy and precision We can assess bias, as illustrated in the above figure by drawing a large number of samples from a population with the code below. Our goal is calculate a mean for each sample so that we have a sampling distribution of means. In theory, we should take an infinite number of samples, however, to be practical we will take 50000 samples to create an approximate sampling distribution of means. We use the code below to do so: many_samples &lt;- get_M_samples(pop.data = pop_data, pop.column.name = height, n = 10, number.of.samples = 50000) many_samples &lt;- readRDS(&quot;ch_samples/many_samples_n10.RDS&quot;) We use the print() command to see the first few rows of the 50000 samples: print(many_samples) ## # A tibble: 50,000 × 5 ## study n sample_mean sample_var_n sample_var_n_1 ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 10 174. 27.8 30.9 ## 2 2 10 162. 83.4 92.6 ## 3 3 10 173. 139. 155. ## 4 4 10 180 322. 358. ## 5 5 10 173. 161. 179. ## 6 6 10 172 160. 177. ## 7 7 10 166. 86.5 96.1 ## 8 8 10 174. 139. 155. ## 9 9 10 178. 167. 186. ## 10 10 10 168. 263. 292. ## # … with 49,990 more rows Each row of many_samples represents a sample of 10 people. Each column of many_samples indicates a sample statistic. You can see that for each sample/row we indicate “n” (the sample size) and “sample_mean” (the mean of the population), and a few other statistics. Even though all the samples came from the same population you can see how the values in the sample_mean column vary across samples/rows. FIGURE 5.2: Sampling distribution of the mean. The population of individuals is presented at the top and filled with X’s to remind you they are individuals. There are more individuals than X’s. The sampling distribution of means is presented in the bottom part of the graph. The sampling distribution of means is filled with \\(\\bar{x}\\)’s to remind you that it is sample means being graphed. There are more means than \\(\\bar{x}\\)’s. The population mean (green line) and the mean of sample means (blue line) are in the same spot, indicating high accuracy (i.e., no bias). Above, in Figure 5.2, we present a graph comparing the distribution of peoples heights (i.e., the population) to the distribution of sample means based on those heights (i.e., the sampling distribution). The sample means plotted are the 50000 sample means, from the sample_mean column. Recall the population mean for heights is \\(\\mu = 172.48\\) cm. Notice that most of the sample means cluster around this value. Also notice that there is considerable variability about this value. Any given sample mean (\\(\\bar{x}\\)) may differ substantially from the population mean (\\(\\mu = 172.48\\)). This variability illustrates the challenges with learning something from a single study - particularly a study with a small sample size. Many of the sample means fall quite far from the population mean. 5.4.1 Assessing bias Statisticians, recognizing the limitations of a single study, are not particularly concerned if a single sample mean deviates from the population mean. That said, statisticians are very concerned as to whether or not the results of a large number of studies are correct – on average. That is, does the average of many sample means correspond to the population mean? If, on average, the sample mean does corresponds to the population mean, it is accurate and we refer to it as an unbiased estimator. Visually, this appears to be the case. But in the code below we confirm it numerically. many_samples %&gt;% summarise(mean_of_sample_mean = mean(sample_mean)) %&gt;% as.data.frame() ## mean_of_sample_mean ## 1 172.5 We find that the average of the 50000 sample means is 172.47 which is very close to the population mean of 172.48. Note that when we did this, we used the same formula to calculate the sample mean (Formula (5.2)) as we did the population mean (Formula (5.1)), although the notations differed. The average of the sample means was not identical to the population mean but it was very close - it would have been exactly the same with many more samples (i.e., an infinite number of samples). Therefore, we conclude the sample mean provides an unbiased estimate of the population mean. In other words, it makes sense to use the sample mean as an estimate of the population mean. If we try to estimate the population mean with a sample mean we will, on average, be correct; although any given sample/study mean might be “wrong.” 5.5 Estimating \\(\\sigma^2\\) We are interested in the sample variance (\\(s^2\\)) to the extent that it provides an estimate of the population variance (\\(\\sigma^2\\)). We begin by reviewing population variance. The population variance is calculated using Formula (5.4): \\[\\begin{equation} \\sigma^2 = \\frac{\\sum{(X - \\mu)^2}}{N} \\tag{5.4} \\end{equation}\\] We can calculate the population variance for the height column of pop_data using the summarise() and var.pop() commands. The var.pop() command uses Formula (5.4). We see in the output that the population variance is 157.5 (\\(\\sigma^2 = 157.5\\)). pop_data %&gt;% summarise(pop_var = var.pop(height)) %&gt;% as.data.frame() ## pop_var ## 1 156.3 5.5.1 Assessing bias The formula for sample variance with an \\(n\\) in the denominator is, unfortunately, a biased estimator of population variance (formula below). \\[ \\begin{aligned} s^2 = \\frac{\\sum{(x - \\bar{x})^2}}{n} \\end{aligned} \\] Estimates of the population variance are systematically too low when you use a sample variance formula with an \\(n\\) in the denominator. We can see that this is true by examining the many_samples data. In these data, the column sample_var_n contains the variance for the sample calculated with the above formula. Below we use code to obtain the average of the sample_var_n column over the 50000 samples. If this average equals the population variance of 157.5 then variance, using \\(n\\) in the denominator, is an unbiased estimator of the population variance. many_samples %&gt;% summarise(mean_of_var_n = mean(sample_var_n)) %&gt;% as.data.frame() ## mean_of_var_n ## 1 141.5 You can see the average of sample_var_n column (141.54) is much smaller than the population variance (157.5). That is, the average of the sample variances, using \\(n\\) in the denominator, was smaller than the population variance. Consequently, sample variance (using \\(n\\) in the denominator) provides a biased estimate of the population variance. If we try to estimate the population variance with sample variance (using \\(n\\) in the denominator) we will, on average, be wrong. Fortunately, there is a sample-level formula that estimates the population variance without bias (see Hayes). An unbiased estimate of the population variance can be obtained if we calculate the sample variance but divide by \\(n - 1\\) instead of \\(n\\). The unbiased estimate is calculated using Formula (5.5). The denominator of the formula below indicates the degrees of freedom associated with the variance estimate. More specifically, in this formula there are \\(n-1\\) degrees of freedom associated with the variance estimate. \\[\\begin{equation} s^2 = \\frac{\\sum{(x - \\bar{x})^2}}{n-1} \\tag{5.5} \\end{equation}\\] In the many_samples data, the column sample_var_n_1 was generated using Formula (5.5). We can evaluate the quality of Formula (5.5), using \\(n-1\\), by averaging the values in the sample_var_n_1 column. many_samples %&gt;% summarise(mean_of_var_n_1 = mean(sample_var_n_1)) %&gt;% as.data.frame() ## mean_of_var_n_1 ## 1 157.3 We see that the average of the 50000 values using \\(n-1\\) in the denominator is 157.27 which is very close to the population variance of 157.46. These numbers would have been identical with an infinite number of samples. Consequently, when we use \\(n-1\\) in the denominator we have an unbiased estimate of the population variance. If we try to estimate the population variance with a sample variance, using \\(n-1\\) in the denominator, we will, on average, be right. You may wonder at this point, when we use \\(n-1\\) in the denominator of the sample variance, can we still think of it as the average of the squared differences from the mean? The short answer is yes. When you use \\(n-1\\) in the denominator of the sample variance you are not calculating the variance for the group people in the sample. Rather, you are estimating the variance for the much larger group of people in the population. Consequently, it makes sense to think of sample variance, using \\(n-1\\), as an estimate of the average of the squared differences/errors in the population. That is, it makes sense to think of sample variance, using \\(n-1\\), as an estimate of the average of the squared differences between each person in the population and the population mean. 5.6 Estimating \\(\\sigma\\) The population standard deviation is calculated using Formula (5.6) below. \\[\\begin{equation} \\sigma = \\sqrt{\\frac{\\sum{(X- \\mu)^2}}{N}} \\tag{5.6} \\end{equation}\\] Due to the above findings for variance, we estimate the population standard deviation using Formula (5.7) below. \\[\\begin{equation} s = \\sqrt{\\frac{\\sum{(x - \\bar{x})^2}}{n-1}} \\tag{5.7} \\end{equation}\\] 5.7 Estimating \\(\\delta\\) We are interested in the sample standardized mean difference (\\(d\\)) to the extent that it provides an estimate of the population standardized mean difference (\\(\\delta\\)). The population standardized mean difference is calculated using Formula (5.8) when we work for the assumption that the two population have the same variance / standard deviation: \\[\\begin{equation} \\delta = \\frac{\\mu_{1} - \\mu_{2}}{\\sigma} \\tag{5.8} \\end{equation}\\] We can calculate the population standardized mean difference for men and women once we have the respective population means and standard deviations. Recall the initial data mixed males and females. We begin by creating separate data sets for males and females: male_population_heights &lt;- pop_data %&gt;% filter(sex == &quot;male&quot;) female_population_heights &lt;- pop_data %&gt;% filter(sex == &quot;female&quot;) Next, we calculate the mean and standard deviation of each population: male_population_heights %&gt;% summarise(mean = mean(height), sd = sd.pop(height)) ## # A tibble: 1 × 2 ## mean sd ## &lt;dbl&gt; &lt;dbl&gt; ## 1 180. 10.0 female_population_heights %&gt;% summarise(mean = mean(height), sd = sd.pop(height)) ## # A tibble: 1 × 2 ## mean sd ## &lt;dbl&gt; &lt;dbl&gt; ## 1 165. 10.0 This reveals the population parameters are: \\[ \\begin{aligned} \\mu_{female} &amp;= 165 \\\\ \\mu_{male} &amp;= 180 \\\\ \\sigma = \\sigma_{female} = \\sigma_{male} &amp;= 10.1\\\\ \\end{aligned} \\] Likewise, as calculated below, the population-level standardized mean difference (\\(\\delta\\)) is 1.49. We can see this population-level difference illustrated in Figure 5.3. \\[ \\begin{aligned} \\delta &amp;= \\frac{\\mu_{male} - \\mu_{female}}{\\sigma} \\\\ &amp;= \\frac{180 - 165}{10.1} \\\\ &amp;= \\frac{15}{10.1} \\\\ &amp;= 1.49 \\\\ \\end{aligned} \\] FIGURE 5.3: Illustration of the standardized mean difference of 1.49 for male and female heights. The solid black vertical line indicates the mean for males; whereas the dotted vertical line indicates the mean for females. We typically need to estimate the population-level standardized mean difference from sample data because we rarely have access to data for an entire population. Many researchers estimate the population standardized mean difference from sample data using the Formula (5.9) below – when we assume the populations have equal variances. This value is known by many other names: \\(d\\), Cohen’s \\(d\\), and Hedges’ \\(g\\). Notice that the sample-level formula, Formula (5.9), below, is the same as the population-level formula, Formula (5.8), above, only the notation differs. \\[\\begin{equation} d = \\frac{\\bar{x}_{1} - \\bar{x}_{2}}{s_{pooled}} \\tag{5.9} \\end{equation}\\] Unfortunately, Formula (5.9) provides a biased estimate of the population standardized mean difference for small sample sizes. That is, on average, Formula (5.9), provides \\(d\\)-values that overestimate the size of the population standardize mean difference (\\(\\delta\\)). Fortunately, we can obtain an unbiased estimate of the population-level standardized mean difference from sample data using Formula (5.10). This is one approach to calculating \\(d_{unbiased}\\) – there are others. \\[\\begin{equation} d_{unbiased} = \\frac{\\bar{x}_{1} - \\bar{x}_{2}}{s_{pooled}} \\times [1 - \\frac{3}{4(n_1 + n_2)-9}] \\tag{5.10} \\end{equation}\\] If we try to apply either \\(d\\)-value formula ((5.9) or (5.10)) to real data we quickly encounter a problem. We don’t have the pooled standard deviation, \\(s_{pooled}\\) 5.7.1 Pooled standard deviation When we calculated the population-level standardized mean difference we knew the population variances where the same. Consequently, there was only one standard deviation (i.e., only one variance). More specifically, the male and female populations both had a standard deviation but it was the same for both populations. The population-level formula for the standardized mean difference, Formula (5.8), has only one standard deviation in it. This is because calculation of the standardized mean difference explicitly depends on the fact that both populations have the same standard deviation. Let’s consider hypothetical sample data to make the situation clear. More specifically, we will examine the sample-level statistics below for males and females. Notice that we have two standard deviations – one for males and one for females. Moreover, these two sample-level standard deviations (using \\(n\\)-1) are not the same - they are different from each other. This initially seems problematic - calculation of standardized mean difference requires that population standard deviations are identical. \\[ \\begin{aligned} \\bar{x}_{males} &amp;= 187.2 \\\\ s_{males}^2 &amp;= 92.2 \\\\ s_{males} &amp;= 9.6 \\\\ \\end{aligned} \\] And females: \\[ \\begin{aligned} \\bar{x}_{females} &amp;= 160.1 \\\\ s_{females}^2 &amp;= 66.8 \\\\ s_{females} &amp;= 8.2 \\\\ \\end{aligned} \\] Fortunately, this is sample-level data and not population-level data. Sample-level standard deviations may differ even when the population-level standard deviations are the same. In fact, sample-level standard deviations are likely to differ from the population-level standard deviation due to sampling error. Consequently, we are likely to get two different sample-level standard deviations even if the population-level standard deviations are identical for males and females. How do we resolve this situation of having two sample-level standard deviations? The first step is to switch to thinking in terms of variance rather than standard deviation. Due to the way the math works, life becomes very complicated, very quickly, if we continue to think in terms of standard deviations. Therefore, we reframe the problem into a variance problem. Variances are preferable to standard deviations because we can add and subtract variances - but not standard deviations. We have a sample variance for males (92.2) and a sample variance for females (66.8). We view each of these sample variances as an estimate of the respective population variances (see Figure 5.4). That is, the male sample variance is an estimate of the male population variance. Likewise, the female sample variance is an estimate of the female population variance. However, we also assume that the population variances for males and females are the same. Consequently, the male sample variance and the female sample variance are both estimates of the same value (see Figure 5.5). Because the two sample variances are estimates of the same population variance, we can (when the sample sizes are equal) calculate a new variance by averaging them together. This new variance, the average of the sample variances, provides us with a better estimate of the single population variance. The logic behind this approach is similar to averaging two measurements of the same distance to reduce error. We call this new variance pooled variance; and represent it with the symbol \\(s_{pooled}^2\\). FIGURE 5.4: Estimating population variances with sample variances. The male sample variance (n-1) is an estimate of male population variance. Likewise, the female sample variance (n-1) is an estimate of the female population variance. FIGURE 5.5: Two estimates of a single population variance. We assume the population variances are the same. Therefore, the male and female sample variances are both estimates of the same population variance. FIGURE 5.6: Pooled variance from the samples estimates population variance. The population variance is estimated by averaging two sample variances into a single estimate called pooled variance (\\(s_{pooled}^2\\)). When sample sizes are equal, the pooled variance is just the regular/simple average of the two sample variances (both using n-1 in the denominator). When the sample sizes are unequal (i.e., different numbers of males and females), however, we need to use a more sophisticated averaging formula to obtain the pooled variance. When the sample sizes for males and females are the same (i.e., \\(n_{males} =n_{females}\\)) we can use the Formula (5.11) below to calculate the pooled variance. \\[\\begin{equation} s_{pooled}^2 = \\frac{s_{1}^2 + s_{2}^2}{2} \\tag{5.11} \\end{equation}\\] When the sample sizes for males and females are different (i.e., \\(n_{males} \\ne n_{females}\\)) we can use the Formula (5.12) below to calculate the pooled variance. This formula can be used all of the time. We only show Formula (5.11), above, to make it clear that Formula (5.12) below is basically just averaging the variances in a way that takes sample size into account. \\[\\begin{equation} s_{pooled}^2 = \\frac{(n_1 -1)s_1^2 + (n_2 -1)s_2^2}{n_1 + n_2-2} \\tag{5.12} \\end{equation}\\] We get the single standard deviation, \\(s_{pooled}\\), by taking the square root of the variance, \\(s_{pooled}^2\\). \\[ \\begin{aligned} s_{pooled} &amp;= \\sqrt{s_{pooled}^2} \\\\ \\end{aligned} \\] We apply the pooled standard variance, Formula (5.12), to the sample data: \\[ \\begin{aligned} s_{pooled}^2 &amp;= \\frac{(n_{male} -1)s_{male}^2 + (n_{female} -1)s_{female}^2}{n_{male} + n_{female}-2} \\\\ &amp;= \\frac{(10 -1)92.2 + (10 -1)66.8}{10 + 10 -2} \\\\ &amp;= 79.5 \\end{aligned} \\] Then we obtain the pooled standard deviation, below, for the standardized mean difference formula. \\[ \\begin{aligned} s_{pooled} &amp;= \\sqrt{79.5} \\\\ &amp;= 8.9\\\\ \\end{aligned} \\] AN ASIDE ON POOLING. Variance pooling is an extraordinarily important part of statistics - we see it used in many topics. To prepare you for that future learning, examine the more general version of the variance pooling equation below. Go through each line of the math below to see how the pooling formula used above is only a specific case of the more general formula below. No really do it - don’t skip this task! Actually take a minute to understand the general version of the pooling formula below. You’ll thank me in future weeks. This is foundational knowledge. In the math below we use a = 2 to indicate there are two sample variances being pooled. The denominator of the formula below indicates the degrees of freedom associated with the variance estimate. More specifically, in this formula there are \\((n_1-1)+(n_2-1)\\) (or \\(a(n-1)\\)) degrees of freedom associated with the variance estimate. \\[ \\begin{aligned} s_{pooled}^2 &amp;= \\frac{\\sum_{i=1}^{a}(n_i-1)(s_i^2)}{\\sum_{i=1}^{a}(n_i-1)} \\\\ &amp;= \\frac{(n_1-1)s_1^2 + (n_2 -1)s_2^2}{(n_1-1)+(n_2-1)} \\\\ &amp;= \\frac{(n_1-1)s_1^2 + (n_2 -1)s_2^2}{(n_1+n_2-2)} \\\\ &amp;= \\frac{(n_{male} -1)s_{male}^2 + (n_{female} -1)s_{female}^2}{n_{male} + n_{female}-2} \\\\ \\end{aligned}\\\\ \\] Also note the simplification of the general formula below when the sample sizes (\\(n_i\\)) are all the same. In particular notice how we express the denominator when the sample sizes are the same. This will become relevant when we get to ANOVA. Recall a = 2 to indicate there are two sample variances. \\[ \\begin{aligned} s_{pooled}^2 &amp;= \\frac{\\sum_{i=1}^{a}(n_i-1)(s_i^2)}{\\sum_{i=1}^{a}(n_i-1)} \\\\ &amp;= \\frac{(n-1)s_1^2 + (n-1)s_2^2}{a(n-1)} \\\\ \\end{aligned}\\\\ \\] 5.7.2 Calculating \\(d\\) Recall that in the above we calculated the pooled standard deviation, \\(s_{pooled} = 8.9\\). Using this value we can calculate the standardized mean difference. We do so below using unbiased formula, Formula (5.10) below. \\[ \\begin{aligned} d_{unbiased} &amp;= d \\times [1 - \\frac{3}{4(n_{males} + n_{females})-9}] \\\\ &amp;= \\frac{\\bar{x}_{males} - \\bar{x}_{females}}{s_{pooled}} \\times [1 - \\frac{3}{4(n_{males} + n_{females})-9}] \\\\ &amp;= \\frac{187.2 - 160.1}{8.9} \\times [1 - \\frac{3}{4(10 + 10)-9}] \\\\ &amp;= 3.0 \\times 0.96\\\\ &amp;= 2.9\\\\ \\end{aligned} \\] 5.7.3 Assessing bias Sample-level \\(d_{unbiased}\\)-values, calculated above, often differ from the population-level standardized mean difference (i.e., \\(\\delta\\)) due to sampling error. We can confirm that \\(d_{unbiased}\\)-values are actually unbiased with a simulation. That is, we can confirm that the average of many \\(d_{unbiased}\\)-values equals the population standardized mean difference (i.e., \\(\\delta\\)) using a simulation. First, we obtain the heights from the male and female populations and place them into male_heights and female_heights, respectively. male_heights &lt;- male_population_heights %&gt;% pull(height) female_heights &lt;- female_population_heights %&gt;% pull(height) Next, we obtain a large number of samples from each population and place them in many_samples. many_samples&lt;- get_d_samples_from_population_data(pop1 = male_heights, pop2 = female_heights, cell.n = 10, number.of.samples = 50000) We can examine the contents of many_samples using the print() command. Each row of many_samples represents a single study. Each study has two samples: 10 males and 10 females. For both males and females we calculate the mean and variance. As well, we calculate the \\(d\\) and \\(d_{unbiased}\\) for each row. If you examine the first row carefully you see that the data in this row corresponds to the hand calculation example. print(many_samples) ## # A tibble: 50,000 × 7 ## n_per_cell mean1 var1_n_1 mean2 var2_n_1 d d_unbiased ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10 187. 92.2 160. 66.8 3.04 2.91 ## 2 10 183 107. 166 77.8 1.77 1.69 ## 3 10 181 39.8 169. 144. 1.27 1.22 ## 4 10 175. 80.3 162. 89.4 1.4 1.34 ## 5 10 184. 91.0 164. 28.9 2.65 2.54 ## 6 10 182. 96.4 166. 106. 1.61 1.54 ## 7 10 177. 97.2 167 162. 0.84 0.81 ## 8 10 188 212. 161. 205. 1.89 1.81 ## 9 10 185. 54.7 166. 91.5 2.28 2.18 ## 10 10 179. 69.3 162. 55.4 2.2 2.11 ## # … with 49,990 more rows Recall the population-level standardized mean difference, \\(\\delta\\), was 1.49. We can see the extent to which the average of the sample-level \\(d\\) and \\(d_{unbiased}\\) values compare to this population-level value. many_samples %&gt;% summarise(mean_d = mean(d), mean_d_unbiased = mean(d_unbiased)) ## # A tibble: 1 × 2 ## mean_d mean_d_unbiased ## &lt;dbl&gt; &lt;dbl&gt; ## 1 1.56 1.49 You can see that the mean of the sample-level \\(d\\) values is 1.56 which is higher than the population-level standardized mean difference (\\(\\delta\\) = 1.49). In contrast, you can see that the mean of the sample-level \\(d_{unbiased}\\) values is 1.49 which corresponds to the population-level standardized mean difference (\\(\\delta\\) = 1.49). 5.7.4 Illustrating variability An inspection of the first few rows of the many_samples data, above, illustrates that many of the \\(d_{unbiased}\\) values differed from the population-level standardized mean difference of \\(\\delta = 1.49\\). We can see the variability in sample-level \\(d_{unbiased}\\) values in the histogram below. FIGURE 5.7: Histogram of \\(d_{unbiased}\\) when \\(\\delta = 1.49\\) We can calculate the full range of sample-level \\(d_{unbiased}\\) values with the commands below: many_samples %&gt;% summarise(d_min = min(d_unbiased), d_max = max(d_unbiased)) ## # A tibble: 1 × 2 ## d_min d_max ## &lt;dbl&gt; &lt;dbl&gt; ## 1 -0.38 5.15 We see from the output that \\(d_{unbiased}\\) values were as small as -0.38 and as large as 5.15. All of these values are estimates of the population-level standardized mean difference of \\(\\delta = 1.49\\). You can see that many of the sample-level estimates differed considerably from the population-level value. The negative \\(d\\)-value (i.e., the minimum) is a case where the study (i.e, sample-level result) would have found that women are taller than men - a reversal of what is actually true at the population-level. This range of results illustrates the extent to which the findings for a single sample/study may deviate from the underlying truth for the entire population. We see that when the sample size is small (n = 10 per group) that the study results are likely to differ extraordinarily from what is true at the population level. This suggests that the “old school” suggestion of 10 participants per group when conducting a study leads to findings with little informational value. 5.8 Estimating \\(\\rho\\) The population-level correlation, \\(\\rho\\), is estimated by the sample-level correlation, \\(r\\). The value for \\(r\\) can be calculated using Formula (5.13) below. \\[\\begin{equation} r = \\frac{\\Sigma (x - \\bar{x})(y - \\bar{y})}{\\sqrt{\\Sigma (x - \\bar{x})^2\\Sigma (y - \\bar{y})^2}} \\tag{5.13} \\end{equation}\\] Sample-level correlations, \\(r\\), often differ from the population-level correlation (\\(\\rho\\)) due to sampling error. We can confirm that sample correlations are not substantially biased with a simulation. That is, we can confirm that the average of many sample correlations (\\(r\\)) roughly equals the population correlation (\\(\\rho\\)) using a simulation. We say “roughly equal” because \\(r\\) is technically a biased estimator of \\(\\rho\\) but the bias is sufficiently small that it can be ignored (Schmidt and Hunter 2014). We have the height and weight for 300000 people that comprise our population (fictious data). This data can be loaded with the command below. The data can be downloaded here: data_cor_pop.csv library(tidyverse) pop_data &lt;- read_csv(file = &quot;data_cor_pop.csv&quot;) ## Rows: 300000 Columns: 2 ## ── Column specification ──────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (2): weight, height ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. The print() command reveals there are 300000 rows and two columns (weight and height). Each row represents a different person in the population. print(pop_data) ## # A tibble: 300,000 × 2 ## weight height ## &lt;dbl&gt; &lt;dbl&gt; ## 1 143. 163. ## 2 156. 171. ## 3 144. 160. ## 4 152 190. ## 5 155. 173. ## 6 147. 160. ## 7 145. 177. ## 8 153. 179. ## 9 151. 177. ## 10 146. 167. ## # … with 299,990 more rows We can obtain the population correlation, \\(\\rho\\), by correlating the weight and height columns: cor(pop_data) ## weight height ## weight 1.0 0.5 ## height 0.5 1.0 We see from this matrix that the population correlation (N = 300000) between weight and height is \\(\\rho\\) = .50 (with rounding), see Figure 5.8A. To examine the extent to which this population correlation, \\(\\rho\\) = .50, is estimated by the sample statistic, \\(r\\), we need to take a large number of samples. Therefore, we take 50000 samples (each n = 75) and calculate the correlation for each: set.seed(1) many_samples &lt;- get_r_samples_from_population_data(data = pop_data, n = 75, number.of.samples = 50000) We can examine the first few rows of many_samples using the print() command. There are 50000 rows and each row represent a different sample of 75 people. The correlation between height and weight for each sample is presented in the \\(r\\) column. print(many_samples) ## # A tibble: 50,000 × 3 ## sample.number n r ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 75 0.38 ## 2 2 75 0.5 ## 3 3 75 0.56 ## 4 4 75 0.52 ## 5 5 75 0.49 ## 6 6 75 0.37 ## 7 7 75 0.57 ## 8 8 75 0.4 ## 9 9 75 0.59 ## 10 10 75 0.5 ## # … with 49,990 more rows If you examine the first row carefully you see a sample correlation of \\(r = .38\\) based on \\(n\\) = 75. This sample correlation is illustrated in Figure 5.8B and it is just one of the 50000 sample correlations. The distribution of the 50000 sample correlations is illustrated in in Figure 5.8C. Even though the population correlation is \\(\\rho = .50\\) there is considerable variability in the sample correlations, \\(r\\). Each sample correlation is based on a subset of the population data (i.e., 75 of the 300000 rows). Consequently, the sample correlations differ from the population correlation due to sampling error. The differences among the sample correlations can be quite large. Indeed, as the code below reveals, some sample correlation were as low as \\(r = .06\\) and as high as \\(r = .77\\) – even though the population correlation was \\(\\rho = .50\\). many_samples %&gt;% summarise(min_r = min(r), max_r = max(r)) ## # A tibble: 1 × 2 ## min_r max_r ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.06 0.77 5.8.1 Assessing bias Even though the sample correlations usually differed from the population correlation we are not concerned. We recognize that there is little to be learned from a single study. We are more concerned as to whether the average of a large number of sample correlations is correct. We assess this with the code below. many_samples %&gt;% summarise(mean_r = mean(r)) ## # A tibble: 1 × 1 ## mean_r ## &lt;dbl&gt; ## 1 0.497 You can see that the mean of the sample-level correlations is \\(\\bar{r} = .497\\) which is very close to the population-level correlation \\(\\rho = .50\\) (.4999951 without rounding). Consequently, for practical purposes, we don’t worry about the sample correlation being a biased estimator of the population correlation. On average, sample correlation are correct - even though any single sample correlation is likely incorrect due to sampling error (i.e., the fact it is based on a small subset of the population). FIGURE 5.8: Correlation sampling distribution 5.9 Overview In this chapter we have illustrated how population parameters can be estimated by sample statistics; these are summarized below: Parameter Estimated by this statistic Mean \\(\\mu = \\frac{\\sum{X}}{N}\\) \\(\\bar{x} = \\frac{\\sum{x}}{n}\\) Variance \\(\\sigma^2 = \\frac{\\sum{(X - \\mu)^2}}{N}\\) \\(s^2 = \\frac{\\sum{(x - \\bar{x})^2}}{n-1}\\) \\(s_{pooled}^2 = \\frac{(n_1 -1)s_1^2 + (n_2 -1)s_2^2}{n_1 + n_2-2}\\) Standard deviation \\(\\sigma = \\sqrt{\\frac{\\sum{(X - \\mu)^2}}{N}}\\) \\(s =\\sqrt{\\frac{\\sum{(x - \\bar{x})^2}}{n-1}}\\) \\(s_{pooled} = \\sqrt{\\frac{(n_1 -1)s_1^2 + (n_2 -1)s_2^2}{n_1 + n_2-2}}\\) Cohen’s \\(d\\) or SMD \\(\\delta= \\frac{\\mu_{1} - \\mu_{2}}{\\sigma}\\) \\(d = \\frac{\\bar{x}_{1} - \\bar{x}_{2}}{s_{pooled}}\\) \\(d_{unbiased} = \\frac{\\bar{x}_{1} - \\bar{x}_{2}}{s_{pooled}} \\times [1 - \\frac{3}{4(n_1 + n_2)-9}]\\) Correlation \\(\\rho = \\frac{\\Sigma (X - \\mu_X)(Y - \\mu_Y)}{\\sqrt{\\Sigma (X - \\mu_X)^2\\Sigma (Y - \\mu_Y)^2}}\\) \\(r = \\frac{\\Sigma (x - \\bar{x})(y - \\bar{y})}{\\sqrt{\\Sigma (x - \\bar{x})^2\\Sigma (y - \\bar{y})^2}}\\) 5.10 Meta-analysis It may seem odd that we used so many simulations to investigate the properties of statistics. Surely, researchers don’t do that “in the real world.” In fact, researchers who are aware of the enormous impact of sampling error know that single studies have little informational value. They recognize that any single study has a high probability of being misleading. Consequently, these individuals survey the literature and find all the studies on a single topic (possibly thousands of studies). An average of the results of all of the thousands of studies can then be calculated and reported. This process is referred to as conducting a meta-analysis; and it perfectly corresponds to the process we used in the simulations. A meta-analysis finds “the truth” of what is happening at the population level by averaging all of the studies on that topic. 5.11 A joke Now that you understand the logic for assessing bias, we present an old statistics joke. “A physicist, a chemist, and a statistician go hunting. The physicist shoots at a deer and misses by 2 meters to the left. The chemist shoots and misses by 2 meters to the right. The statistician immediately yells”We got it!” 5.12 Key Points Samples are of interest because they help us estimate attributes of a population. Sample statistics estimate population parameters. Due to the fact that sample statistics are based on a random subset of the population (i.e., a sample) they often differ substantially from the population parameter. This illustrates that informational value of a single study is typically quite low. A statistic is unbiased if the average of the sample statistics, over many thousand of samples, equals the population parameter. To avoid bias, sometimes the formula for a sample statistics differs from the formula for the population parameter. Meta-analyses are used in the “real world” the way we used simulations in this chapter. References "],["sampling-precision.html", "Chapter 6 Sampling Precision 6.1 Overview 6.2 Population / Individuals 6.3 Sampling distribution 6.4 Precision indices 6.5 A short cut 6.6 Estimates of precision 6.7 Bias of precision estimates 6.8 Where are we? 6.9 Precision for means: Causes 6.10 Precision for \\(d\\)-values: Causes 6.11 Precision for sample correlations (\\(r\\)): Causes", " Chapter 6 Sampling Precision 6.1 Overview In the previous chapter we focused on examining the extent to which we could estimate a population parameter from a statistic in an unbiased manner. That is, we focused on the fact that, due to sampling error, a sample estimate (i.e., a statistic) of a population parameter will likely be wrong. Sample statistics may overestimate, or underestimate, a population parameter - often substantially. Consequently, we learned to think about the accuracy of sample statistics. More specifically, we learned to think about accuracy not in terms of a single study, but rather in terms of whether sample statistics correctly estimate the population parameter on average over many studies (as illustrated in Figure 6.1). When the average of many sample statistics (e.g., sample means) equals the population parameter (e.g., population mean) there is no bias and the sample statistic can be considered accurate (on average). In this chapter, we assume there is no bias and that sample means are, on average, accurate. In doing so, we focus now on the precision of sample means as estimates of the population mean, see Figure 6.1. That is, assuming no bias, when you conduct a single study you know the sample mean will differ from the population mean due to sampling error. You might wonder, how much does my sample mean differ from the population mean? That’s the question we address in this chapter. When we conduct a single study we can’t know how much that particular sample mean differs from the population mean, but we can estimate the extent to which sample means differ from the population mean in general. We focus on two indices of precision – variance of sample mean and standard error of sample means. By the end of the chapter you will understand how to a) conceptualize these indices with respect to a large number of samples/studies and b) estimate them for a single study. FIGURE 6.1: Sampling accuracy and precision 6.2 Population / Individuals We use a population of heights to learn about random sampling and the precision of sample estimates. We can obtain that population with the code below: library(tidyverse) library(learnSampling) pop_data &lt;- get_height_population() The glimpse() command can be used to confirm that the population contains 100,000 people. glimpse(pop_data) ## Rows: 100,000 ## Columns: 3 ## $ id &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, … ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;female&quot;, &quot;male&quot;, &quot;male&quot;,… ## $ height &lt;dbl&gt; 177, 151, 171, 157, 169, 187, 163, 173, 172… We can use the head() command to see the first 10 rows of the 100,00 rows. We see that each row in pop_data represents a single person. There is a column called height that contains the height for everyone in the population. head(pop_data, 10) ## # A tibble: 10 × 3 ## id sex height ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 male 177 ## 2 2 female 151 ## 3 3 female 171 ## 4 4 male 157 ## 5 5 male 169 ## 6 6 male 187 ## 7 7 female 163 ## 8 8 male 173 ## 9 9 female 172 ## 10 10 male 193 We can calculate the descriptive parameters for the population with the code below: pop_data %&gt;% summarise(pop_mean = mean(height), pop_var = var.pop(height), pop_sd = sd.pop(height)) %&gt;% as.data.frame() ## pop_mean pop_var pop_sd ## 1 172.5 156.3 12.5 We see the mean of the population of heights is 172.5 (\\(\\mu = 172.5\\)) and the variance is 157.5 (\\(\\sigma^2 = 157.5\\)). Correspondingly, the standard deviation of the population of heights is 12.5 (\\(\\sigma = 12.5\\)); simply the square root of the variance. \\[ \\begin{aligned} \\mu &amp;= 172.5 \\\\ \\sigma^2 &amp;= 157.5 \\\\ \\sigma &amp;= 12.5 \\\\ \\end{aligned} \\] 6.3 Sampling distribution A sampling distribution is composed of an infinite number of samples. For pedagogical purposes, we will use a sampling distribution of just 50000 samples. This large number of samples will lead us to roughly the same conclusions as using an infinite, but impractical, number of samples. We obtain 50000 samples with code below: many_samples &lt;- get_M_samples(pop.data = pop_data, pop.column.name = height, n = 10, number.of.samples = 50000) We can use the head() command to see the first few rows of many_samples. Every row represents a sample of 10 people. That is, each row represents a study with 10 participants for which we measured their heights. For each row/study we have the sample mean and variance (using n-1) for the 10 heights. head(many_samples) ## # A tibble: 6 × 5 ## study n sample_mean sample_var_n sample_var_n_1 ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 10 174. 27.8 30.9 ## 2 2 10 162. 83.4 92.6 ## 3 3 10 173. 139. 155. ## 4 4 10 180 322. 358. ## 5 5 10 173. 161. 179. ## 6 6 10 172 160. 177. We will study the precision of sample means as estimates of the population mean using the values in the sample_mean column. Each of the 50000 values in the sample_mean column is a sample mean (\\(\\bar{x}\\)), based on \\(n\\) = 10. Each sample mean provides an estimate of the population mean (\\(\\mu = 172.5\\)). Sample means often overestimate, or underestimate, the population mean. We can see this using the code below which reveals that the smallest sample mean is 155.6 (\\(\\bar{x} = 155.6\\)) and the largest sample mean is 188.8 (\\(\\bar{x} = 188.8\\)). Both are estimates of the population mean (\\(\\mu = 172.5\\)) but differ from that value due to sampling error (i.e., the fact that sample means are based on a small subset of the population). You can see that the conclusions of any single study may differ rather substantially from what is true for the overall population. many_samples %&gt;% summarise(min_mean = min(sample_mean), max_mean = max(sample_mean)) ## # A tibble: 1 × 2 ## min_mean max_mean ## &lt;dbl&gt; &lt;dbl&gt; ## 1 156. 189. The 50000 means in the sample_mean column form a sampling distribution; specifically, the sampling distribution of the mean. It’s critical to distinguish between a) the distribution of the sample means and b) the distribution of population heights. Examine Figure 6.2 below. The top part of this figure illustrates the variability in the heights for the 100,000 people (represented by X’s). There are more people than X’s; the X’s are a reminder it is a distribution of people’s heights. The bottom part of this figure illustrates the variability in sample means - each based on 10 people. Each sample mean is an estimate of the mean height of the population (172.5 cm). There are more sample means than \\(\\bar{x}\\)’s; the \\(\\bar{x}\\)’s are a reminder it is a distribution of sample means. When we describe how precisely sample means estimate the mean height for the population we are referring to the width of this distribution of means. FIGURE 6.2: Sampling distribution of the mean. The population of individual height’s is presented at the top and filled with X’s to remind you they are individuals. There are more individuals than X’s. The sampling distribution of means is presented in the bottom part of the graph. The sampling distribution of means is filled with \\(\\bar{x}\\)’s to remind you that sample means are being graphed. There are more means than \\(\\bar{x}\\)’s. The population mean (green line) and the mean of sample means (blue line) are in the same spot, indicating high accuracy (i.e., no bias). 6.4 Precision indices The most common way of referring to the width of this distribution of sample means is with the term standard error. Standard error is simply the standard deviation of the sample means. We calculate the standard error of the mean using Formula (6.1) below. We use \\(K\\) in the formula to refer to the number of sample means in the distribution (i.e., \\(K = \\infty\\)). Note that it doesn’t really make sense to divide by infinity (i.e., \\(\\infty\\)) so statistician’s don’t normally express the standard deviation of this distribution using the formula below - instead they talk about the expected value for the standard deviation. But for learning purposes - we present the formula below as means to bridge this learning with past learning. \\[\\begin{equation} \\sigma_{\\bar{x}} = \\sqrt{\\frac{\\sum{(\\bar{x} - \\bar{\\bar{x}})^2}}{K}} \\tag{6.1} \\end{equation}\\] Notice that the formula for standard error is actually just the formula for standard deviation but with notation adapted to reflect the fact we are examining sample means (i.e., \\(\\bar{x}\\)’s) instead of people (i.e., X’s). Often we will not talk about standard error but rather the variance of the distribution of sample means. When we do so, we are talking about the same thing - the variability in sample means - but using different units. You can see that the formula for the variance of sample means, see Formula (6.2) below, is just a squared version of the standard error equation, Formula (6.1) above. \\[\\begin{equation} \\sigma_{\\bar{x}}^2 = \\frac{\\sum{(\\bar{x} - \\bar{\\bar{x}})^2}}{K} \\tag{6.2} \\end{equation}\\] How do we interpret variance of sample means? Assuming the sample mean provides an unbiased estimate of the population mean (i.e., \\(\\bar{\\bar{x}} = \\mu\\)), then the variance of the sample means is simply the average of the squared differences between sample means and the population mean. Standard error is simply the square root of the variance of sample means. Both are different ways of describing the same thing - the precision with which sample means estimate the population mean. If the variance of sample means is large, it indicates sample means differ considerably (on average) from the population mean. If the variance of sample means is small, it indicates sample means differ only slightly (on average) from the population mean. If the variance of sample means is zero, all the sample means are exactly the same as the population mean. We can calculate the variance of sample means below: many_samples %&gt;% summarise(var_of_means = var.pop(sample_mean)) %&gt;% as.data.frame() ## var_of_means ## 1 15.73 The standard error of sample mean is just the square root of this value: many_samples %&gt;% summarise(sd_of_means = sqrt(var.pop(sample_mean))) %&gt;% as.data.frame() ## sd_of_means ## 1 3.967 Thus, we can indicate the precision with which sample means (\\(\\bar{x}\\)) estimate the population mean (\\(\\mu\\)) using the notation below. We use \\(\\sigma_{\\bar{x}}^2\\) to refer to the variance of sample means and \\(\\sigma_{\\bar{x}}\\) to refer to the standard error of sample means. Again notice in the notation that for both of these symbols there is a subscript with an \\(\\bar{x}\\) to remind us we are talking about the variability of sample means (and not people). \\[ \\begin{aligned} \\sigma_{\\bar{x}}^2 &amp;= 15.73 \\\\ \\sigma_{\\bar{x}} &amp;= 3.97 \\\\ \\end{aligned} \\] 6.5 A short cut In the previous section we used a computer simulation to calculate the variance of sample means. This involved several steps: Obtaining the entire population Creating 50000 samples (each n = 10) from the population Calculating the mean for each of the 50000 samples Calculating the variance of the 50000 sample means as per Formula (6.2) All those steps are a lot of work - and a lot of computer time. Interestingly, we don’t need to go to all that work to determine the variance of sample means. There is a quicker way to obtain the variance of sample means. That is, there is a quicker way to determine the precision with which sample means estimate the population mean when we use a sample size of \\(n\\) = 10. Statisticians have created a short-cut formula for obtaining the variance of sample means. The equation by itself, see Formula (6.3) below, is extraordinarily simple to use. The formula, however, is not easy to understand. Over many years of teaching, we’ve seen students struggle to understand why the formula is structured in the way that it is - looking for a straightforward logic as to why the short-cut formula works. We encourage you to avoid going down that road. Understanding Formula (6.3) below is beyond the scope of this chapter and, likely, your mathematical background at this point. It was derived via a complex mathematical proof discussed in Hays (1994) if you want more information. Simply accept that there is a short-cut formula and do not try to understand the logic of the formula. Variance sample means: \\[\\begin{equation} \\sigma_{\\bar{x}}^2 = \\frac{\\sigma^2}{n} \\tag{6.3} \\end{equation}\\] You can see that with this formula the variance of sample means, Formula (6.3), is simply the variance of heights of the individuals in the population divided by the sample size. Oddly, this short cut works and provides the variance of sample means. Notice that we don’t need to have the entire population, create thousands of samples, or go through any of the calculation work. All we need to know is the variance of the population and the sample size. In the context of the current example we can compute the variance of the sample means using this information. Recall the variance of people’s heights in the population is \\(\\sigma^2=157.5\\) and our sample size is \\(n\\) = 10. \\[ \\begin{aligned} \\sigma_{\\bar{x}}^2 &amp;= \\frac{\\sigma^2}{n} \\\\ &amp;= \\frac{157.5}{10}\\\\ &amp;= \\frac{157.5}{10}\\\\ &amp;= 15.75 \\end{aligned} \\] We see that the variance of the sample means from this short-cut approach is 15.75 (i.e., \\(\\sigma_{\\bar{x}}^2\\) = 15.75). Likewise, the variance of the sample means from our simulation was 15.73; incredibly close. If we had used substantially more than 50000 samples in the simulation the 15.73 value would have been 15.75 – making the two results identical. Thus, the short-cut formula gives us the variance of sample means without having to do all the simulation work. Of course, the variance of sample means is only one of the two ways we can describe the precision of sample estimates of the population mean. Many people prefer to use standard error (i.e. standard deviation of sample means) instead. The calculation for standard error is below: \\[ \\begin{aligned} \\sigma_{\\bar{x}} &amp;= \\sqrt{\\frac{\\sigma^2}{n}} \\\\ &amp;= \\sqrt{\\frac{157.5}{10}}\\\\ &amp;= \\sqrt{\\frac{157.5}{10}}\\\\ &amp;= \\sqrt{15.75} \\\\ &amp;= 3.97 \\\\ \\end{aligned} \\] 6.6 Estimates of precision As wonderful as it is to have a short-cut formula for obtaining the variance of sample means (or standard error) there is a catch. The formula requires knowledge of the population variance (or standard deviation). In a research scenario we don’t know the mean or standard deviation of the population - that’s why we’re conducting research. Consequently, we can’t directly calculate the variance of sample means (or standard error) using Formula (6.3) above. Fortunately, if we have only a single study, we can use the sample variance (with n-1 in the denominator) to estimate the population variance. This estimate of the population variance may be higher or lower than the actual population variance - but it will, on average, be correct across many studies. With this estimate of the population variance in hand we can calculate an estimate of the variance of sample means (i.e, the precision of sample means) using Formula (6.4) below. Estimated variance sample means: \\[\\begin{equation} s_{\\bar{x}}^2 = \\frac{s^2}{n} \\tag{6.4} \\end{equation}\\] Estimated standard error for the mean: \\[\\begin{equation} s_{\\bar{x}} = \\sqrt{\\frac{s^2}{n}} = \\frac{s}{{\\sqrt{n}}} \\tag{6.5} \\end{equation}\\] FIGURE 6.3: Precision: Conceptual and calculation approaches. 6.6.1 A worked example Consider a worked example below. Imagine a scenario where we do not know anything about the population of heights. Therefore we conduct a study by taking a random sample of 10 people to estimate the average height of people in the population. The sample mean is 174.3cm and the sample variance is 30.90. Therefore, our best guess of the unknown population mean is 174.3cm. Because we used a sample (a small subset of the population) we know that 174.3cm is unlikely to be the actual mean height for the population. The mean height for the population might be higher or lower than 174.3cm. Nonetheless, at this point our best guess is that the mean of the population is 174.3cm; but we recognize that this is just an estimate of the population mean and is likely off by some amount. Wouldn’t it be great to know the extent to which the sample mean in our study might differ from the population mean? As budding statisticians, we know we can’t know that for this particular sample/study, but we can try to figure out how much sample means differ from the population mean on average (when using \\(n\\) = 10) to help us understand the precision of our current sample/study estimate (174.3cm) of the population mean. This precision information is exactly what is conveyed by the variance of sample means, \\(\\sigma_{\\bar{x}}^2\\), or standard error of sample means, \\(\\sigma_{\\bar{x}}\\). We can’t obtain these precision indices but we can estimate them (via \\(s_{\\bar{x}}^2\\) and \\(s_{\\bar{x}}\\)). We want to know the precision with which sample means estimate the population mean. Said another way, we want to know the variance of sample means (or standard error of sample means) but we only have a single study. Therefore, we have to rely on the short-cut formula for determining the variability in sample means. Unfortunately, the short-cut formula for the variance of sample means formula requires the population variance which we don’t know. We do, however, have an estimate of the population variance from our sample. The sample variance is 30.9cm\\(^2\\). Therefore, our best guess of the unknown population variance is 30.9cm\\(^2\\). Because we used a sample (a small subset of the population) we know that 30.9cm\\(^2\\) is likely to be different than the actual variance for the population. The variance for the population might be higher or lower than 30.9cm\\(^2\\). So even though our estimate of the population variance may be “off” in this single sample we know it will be accurate in the long run averaging over many studies (see previous chapter). Nonetheless, at this point our best guess is that the variance of the population is 30.9cm\\(^2\\). We use this information to estimate the variance of sample means: \\[ \\begin{aligned} s^2_{\\bar{x}} &amp;= \\frac{s^2}{n} \\\\ &amp;= \\frac{30.90}{10} \\\\ &amp;= 3.09 \\\\ \\end{aligned} \\] Or alternatively, estimate standard error: \\[ \\begin{aligned} s_{\\bar{x}} &amp;= \\sqrt{\\frac{s^2}{n}} \\\\ &amp;= \\sqrt{\\frac{30.90}{10}} \\\\ &amp;= \\sqrt{3.09} \\\\ &amp;= 1.76 \\\\ \\end{aligned} \\] At this point we don’t know the precision of sample means when \\(n\\) = 10; that is, we don’t know \\(\\sigma_{\\bar{x}}^2\\) or \\(\\sigma_{\\bar{x}}\\). We do have an estimate of the precision of sample means (i.e., with via \\(s_{\\bar{x}}^2\\) and \\(s_{\\bar{x}}\\)). Whenever you calculate the variance of sample means, or standard error, based on sample data it is ALWAYS just an estimate of the actual variance of sample means or the actual standard error. That fact that an estimate of the variance of sample means is the best you can do with sample data is evident when we calculate the estimate for the many samples. We do that with the R code below: many_samples &lt;- many_samples %&gt;% mutate(est_se2 = sample_var_n_1/n) The command above calculated the estimate variance of sample means (est_se2 or \\(s_{\\bar{x}}^2\\)) for each of the 50000 samples. We can see the first few samples with the head() command. head(many_samples) ## # A tibble: 6 × 5 ## study n sample_mean sample_var_n_1 est_se2 ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 10 174. 30.9 3.09 ## 2 2 10 162. 92.6 9.26 ## 3 3 10 173. 155. 15.5 ## 4 4 10 180 358. 35.8 ## 5 5 10 173. 179. 17.9 ## 6 6 10 172 177. 17.7 Inspect the est_se2 column. Notice how each of these values is an \\(s_{\\bar{x}}^2\\) number that is an estimate of \\(\\sigma_{\\bar{x}}^2\\) = 15.75. The first estimate, \\(s_{\\bar{x}}^2\\) = 3.09, is the one we did by hand above. This estimate of the variance of sample means (\\(s_{\\bar{x}}^2\\) = 3.09) is much lower than the actual variance of sample means (\\(\\sigma_{\\bar{x}}^2\\) = 15.75). Notice how the other values in the est_se2 column tend to either overestimate, or underestimate, the variance of sample means. That is, the other studies also overestimate, or underestimate, the precision with which sample means (\\(n\\) = 10) estimate the population mean. 6.7 Bias of precision estimates At this point, you might be a bit concerned about our ability to estimate the variance of sample means ( \\(\\sigma_{\\bar{x}}^2\\) = 15.75). In the simulation above, we calculated an estimate of the variance of sample means (\\(s_{\\bar{x}}^2\\)) and placed those values in the est_se2 column. We saw that the values in this column mostly differed from the actual variance of sample means (15.75). You might wonder if these estimates of the variance of sample means are themselves biased? The answer is no - they are not biased. Our estimate of the population variance (n-1 in the denominator) was not biased so there is no reason to suspect that the estimate of the variance of sample means is biased. But we can confirm this by averaging over the 50000 samples. If the average of the est_est2 column is 15.75 (or very close) than \\(s_{\\bar{x}}^2\\) is not a biased estimate of \\(\\sigma_{\\bar{x}}^2\\) = 15.75. many_samples %&gt;% summarise(avg.of.est_se2 = mean(est_se2)) ## # A tibble: 1 × 1 ## avg.of.est_se2 ## &lt;dbl&gt; ## 1 15.7 We see that the average of the 50000 estimates of the variance of sample means (\\(s_{\\bar{x}}^2\\)) is 15.73 which is very close to the actual value of \\(\\sigma_{\\bar{x}}^2\\) = 15.75. Any sample estimate of the variance of sample means will be off somewhat due to sampling error. But, on average, estimates of the variance of sample means will be unbiased/accurate. 6.8 Where are we? So where are we? We’ve learned that sample means may overestimate, or underestimate, the population mean. Over many studies, on average, sample means will approximate the population mean. In other words, on average, sample means are accurate. As well, we’ve learned that the variability in estimates of the population mean is referred to as precision. We can index the precision of sample means, for a given sample size, using two indices: variance of sample means and standard error of sample means (i.e., standard deviation of sample means). Both of these formulas require knowledge of the population variance - something we never have. When we conduct a single study, we get a sample mean. We cannot estimate how precise that sample mean is; we can however, estimate how precise sample means are in general – via the variance of sample means (or standard error). There is a formula for calculating the variance of sample means, Formula (6.3), but it requires knowledge of the (unknown) population variance. Consequently, we use an estimate of the population variance in these formulas rather than the actual population variance, see Formula (6.4). As a result, when we calculate variance of sample means (or standard error) using an estimate of the population variance (from our sample) we only obtain an estimates of the variance of sample means. Moreover, this estimate of the variance of sample means is itself influenced by sampling error - but accurate when averaged over many studies. 6.9 Precision for means: Causes The formula for variance of the sampling distribution for the mean reveals that it is influenced only by the population variance and sample size. In a research scenario we don’t have any control over the population variance (it is what it is), but we do have control over sample size. Increasing the sample size decreases the variability in sample means - as illustrated in the formulas below. \\[ \\begin{aligned} \\sigma^2 &amp;= 157.5 \\\\ \\sigma_{\\bar{x}}^2 &amp;= \\frac{\\sigma^2}{n} = \\frac{157.5}{10} = 15.75 \\\\ \\sigma_{\\bar{x}}^2 &amp;= \\frac{\\sigma^2}{n} = \\frac{157.5}{50} = 3.15 \\\\ \\end{aligned} \\] We also show in Figure 6.4 the difference that increasing the sample size makes. The larger the sample size the less sample means vary due to sampling error. A larger sample size means a more precise estimate of the population parameter. FIGURE 6.4: Two sampling distributions illustrating variability in sample means based on sample size. The top graph show the variance of individual’s heights in the population. The graph is filled with X’s to remind you it is a graph of individuals. There are more individuals than X’s. The bottom two graphs show variability in sample means due to random sampling. Each of the lower two graphs is a sampling distribution for a given sample size. Each sampling distribution contains 50000 sample means. Each sample mean is the average of the heights of individuals in a sample. The sampling distributions are filled with \\(\\bar{x}\\)’s to remind you that it is sample means being graphed. There are more means than \\(\\bar{x}\\)’s. You can see that by using a larger sample size (\\(n = 50\\), for 50000 samples) there is less variability in sample means than when using a smaller sample size (\\(n = 10\\)), for 50000 samples. Additionally, a larger sample size makes the sample estimate (\\(s^2\\)) of the population variance (\\(\\sigma^2\\)) more precise. Consequently, it makes the sample estimate (\\(s_{\\bar{x}}^2\\) or \\(s_{\\bar{x}}\\)) of the variance of sample means (\\(\\sigma_{\\bar{x}}^2\\) or \\(\\sigma_{\\bar{x}}\\)) more precise. Therefore, increasing the sample size increases the precision of a) sample means (\\(\\bar{x}\\)) and b) precision estimates (\\(s_{\\bar{x}}^2\\) or \\(s_{\\bar{x}}\\)). The precision of sample means is influenced by: population variance/standard deviation (\\(\\sigma^2\\) / \\(\\sigma^2\\)) sample size (%n%) 6.10 Precision for \\(d\\)-values: Causes Whenever we use a statistic (e.g., \\(\\bar{x}\\)) to estimate a population-level parameter (e.g., \\(\\mu\\)) the statistic will differ from the parameter due to sampling error. This is true of all statistics. Therefore, it is possible to generate a sampling distribution for all statistics. In this section we will focus on the factors that influence the precision with which \\(d\\)-value estimate the population-level standardized mean difference (\\(\\delta\\)). More specifically, we focus on how the sample size and the size of the population-level effect influence width of the sampling distribution. 6.10.1 Sample size Consider the case of estimating the standardized mean difference (i.e., \\(\\delta\\)) between the heights of males and females, illustrated in Figure 6.5. The population-level height information is presented in Figure 6.5A. The sampling distribution for sample-level \\(d_{unbiased}\\) values when you use 10 people per group (10 males, 10 females) is presented in Figure 6.5B. We could calculate the variance of \\(d_{unbiased}\\) values or the standard error (i.e., standard deviation) of \\(d_{unbiased}\\) values; just like we did for sample mean. You can see in Figure 6.5B that even though the population-level standardized mean difference is 1.49 (\\(\\delta\\) = 1.49) there was considerable variability in sample-level \\(d_{unbiased}\\) values. Indeed, inspecting the sample-level data reveals when the population difference is \\(\\delta\\) = 1.49, the sample level differences range from \\(d_{unbiased}\\) = -0.38 to \\(d_{unbiased}\\) = 5.50. That’s a considerable range. When \\(d_{unbiased}\\) = -0.38 you would conclude, in your study, that the mean female height is .38 standard deviations higher than the mean male height. Yet a colleague, conducting exactly the same study, could obtain a sample that leads him to observe \\(d_{unbiased}\\) = 5.50. This would indicate to him that the mean male height is 5.50 standard deviations higher than the mean female height; an opposite conclusion. The results of both your study and the colleague’s study differ considerably from the truth that \\(\\delta\\) = 1.49 – which indicates the mean male height is 1.49 standard deviations higher than the mean female height. We investigated the extent to which study-level \\(d_{unbiased}\\) values differ from the population \\(\\delta\\) = 1.49 when using 100 people per group for the comparison (i.e., 100 males, 100 females). You can see in Figure 6.5C that in this scenario the precision of the sample estimates (\\(d_{unbiased}\\)) of the population parameter (\\(\\delta\\)) still vary considerably - but substantially less than they did when it was 10 per group. With a 100 people per group, the \\(d_{unbiased}\\) values range from 0.91 to 2.21. For the lower end of this range, 0.91, a researcher would conclude that the mean for males is .91 standard deviations higher than the mean for females. At the upper end of this range, 2.21, a researcher would conclude that the mean for males is 2.21 standard deviations higher than the mean for females. The variability in \\(d_{unbiased}\\) values is still large - but at least the conclusions are a) all in the same direction, and b) would all be considered large (i.e, above 0.80) according to Cohen’s standards. These simulations illustrate a few important points. First, drawing any conclusion from a single study is problematic. The findings for a single study may differ substantially from the population parameter. Second, increasing sample size increases the precision with which a sample statistic estimates a population parameter. Third, drawing conclusions from small sample size studies (e.g., \\(n\\) = 10 per group) is extraordinarily problematic. Finally, we note that single studies (even with small sample size) are useful because they serve as data points for a future meta-analysis. FIGURE 6.5: Sampling distribution for \\(d_{unbiased}\\) 6.10.2 Population effect size (\\(\\delta\\)) The precision with which sample \\(d\\)-values estimate the population standardized mean difference is influenced by the magnitude of the population standardized mean difference. This situation differs sharply from that of sample means. The magnitude of the population mean does not influence the shape of the distribution of sample means. The distribution of sample means is normal - regardless of whether the population mean is high or low. In contrast, the shape of the the sampling distribution of \\(d\\)-values changes depending on the magnitude of the population effect (i.e., \\(\\delta\\)). In Figure 6.6 we illustrate two scenarios. Both scenarios are based on a repeated measures design. For each scenario we created a population-level difference and then obtained 50000 sample \\(d\\)-values. The sample size, \\(n\\) = 10 for each \\(d\\)-value, was held constant across the two scenarios. In contrast, the population standardized mean difference was different across the two scenarios. In Figure 6.6A the population standardized mean difference was \\(\\delta\\) = 0.50. In contrast, in Figure 6.6B the population standardized mean difference was \\(\\delta\\) = 2.00. Compare the shape of the distributions of \\(d\\)-values in Figure 6.6A and Figure 6.6B. You can see how the shape changes when the population level effect size changes. Consequently, the size of the population standardized mean difference influences the precision with which sample \\(d\\)-values estimate the population level effect (\\(\\delta\\)). FIGURE 6.6: d-value skew graphs Standard Error There is a standard error for \\(d\\)-values (i.e., \\(SE_d\\) or \\(SE_{d_{unbiased}}\\)). It is simply the standard deviation of the thousands of \\(d\\)-values in the simulation. More generally, it is an index of how much \\(d\\)-values vary from a population standardized mean difference (\\(\\delta\\)) due to sampling error for a given sample size. In geometric terms, the standard error is an index of the width of a sampling distribution. The standard error is larger in Figure 6.5B than in Figure 6.5C. The precision of sample \\(d\\)-values is influenced by: population standardized mean difference (\\(\\delta\\)) - influences shape of the distribution sample size (\\(n\\)) 6.11 Precision for sample correlations (\\(r\\)): Causes Sample correlations (\\(r\\)) are likely to differ from the population correlation (\\(\\rho\\)) due to sampling error. The precision with which sample correlations estimate the population correlation is influenced by sample size and the magnitude of the population correlation. These are reviewed below. 6.11.1 Sample size Consider a situation where the population-level relation between two variables is \\(\\rho = .30\\). For example, when looking at 300000 people the correlation between weight and height is .30. Then consider two scenarios where we sample from the population. In Scenario 1, we use a sample size of 50 people. We take 50000 samples (each comprised of 50 people) and calculate for each sample the correlation (\\(r\\)). The distribution of these sample correlations for Scenario 1 are presented in Figure 6.7A. In Scenario 2, we use a sample size of 500 people (ten times more per sample). We take 50000 samples (each comprised of 500 people) and calculate for each sample the correlation (\\(r\\)). The distribution of these sample correlations for Scenario 2 are presented in Figure 6.7B. If you contrast these two graphs you see the sampling distribution is narrower in Scenario 2 where the sample size is larger, see Figure 6.7B. This means that sampling error is less when the sample size is larger. In other words, a larger sample size results in more precise sample correlations. FIGURE 6.7: Correlation precision and sample size 6.11.2 Population effect size (\\(\\rho\\)) Consider a situation where we look at the correlation between height and weight in two different cities. Each city has 300000 people and we consider each city a population. In City 1 the population correlation is \\(\\rho = .30\\) whereas in City 2 the population correlation is \\(\\rho = .70\\). For City 1, we take 50000 samples (each comprised of 50 people) and calculate for each sample the correlation (\\(r\\)). The distribution of these sample correlations for City 1 are presented in Figure 6.8A. We repeat the process and obtain 50000 sample correlations (each comprised of 50 people) for City 2; the distribution of these sample correlations is presented in Figure 6.8B. If you contrast these two graphs you see the sampling distribution is narrower for City 2 where the population correlation is stronger, see Figure 6.8B. This means that sampling error is less when the population correlation (\\(\\rho\\)) is stronger. In other words, a larger population correlation results in more precise sample correlations. Importantly, also notice how the shape of the sampling distribution varies across the two effect-size scenarios (Figure 6.8 A vs B). FIGURE 6.8: Correlation precision and effect size Standard Error As with the other statistics reviewed, for sample correlations (\\(r\\)) you can calculate a standard error (\\(SE_r\\)). It is simply the standard deviation of the thousands of sample correlations (\\(r\\)’s) in the simulation. More generally, it is an index of how much sample correlations vary from a population correlation (\\(\\rho\\)) due to sampling error for a given sample size. In geometric terms, the standard error is an index of the width of a sampling distribution. The standard error is larger in Figure 6.7A than in Figure 6.7B. The precision of sample correlations (\\(r\\)) is influenced by: population correlation (\\(\\rho\\)) - influences shape of the distribution sample size (\\(n\\)) References "],["an-emphasis-on-workflow.html", "Chapter 7 An Emphasis on Workflow 7.1 Required Packages 7.2 Objective 7.3 Begin with the end in mind 7.4 Data collection considerations 7.5 Example: Single Occassion Survey", " Chapter 7 An Emphasis on Workflow 7.1 Required Packages The data files below are used in this chapter. Required Data data_ex_between.csv data_ex_within.csv data_item_scoring.csv The following CRAN packages must be installed: Required CRAN Packages apaTables Hmisc janitor psych skimr tidyverse Important Note: You should NOT use library(psych) at any point! There are major conflicts between the psych package and the tidyverse. We will access the psych package commands by preceding each command with psych:: instead of using library(psych). 7.2 Objective Due to a number of high profile failures to replicate study results (Nosek 2015) it’s become increasingly clear that there is a general crisis of confidence in many areas of science (Baker 2016). Statistical (and other) explanations have been offered (Simmons, Nelson, and Simonsohn 2011) for why it’s hard to replicate results across different sets of data. However, scientists are also finding it challenging to recreate the numbers in their own papers using their own data. Indeed, the editor of Molecular Brain asked authors to submit the data used to create the numbers in published papers and found that the wrong data was submitted for 40 out of 41 papers (Miyakawa 2020). Consequently, some researchers have suggested that it is critical to distinguish between replication and reproducibility (Patil P. 2019). Replication refers to trying to obtain the same results from a different data set. Reproducibility refers to trying to obtain the same results from the same data set. Unfortunately, some authors use these two terms interchangeably and fail to make any distinction between them. I encourage you to make the distinction and the use the terms consist with use suggested by (Patil P. 2019). It may seem that reproducibility should be a given - but it’s not. Correspondingly, there is a trend for journals and authors to adopt Transparency and Openness Promotion (TOP) guidelines. These guidelines involve such things as making your materials, data, code, and analysis scripts available on public repositories so anyone can check your data. A new open science journal rating system has even emerged called the TOP Factor. The idea is not that open science articles are more trustworthy than other types of articles – the idea is that trust doesn’t play a role. Anyone can inspect the data using the scripts and data provided by authors. It’s really just the same as making your science available for auditing the way financial records can be audited. But just like in the world of business, some people don’t like the idea of making it possible for others to audit their work. The problems reported in Molecular Brain (doubtless common to many journals) are likely avoided with open science - because the data and scripts needed to reproduce the statistics in the articles are uploaded prior to publication. The TOP open science guidelines have made an impact and some newer journals, such as Meta Psychology, have fully embraced open science. Figure 7.1 shows the header from an article in Meta Psychology that clearly delineates the open science attributes of the article that used computer simulations (instead of participant data). Take note that the header even indicates who verified that the analyses in the article were reproducible. FIGURE 7.1: Open science in an article header In Canada, the majority of university research is funded by the Federal Government’s Tri-Agency (i.e., NSERC, SSHRC, CIHR). The agency has a new Data Management Policy in which they state that “The agencies believe that research data collected through the use of public funds should be responsibly and securely managed and be, where ethical, legal and commercial obligations allow, available for reuse by others. To this end, the agencies support the FAIR (Findable, Accessible, Interoperable, and Reusable) guiding principles for research data management and stewardship.” [emphasis added] The perspective of the funding agency on data ownership differs substantially from that of some researchers who incorrectly believe “they own their data.” In Canada at least, the government makes it clear that when tax payers fund research (through the Tri-Agency) the research data is public property. Additionally the Tri-Agency Data Management Statement of Principles clearly indicates the responsibilities of funded researchers: “Responsibilities of researchers include: incorporating data management best practices into their research; developing data management plans to guide the responsible collection, formatting, preservation and sharing of their data throughout the entire lifecycle of a research project and beyond; following the requirements of applicable institutional and/or funding agency policies and professional or disciplinary standards; acknowledging and citing datasets that contribute to their research; and staying abreast of standards and expectations of their disciplinary community.” As a result of this perspective on data, it’s important that you think about structuring your data for reuse by yourself and others before you collect it. Toward this end, properly documenting your data file and analysis scripts is critical. 7.3 Begin with the end in mind In this chapter we will walk you though the steps from data collection, data entry, loading raw data, and the creation of data you will analyze (analytic data) via pre-processing scripts. These steps are outlined in Figure 7.2. This figure makes a clear distinction between raw data and analytic data. Raw data refers to the data as you entered it into a spreadsheet or received it from survey software. Analytic data is the data that has been structured and processed so that it is ready for analysis. This pre-processing could include such things as identifying categorical variables to the computer, averaging multiple items into a scale score, and other tasks. It’s critical that you don’t think of the analysis of your data as being completely removed from the data collection and data entry choices you make. Poor choices at the data collection and data entry stage can make your life substantially more complicated when it comes time to write the pre-processing script that will convert your raw data to analytic data. The mantra of this chapter is begin with the end in mind. FIGURE 7.2: Data science pipeline by Roger Peng It’s difficult to begin with the end in mind when you haven’t read later chapters. So, here we will be providing you with some general thoughts around different approaches to structuring data files and the naming conventions you can use when creating those data files. Indeed, in this chapter we strongly advocate that you use a naming convention for file, variable, and column names. This convention will save you hours of hassles and permit easy application of certain tidyverse commands. However, we must stress that although the naming convention we advocate is based on the tidyverse style guide, it is not “right” or “correct” - there are other naming conventions you can use. Any naming convention is better than no naming convention. The naming convention we advocate here will solve many problems. We encourage to use this system for weeks or months over many projects - until you see the benefits of this system, and correspondingly its shortcomings. After you are well versed in the strengths/weaknesses of the naming conventions used here you may choose to create your own naming convention system. 7.3.1 Structuring data: Obtaining tidy data When conducting analyses in R it is typically necessary to have data in a format called tidy data (Wickham 2014). Tidy data, as defined by Hadley, involves (among other requirements) that: Each variable forms a column. Each observation forms a row. The tidy data format can be initially challenging for some researchers to understand because it is based on thinking about, and structuring data, in terms of observations/measurements instead of participants. In this section we will describe common approaches to entering animal and human participant data and how they can be done keeping the tidy data requirement in mind. It’s not essential that data be entered in a tidy data format but it is essential that you enter data in a manner that makes it easy to later convert data to a tidy data format. When dealing with animal or human participant data it’s common to enter data into a spreadsheet. Each row of the spreadsheet is typically used to represent a single participant and each column of the spreadsheet is used to represent a variable. Between participant data. Consider Table 7.1 which illustrates between participant data for six human participants running 5 kilometers. The first column is id, which indicates there are six unique participants and provides and identification number for each of them. The second column is sex, which is a variable, and there is one observation per per row, so sex also conforms to the tidy data specification. Finally, there is a last column elapsed_time which is a variable with one observation per row – also conforming to tidy data specification. Thus, single occasion between subject data like this conforms to the tidy data specification. There is usually nothing you need to do to convert between-participant data (or cross-sectional data) to be in a tidy data format. TABLE 7.1: Between participant data entered one row per participant id sex elapsed_time 1 male 40 2 female 35 3 male 38 4 female 33 5 male 42 6 female 36 Within participant data. Consider Table 7.2 which illustrates within participant data for six human participants running 5 kilometers - but on three different occasions. The first column is id, which indicates there are six unique participants and provides an identification number for each of them. The second column is sex, which is a variable, and there is one observation per for row, so sex also conforms to the tidy data specification. Next, there are three different columns (march, may, july) each of which contains elapsed time (in minutes) for the runner in a different month. Elapsed run times are spread out over three columns so elapse_time is not in a tidy data format. Moreover, it’s not clear from the data file that march, may, and july are levels of a variable called occasion. Nor is it clear that elapsed_times are recorded in each of those columns (i.e., the dependent variable is unknown/not labeled). Although this format is fine as a data entry format it clearly has problems associated with it when it comes time to analyze your data. TABLE 7.2: Within participant data entered one row per participant id sex march may july 1 male 40 37 35 2 female 35 32 30 3 male 38 35 33 4 female 33 30 28 5 male 42 39 37 6 female 36 33 31 TABLE 7.3: A tidy data version of the within participant data id sex occasion elapsed_time 1 male march 40 1 male may 37 1 male july 35 2 female march 35 2 female may 32 2 female july 30 3 male march 38 3 male may 35 3 male july 33 4 female march 33 4 female may 30 4 female july 28 5 male march 42 5 male may 39 5 male july 37 6 female march 36 6 female may 33 6 female july 31 Thus, a major problem with entering repeated measures data in the one row per person format is that there are hidden variables in the data and you need insider knowledge to know what the columns represent. That said, this is not necessarily a terrible way to enter your data as long as you have all of this missing information documented in a data code book. Disadvantages one row per participant Advantages one row per participant 1) Predictor variable (occasion) is hidden and spread over multiple columns 1) Easy to enter this way 2) Unclear that each month is a level of the predictor variable occasion 3) Dependent variable (elapsed_time) is not indicated 4) Unclear that elapsed_time is the measurement in each month column Fortunately, the problems with Table 7.2 can be largely resolved by converting the data to the a tidy data format. This can be done with the pivot_long() command that we will learn about in the Cookbook chapter. Thus, we can enter the data in the format of Table 7.2 and later convert it to a tidy data format. After this conversion the data will be appear as in Table 7.3. For elapsed_time variable this data is now in the tidy data format. Each row corresponds to a single elapsed_time observed. Each column corresponds to a single variable. Somewhat problematically, however, sex is repeated three times for each person (i.e., over the three rows) - and this can be confusing. However, if the focus in on analyzing elapsed time this tidy data format makes sense. Importantly, there is an id column for each participant so R knows that this information is repeated for each participant and is not confused by repeating the sex designation over three rows. Indirectly, this illustrates the importance of having an id column to indicate each unique participant. Why did we walk you through this technical treatment of structuring data at this point in time - so that you pay attention to the advice that follows. You can see at this point that you may well need to restructure your data for certain analyses. The ability to do so quickly and easily depends upon following the advice in this chapter around naming conventions for variables and other aspects of your analyses. You can imagine the challenges for converting the data in Figure 7.2 to the data in Figure 7.3 by hand. You want to be able to automate that process and others - which is made substantially easier if you follow the forthcoming advice about naming conventions in the tidyverse. 7.4 Data collection considerations Data can be collected in a wide variety of ways. Regardless of the method of data collection researchers typically come to data in one of two ways: 1) a research assistant enters the data into a spreadsheet type interface, or 2) the data is obtained as the output from computer software (e.g., Qualtrics, SurveyMonkey, Noldus, etc.). Regardless of the approach, it is critical to name your variables appropriately. For those using software, such as Qualtrics, this means setting up the software to use appropriate variable names PRIOR to data collection - so the exported file has desirable column names. For spreadsheet users, this means setting up the spreadsheet in which the data will be recorded with column names that are amenable to the future analyses you want to conduct. Although failure to take this thoughtful approach at the data collection stage can be overcome - it is only overcome with substantial manual effort. Therefore, as noted previously, we strongly encourage you to follow the naming conventions we espouse here when you set up your data recording regime. Additionally, we encourage you to give careful thought in advance to the codes you will use to record missing data. 7.4.1 File naming conventions I strongly suggest you check out these excellent slides by Danielle Navarro on file name convention best practices. 7.4.2 Data column naming conventions To make your life easier down the road, it is critical you set up your spreadsheet or online survey such that it uses a naming convention prior to data collection. The naming conventions suggested here are adapted from the tidyverse style guide. Lowercase letters only If using multiple words in a name (a good idea), only use the underscore (“_“) character to separate words in the name. Avoid short decontextualized variable names like q1, q2, q3, etc. Do use moderate length column names. Aim to achieve a unique prefix for related columns so that those columns can be selected using the starts_with() command discussed in the previous chapter. Be sure to avoid short two or three letter prefixes for item names. Instead, use unique moderate length item prefixes so that it will be easy to select those columns using start_with() such that you don’t accidentally get additionally columns you don’t want - that have a similar prefix. Likert items. Be sure to indicate the following information in the name of each Likert item or you will make your life substantially more complicated when you start to analyze your data. The information to include: a) the name of the measure, b) the item number for the measure, c) that it is a Likert item, d) the number of Likert response options, and e) whether the item is reverse keyed. That’s five things to include in each Likert item name. But it’s easy to do so. Consider two “affective commitment” items, the 2nd and 3rd items on scale. Both items use a 5-point Likert response format. However, item 3 is reverse keyed. Names that conform to this convention are: aff_com3_likert5, aff_com3_likert5rev. Using this naming convention ensures you can easily select and convert the items later. You can select by “likert5,” “likert5rev” or select by “aff_com.” If you have a column name that represents the levels of two repeated measures variables only use the underscore character to separate the levels of the different variables. See within-participant ANOVA section below for details. Column content. Avoid numerical representation of categorical variables. Don’t use 1 or 2 to represent a variable like sex. Use male and female in your spreadsheet - likewise in your survey program. Similarly, for between participant variables like drug_condition don’t use 1 or 2 use “drug” and “placebo” but the actual drug name would be even better than the word “drug.” Following this approach ensure the data can “stand alone” for resuse by others (especially if a data codebook (example) is not provided.) Note you will covert categorical variables such as sex (male/female) to numeric representations in your script - but then it will be clear what each value means. 7.4.3 Likert-type items A Likert-type item is typically composed of a statement with which participants are asked to agree or disagree. For example, participants could be asked to indicate the extent to which they agree with a number of statements such as “I like my job.” Then they would be presented with response scale such as: 1 - Strongly Disagree, 2 - Moderately Disagree, 3 - Neutral, 4, Moderately Agree, 5 - Strongly Agree. A common question is, how should I enter the data? Export text responses not numbers Software such as Qualtrics gives you the option of exporting the label (e.g., “Strongly Agree”) or a value (e.g., 1). Make sure you export the text lable (“Strongly Agree). That way, the data file stands alone - and doesn’t require additional knowledge to know what 1 means. You can easily convert the labels to numbers later. High numbers should be associated with more of the construct being measured. When designing your survey or data collection tools, it is important that you set the response options appropriately. If your scale measures job satisfaction, it is important that you collect data in a manner that ensures high numbers on the job satisfaction scale indicate high levels of job satisfaction. Therefore, assigning numbers makes sense using the 5-point scale: 1 - Strongly Disagree, 2 - Moderately Disagree, 3 - Neutral, 4, Moderately Agree, 5 - Strongly Agree. With this approach high response numbers indicate more job satisfaction. However, using the opposite scale would not make sense: 1 - Strongly Agree, 2 - Moderately Agree, 3 - Neutral, 4, Moderately Disagree, 5 - Strongly Disagree. With this opposite scale high numbers on a job satisfaction scale would indicate lower levels of job satisfaction - a very confusing situation. Avoid this situation, assign numbers so that higher numbers are associated with more of the construct being measured. Use appropriate item names. As described in the naming convention section, use moderate length names with different labels for each subscale. Use moderate length column names unique to each subscale. Imagine you have a survey with an 18-item commitment scale (Meyer, Allen, and Smith 1993) composed of three 6-item subscales: affective, normative, and continuance commitment. It would be a poor choice to prefix the labels of all 18 columns in your data with “commit” such that the names would be commit1, commit2, commit3, etc. The problem with this approach is that it fails to distinguish among the three subscales in naming convention; making it impossible to select the items for a single subscale using starts_with(). A better, but still poor choice for a naming convention would be use use a two letter prefix for the three scale such ac, nc, and cc. This would result in names for the columns like ac1, ac2, ac3, etc. This is an improvement because you could apparently (but likely not) select the columns using starts_with(“ac”). The problem with these short names is that there could be many columns in data set that start with “ac” beside the affective commitment items. You might want to select the affective commitment items using starts_with(“ac”); but you would get all the affective commitment item columns; but also all the columns measuring other variables that also start with “ac.” Therefore, it’s a good idea to use a moderate length unique prefix for column names. For example, you might use prefixes like affect_com, norm_com, and contin_com for the three subscales. But see below because you need to include more than this in each name. Indicate these 5 things in each Likert item name. Be sure to indicate the following information in the name of each Likert item or you will make your life substantially more complicated when you start to analyze your data. The information to include: 1) the name of the measure, 2) the item number for the measure, 3) that it is a Likert item, 4) the number of Likert response options, and 5) whether the item is reverse keyed. That’s five things to include in each Likert item name. But it’s easy to do so. Consider two “affective commitment” items, the 2nd and 3rd items on scale. Both items use a 5-point Likert response format. However, item 3 is reverse keyed. Names that conform to this convention are: aff_com2_likert5, aff_com3_likert5rev. Using this naming convention ensure you can easily select and convert the items later. You can select by “likert5,” “likert5rev” or select by “aff_com” (or both). Indicate in the item name if the item is reversed keyed. Sometimes with Likert-type items, an item is reverse keyed. For example, on a job satisfaction scale, participants will typically respond to items that reflect job satisfaction using the scale: 1 - Strongly Disagree, 2 - Moderately Disagree, 3 - Neutral, 4, Moderately Agree, 5 - Strongly Agree. Higher numbers indicate more job satisfaction. Sometimes, however, some items will use the same 1 to 5 response scale but be worded in the opposite manner such as “I hate my job.” Responding with a 5 to this item would indicate high job dissatisfaction. But the columns for job satisfaction items should have high values that indicate high job satisfaction not high job dissatifaction. Consequently, we flag the names of columns with reversed responses (i.e., reverse-key items) so that we know to treat those column differently later. Columns with reverse-keyed items need to be processed by a script so that the values are flipped and scored in the right direction. The procedure for doing so is outlined in the next point. Indicate in the item name the range for reverse-key items. If an item is reverse keyed, the process for the flipping the scores depends upon the range of a scale. Although 5-point scales are common, any number of points are possible. The process for correcting a reverse-key item depends upon: 1) the number of points on the scale, and 2) the range of the points on the scale. The reverse-key item correction process is different for an item that uses a 5-point scale ranging from 1 to 5 versus from 0 to 4. Both are 5-point scales but your correction process will be different. Therefore, for reverse-key items add a suffix at the end of each item name that indicates an item is reverse keyed and the range of the item. For example, if the third job satisfaction item was reversed keyed on scale using a 1 to 5 response format you might name the item: job_sat3_likert5rev. The suffix “_likert5rev” indicates the item is Likert item that is reverse keyed and the range of responses used on the item is 1 to 5. Be sure to set up your survey with this naming convention when you collect your data. If you collect items over multiple time points use a prefix with a short code to indicate the time followed by an underscore. For example, if you had a multi-item self-esteem scale you might call the column for the first time “t1_esteem1_likert5rev.” This indicate that you have for time 1 (t1), the first self-esteem item (esteem1) and that item is a likert item that is reverse keyed on a 1 to 5 scale. 7.5 Example: Single Occassion Survey This section outlines a workflow appropriate for when you have cross-sectional single occasion survey data. Examples for other designs are presented in the Cookbook chapter. The data corresponds to a design where the researcher has measured, age, sex, eye color, self-esteem, and job satisfaction. Two of these, self-esteem and job satisfaction, were measured with multi-item scales with reverse-keyed items. To Begin: Use the Files tab to confirm you have the data: data_item_scoring.csv Start a new script for this example. Don’t forget to start the script name with “script_.” # Date: YYYY-MM-DD # Name: your name here # Example: Single occasion survey # Load data library(tidyverse) my_missing_value_codes &lt;- c(&quot;-999&quot;, &quot;&quot;, &quot;NA&quot;) raw_data_survey &lt;- read_csv(file = &quot;data_item_scoring.csv&quot;, na = my_missing_value_codes) ## Rows: 300 Columns: 14 ## ── Column specification ──────────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (2): sex, eye_color ## dbl (12): id, age, esteem1_likert5, esteem2_likert5, est... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. We load the initial data into a raw_data_survey but immediately make a copy we will work with called analytic_data_survey. It’s good to keep a copy of the raw data for reference if you encounter problems. analytic_data_survey &lt;- raw_data_survey Remove empty row and columns from your data using the remove_empty_cols() and remove_empty_rows(), respectively. As well, clean the names of your columns to ensure they conform to tidyverse naming conventions. library(janitor) ## ## Attaching package: &#39;janitor&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## chisq.test, fisher.test # Initial cleaning analytic_data_survey &lt;- analytic_data_survey %&gt;% remove_empty(&quot;rows&quot;) %&gt;% remove_empty(&quot;cols&quot;) %&gt;% clean_names() You can confirm the column names following our naming convention with the glimpse command - and see the data type for each column. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22,… ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;fema… ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;brown&quot;, &quot;hazel&quot;, &quot;blue… ## $ esteem1_likert5 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3… ## $ esteem2_likert5 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2… ## $ esteem3_likert5 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, … ## $ esteem4_likert5 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, N… ## $ esteem5_likert5rev &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2,… ## $ jobsat1_likert5 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3… ## $ jobsat2_likert5rev &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, … ## $ jobsat3_likert5 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, … ## $ jobsat4_likert5 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4,… ## $ jobsat5_likert5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, … 7.5.1 Creating factors Following initial cleaning, we identify categorical variables as factors. If you plan to conduct an ANOVA - it’s critical that all predictor variables are converted to factors. Inspect the glimpse() output - if you followed our data entry naming conventions, categorical variables should be of the type character. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22,… ## $ sex &lt;chr&gt; &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;fema… ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;brown&quot;, &quot;hazel&quot;, &quot;blue… ## $ esteem1_likert5 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3… ## $ esteem2_likert5 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2… ## $ esteem3_likert5 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, … ## $ esteem4_likert5 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, N… ## $ esteem5_likert5rev &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2,… ## $ jobsat1_likert5 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3… ## $ jobsat2_likert5rev &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, … ## $ jobsat3_likert5 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, … ## $ jobsat4_likert5 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4,… ## $ jobsat5_likert5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, … We have two variables, sex and eye_color, that are categorical variable of type character (i.e., chr). The participant id column is categorical as well, but of type double (i.e., dbl) which is a numeric column. You can quickly convert all character columns to factors using the code below: analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(across(.cols = c(sex, eye_color), .fns = as_factor)) The participant identification number in the id column is a numeric column, so we have to handle that column on its own. analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(id = as_factor(id)) You can ensure all of these columns are now factors using the glimpse() command. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, … ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22,… ## $ sex &lt;fct&gt; male, female, male, female, mal… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, h… ## $ esteem1_likert5 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3… ## $ esteem2_likert5 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2… ## $ esteem3_likert5 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, … ## $ esteem4_likert5 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, N… ## $ esteem5_likert5rev &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2,… ## $ jobsat1_likert5 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3… ## $ jobsat2_likert5rev &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, … ## $ jobsat3_likert5 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, … ## $ jobsat4_likert5 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4,… ## $ jobsat5_likert5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, … Inspect the output of the glimpse() command and make sure you have converted all categorical variables to factors - especially those you will use as predictors. Note: If you have factors like sex that have numeric data in the column (e.g, 1 and 2) instead of male/female you need to handle the situation differently. The preceding section, Experiment: Within N-way, illustrates how to handle this scenario. 7.5.2 Factor screening Inspect the levels of each factor carefully. Make sure the factor levels of each variable are correct. Examine spelling and look for additional unwanted levels. For example, you wouldn’t want to have the following levels for sex: male, mmale, female. Obviously, mmale is an incorrectly typed version of male. Scan all the factors in your data for erroneous factor levels. The code below displays the factor levels: analytic_data_survey %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex eye_color ## 1 : 1 male :147 blue : 99 ## 2 : 1 female :149 brown: 98 ## 3 : 1 intersex: 2 hazel:100 ## 4 : 1 NA&#39;s : 2 NA&#39;s : 3 ## 5 : 1 ## 6 : 1 ## (Other):294 Also inspect the output of the above summary() command paying attention to the order of the levels in the factors. The order influences how text output and graphs are generated. In these data, the sex column has two levels: male and female in that order. Below we adjust the order of the sex variable because we want the x-axis of a future graph to display columns in the left to right order: female, male. analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(sex = fct_relevel(sex, &quot;intersex&quot;, &quot;female&quot;, &quot;male&quot;)) For eye color, we want a future graph to have the most common eye colors on the left so we reorder the factor levels: analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(eye_color = fct_infreq(eye_color)) You can see the new order of the factor levels with summary(): analytic_data_survey %&gt;% select(where(is.factor)) %&gt;% summary() ## id sex eye_color ## 1 : 1 intersex: 2 hazel:100 ## 2 : 1 female :149 blue : 99 ## 3 : 1 male :147 brown: 98 ## 4 : 1 NA&#39;s : 2 NA&#39;s : 3 ## 5 : 1 ## 6 : 1 ## (Other):294 7.5.3 Numeric screening For numeric variables, it’s important to find and remove impossible values. For example, in the context of this example you want to ensure none of the Likert responses are impossible (e.g., outside the 1- to 5-point rating scale) or clearly data entry errors. Because we have several numeric columns that we are screening, we use the skim() command from the skimr package. The skim() command quickly provides basic descriptive statistics. In the output for this command there are also several columns that begin with p: p0, p25, p50, p75, and p100 (p25 and p75 omitted in output due to space). These columns correspond to the 0th, 25th, 50th, 75th, and 100th percentiles, respectively. The minimum and maximum values for the data column are indicated under the p0 and p100 labels. The median is the 50th percentile (p50). The interquartile range is the range between p25 and p75. Start by examining the range of non-scale items. In this case it’s only age. Examine the output to see if any of the age values are unreasonable. As noted, in the output p0 and p100 indicate the 0th percentile and the 100th percentile; that is the minimum and maximum values for the variable. Check to make sure none of the age values are unreasonably low or high. If they are, you may need to check the original data source or replace them with missing values. library(skimr) analytic_data_survey %&gt;% select(age) %&gt;% skim() ## skim_variable n_missing mean sd p0 p50 p100 ## 1 age 3 20.52 2.05 17 20 24 With respect to the multi-item scales, it makes sense to look at sets of items rather than all of the items at once. This is because sometimes items from different scales use different response ranges. For example, one measure might use a response scale with a range from 1 to 5; whereas another measure might use a response scale with a range from 1 to 7. This is undesirable from a psychometric point of view, as discussed previously, but if it happens in your data - look at the scale items separately to make it easy to see out of range values. We begin by looking at the items in the first scale, self-esteem. Possible items responses for this scale range from 1 to 5; make sure all responses are in this range. If any values fall outside this range, you may need to check the original data source or replace them with missing values - as described previously. analytic_data_survey %&gt;% select(starts_with(&quot;esteem&quot;)) %&gt;% skim() ## skim_variable n_missing mean sd p0 p50 p100 ## 1 esteem1_likert5 24 3.39 0.54 3 3 5 ## 2 esteem2_likert5 28 2.35 0.48 2 2 3 ## 3 esteem3_likert5 31 3.96 0.37 3 4 5 ## 4 esteem4_likert5 15 3.54 0.50 3 4 4 ## 5 esteem5_likert5rev 35 2.22 0.47 1 2 3 Follow the same process for the job satisfaction items. Write that code on your own now. Possible item responses for the job satisfaction scale range from 1 to 5, make sure all responses are in this range. If any values fall outside this range, you may need to check the original data source or replace them with missing values - as described previously. analytic_data_survey %&gt;% select(starts_with(&quot;jobsat&quot;)) %&gt;% skim() ## skim_variable n_missing mean sd p0 p50 p100 ## 1 jobsat1_likert5 25 3.34 0.51 3 3 5 ## 2 jobsat2_likert5rev 27 1.51 0.61 1 1 3 ## 3 jobsat3_likert5 28 2.84 0.37 2 3 3 ## 4 jobsat4_likert5 35 4.29 0.70 3 4 5 ## 5 jobsat5_likert5 24 4.57 0.61 3 5 5 7.5.4 Scale scores For each person, scale scores involve averaging scores from several items to create an overall score. The first step in the creation of scales is correcting the values of any reverse-keyed items. 7.5.4.1 Reverse-key items The way you deal with reverse-keyed items depends on how you scored them. Imagine you had a 5-point scale. You could have scored the scale with the values 1, 2, 3, 4, and 5. Alternatively, you could have scored the scale with the values 0, 1, 2, 3, and 4. The mathematical approach you use to correcting reverse-keyed items depends upon whether the scale starts with 1 or 0. In this example, we scored the data using the value 1 to 5; so that is the approach illustrated here. See the extra information box for details on how to fixed reverse-keyed items when the scale begins with zero. In this data file all the reverse-keyed items were identified with the suffix “_likert5rev” in the column names. This suffix indicates the item was reverse keyed and that the original scale used the response points 1 to 5. We can see those items with the glimpse() command below. Notice that there are two reverse-keyed items - each on difference scales. analytic_data_survey %&gt;% select(ends_with(&quot;_likert5rev&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 2 ## $ esteem5_likert5rev &lt;dbl&gt; 2, 2, 2, 2, 2, NA, NA, 2, 2, 2,… ## $ jobsat2_likert5rev &lt;dbl&gt; 1, 1, 1, NA, 1, 1, 2, 1, 2, 2, … To correct a reverse-keyed item where the lowest possible rating is 1 (i.e, 1 on a 1 to 5 scale), we simply subtract all the scores from a value one more than the highest point possible on the scale (i.e., one more than 5). For example, if a 1 to 5 response scale was used we subtract each response from 6 to obtain the recoded value. Original value Math Recoded value 1 6 - 1 5 2 6 - 2 4 3 6 - 3 3 4 6 - 4 2 5 6 - 5 1 The code below: selects columns that end with “_likert5rev” (i.e., both esteem and jobsat scales) subtracts the values in those columns from 6 renames the columns by removing “_likert5rev” from the name because the reverse coding is complete analytic_data_survey &lt;- analytic_data_survey %&gt;% mutate(6 - across(.cols = ends_with(&quot;_likert5rev&quot;)) ) %&gt;% rename_with(.fn = str_replace, .cols = ends_with(&quot;_likert5rev&quot;), pattern = &quot;_likert5rev&quot;, replacement = &quot;_likert5&quot;) You can use the glimpse() command to see the result of your work. If you compare these new values to those obtained from the previous glimpse() command you can see they have changed. Also notice the column names no longer indicate the items are reverse keyed. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 14 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,… ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17… ## $ sex &lt;fct&gt; male, female, male, female, male, … ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, haze… ## $ esteem1_likert5 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4… ## $ esteem2_likert5 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2… ## $ esteem3_likert5 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, … ## $ esteem4_likert5 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, … ## $ esteem5_likert5 &lt;dbl&gt; 4, 4, 4, 4, 4, NA, NA, 4, 4, 4, 3,… ## $ jobsat1_likert5 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4… ## $ jobsat2_likert5 &lt;dbl&gt; 5, 5, 5, NA, 5, 5, 4, 5, 4, 4, 3, … ## $ jobsat3_likert5 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, … ## $ jobsat4_likert5 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA… ## $ jobsat5_likert5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, … If your scale had used response options numbered 0 to 4 the math is different. For each item you would use subtract values from the highest possible point (i.e, 4) instead of one larger than the highest possible point. Original value Math Recoded value 0 4 - 0 4 1 4 - 1 3 2 4 - 2 2 3 4 - 3 1 4 4 - 4 0 Thus, the mutate command would instead be: mutate(4 - across(.cols = ends_with(“_likert5rev”)) ) 7.5.4.2 Creating scores The process we use for creating scale scores deletes item-level data from analytic_data_survey. This is a desirable aspect of the process because it removes information that we are no longer interested in from our analytic data. That said, before we create scale score, we create a backup on the item-level data called analytic_data_survey_items. We will need to use this backup later to compute the reliability of the scales we are creating. analytic_data_survey_items &lt;- analytic_data_survey We want to make a self_esteem scale and plan to select items using starts_with(“esteem”). But prior to doing this we make sure the start_with() command only gives us the items we want - and not additional unwanted items. The output below confirms there are not problems associated with using starts_with(“esteem”). analytic_data_survey %&gt;% select(starts_with(&quot;esteem&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 5 ## $ esteem1_likert5 &lt;dbl&gt; 3, 4, 4, 3, 3, 3, 3, 4, 4, 4, 3, 4… ## $ esteem2_likert5 &lt;dbl&gt; 2, 3, 3, 2, 2, 3, 2, 3, 3, 3, 2, 2… ## $ esteem3_likert5 &lt;dbl&gt; 4, 4, 4, 3, 4, 4, NA, 4, 4, 3, 4, … ## $ esteem4_likert5 &lt;dbl&gt; 3, 4, 4, 3, 4, 4, 4, 4, 3, 4, NA, … ## $ esteem5_likert5 &lt;dbl&gt; 4, 4, 4, 4, 4, NA, NA, 4, 4, 4, 3,… Likewise, we want to make a job_sat scale and plan to select items using starts_with(“jobsat”). The code and output below using starts_with(“jobsat”) only returns the items we are interested in. analytic_data_survey %&gt;% select(starts_with(&quot;jobsat&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 5 ## $ jobsat1_likert5 &lt;dbl&gt; 3, 5, 4, 3, 3, 3, 3, 5, 3, 3, 3, 4… ## $ jobsat2_likert5 &lt;dbl&gt; 5, 5, 5, NA, 5, 5, 4, 5, 4, 4, 3, … ## $ jobsat3_likert5 &lt;dbl&gt; 3, NA, 3, 3, 3, 3, 3, 3, 3, 3, 3, … ## $ jobsat4_likert5 &lt;dbl&gt; NA, 5, 5, 4, 4, 4, 4, 5, NA, 4, NA… ## $ jobsat5_likert5 &lt;dbl&gt; 5, NA, 5, 4, 5, 4, 4, 5, 5, 5, 4, … We calculate the scale scores using the rowwise() command. The mean() command provides the mean of columns by default - not people. We use the rowwise() command in the code below to make the mean() command work across columns (within participants) rather than within columns. The mutate command calculates the scale score for each person. The c_across() command combined with the starts_with() command ensures the items we want averaged together are the items that are averaged together. Notice there is a separate mutate line for each scale. The ungroup() command turns off the rowwise() command. We end the code block by removing the item-level data from the data set. Important: Take note of how we name the scale variables (e.g., self_esteem, job_sat). We use a slightly different convention than our items. That is, these scale labels were picked so that they would not be selected by a starts_with(“esteem”) or starts_with(“jobsat”). Why - because we later use those commands to remove the item-level data. We would not want the command designed to remove the item-level data to also remove the scale we just calculated! This example illustrates how carefully you need to think about your naming conventions. analytic_data_survey &lt;- analytic_data_survey %&gt;% rowwise() %&gt;% mutate(self_esteem = mean(c_across(starts_with(&quot;esteem&quot;)), na.rm = TRUE)) %&gt;% mutate(job_sat = mean(c_across(starts_with(&quot;jobsat&quot;)), na.rm = TRUE)) %&gt;% ungroup() %&gt;% select(-starts_with(&quot;esteem&quot;)) %&gt;% select(-starts_with(&quot;jobsat&quot;)) We can see our data now has the self_esteem column, a job_sat column, and that all of the item-level data has been removed. glimpse(analytic_data_survey) ## Rows: 300 ## Columns: 6 ## $ id &lt;fct&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,… ## $ age &lt;dbl&gt; 23, 22, 18, 23, 22, 17, 23, 22, 17, NA… ## $ sex &lt;fct&gt; male, female, male, female, male, fema… ## $ eye_color &lt;fct&gt; blue, brown, hazel, blue, NA, hazel, b… ## $ self_esteem &lt;dbl&gt; 3.200, 3.800, 3.800, 3.000, 3.400, 3.5… ## $ job_sat &lt;dbl&gt; 4.00, 5.00, 4.40, 3.50, 4.00, 3.80, 3.… You now have two data sets analytic_data_survey and analytic_data_survey_items. You can calculate descriptive statistics, correlations and most analyses using the analytic_data_survey. To obtain the reliability of the scales you just created though you will need to use the analytic_data_survey_items. Both sets of data are ready for analysis. References "],["regression-and-correlation.html", "Chapter 8 Regression and correlation 8.1 Population example 8.2 Consider a sample 8.3 Comparing correlations", " Chapter 8 Regression and correlation The following CRAN packages must be installed: Required CRAN Packages tidyverse apaTables cocor janitor psych Required Data data_cor_sample_video_game.csv 8.1 Population example Consider the following the scenario, we want to examine the extent to which IQ predicts video game scores for people who live in the City of Guelph. We want to make conclusions about people who live in the City of Guelph so we refer to Guelph citizens as our population. Because we are interested in using IQ to predict video game score we refer to IQ as the predictor. The value being predicted is video game score and we refer to that variable as the criterion (i.e., the dependent variable). Imagine, for a moment, that we are actually able to get an IQ and a video game score for everyone in the City of Guelph (N = 100,000). 8.1.1 No predictor We illustrate the range and variability of video game scores for everyone in the population below. There are 100,000 blue dots on this graph. Each blue dot represents a person in the population. The vertical position of the dot indicates each person’s video game. Notice the large number of dots (i.e., people) - there are so many that it’s hard to see individual dots/people. The dots illustrate the range of video game scores - everyone did not obtain the same score. We want to try to understand why, in this population, some people have higher vs lower video game scores. Said another way, we want to explain, for this population, the variability in video game scores. Correlation/regression can never provide evidence of causation (or explanation) but we can use those analyses to find a pattern in our data that is consistent with a causal relation. Then we conduct a second experimental study to determine if their really is a causal relation. Without a predictor variable, our best estimate of a person’s video game score is the population mean. Moreover, without a predictor, we have the same estimate for everyone in the population - the mean video game score for the population. We have no way of creating an individualized estimate of someone’s video game score. The mean video game score is illustrated in the figure below with a horizontal green line. 8.1.2 Weak relation We can plot a variable (e.g., extraversion) against video game score to see if there is a relation between the two. In this case there doesn’t appear to be a relation. Indeed, this graph illustrates a zero correlation between extraversion and video game scores - the weakest possible relation for a predictor. Effectively, there is no linear relation between extraversion and video game scores. As before, we place a horizontal green line on the graph to indicate the mean video game score. We also place a red regression line (i.e., best-fit line) on the graph; however, the red line is completely hidden by the green line representing the mean video game score. In this case, with these data, knowing a person’s extraversion score does not allow us to provide an individualized estimate of a person’s video game score. As a result, extraversion does not help us explain the variability in video game scores. That is, extraversion scores do not allow us to explain why some people have high video game score whereas other people have low video game scores. 8.1.3 Strong relation What if we were to try another variable – like IQ? The graph below illustrates a positive linear relation between IQ and video game score. As before, we place a green horizontal line on the graph to indicate the population mean. Additionally, we place a red regression line (i.e., a best-fit line) on the graph. This red regression line represents, for each person, an individualized estimate of video game score based on their IQ. The population-level regression line has the slope 8.00; which indicate that as IQ increase by 1.0 point video game score increases by 8.00 points. The equation for the regression line is: \\[ \\begin{aligned} \\widehat{score} &amp;= 8.00(IQ) + 200.31 \\end{aligned} \\] Or using the more generic X/Y notation: \\[ \\begin{aligned} \\hat{Y} &amp;= 8.00(X) + 200.31 \\\\ \\end{aligned} \\] You can see in the graph below that, for some people, the individualized estimate of video game score (i.e., the y-axis position of the red line) is higher than the population mean. That is, in some cases the red regression is line is higher than the green line for the population mean. For other people, the individualized estimate of video game score (i.e., the y-axis position of the red line) is lower than the population mean. That is, in some cases the red regression is line is lower than the green line for the population mean. It appears that individuals with a high IQ tend to have a high video game score whereas individuals with a low IQ tend of have a low video game score. The regression line provides a more nuanced estimate for individual’s video game score than you can obtain by simply using the same estimation (i.e., the population mean) for everyone. But how good is this model of the data? There are a variety of way of assessing model fit. We present two below. First, when you are only concerned about how well a single predictor performs, as is the case here, you can use a correlation. The symbol for the population correlation is \\(\\rho\\). In these data, \\(\\rho = .60\\). The correlation coefficient can range from -1 to 1. The further the correlation is from zero - the stronger the relation between the predictor and the criterion. That is, the further the correlation is from zero the better a linear model fits the data. A positive correlation indicates that as one variable increases the other variable also increases. A negative correlation indicates that as one variable increases the other variable decreases. Cohen’s benchmarks are below: Cohen (1988) Label Value Small \\(\\rho\\) = .10 Medium \\(\\rho\\) = .30 Large \\(\\rho\\) = .50 An alternative, and more general, means of assessing the quality of statistical model is to use \\(R^2\\). This indexes the proportion of video game scores that are accounted for by a statistical model. One important attribute of \\(R^2\\) is that can be used when there are multiple predictors. When there is only one predictor, \\(R^2\\) is simply the correlation squared. Thus, at the population level, when there is only one predictor: \\[ \\begin{aligned} R^2 = \\rho^2 \\end{aligned} \\] To summarize, the population-level values (i.e., parameters): Slope = 8.00 \\(\\rho = .60\\) \\(R^2 = .36\\) In the next section we use sample-level data to estimate these population-level values. 8.2 Consider a sample Unfortunately, we never/rarely have data for everyone in the population (in this example everyone in the City of Guelph). Consequently, we usually have to select a subset of the population as a sample and use sample data for our analyses. In the figure below there are 100,000 blue dots - each dot represents an individual in the population. Additionally, there are also 9 black dots. These black dots are a random subset of the population – our sample. We will use the data from our sample (i.e., the 9 black dots) to estimate the slope, correlation, and \\(R^2\\) for the population (i.e., the 100,000 blue dots). We always need to remember the values calculated from our sample (statistics) are only estimates of the population-level parameters; estimates that are likely are likely to differ from population parameters due to sampling error. Let’s look at our sample in more detail. Notice, in the figure below, that there is one data point (\\(X_i\\), \\(Y_i\\)) for each of the 9 people. We illustrate the mean video game score for the 9 people with the horizontal green line. We can calculate the variance of the video game scores using the formula below. \\[ \\begin{aligned} s^2_{score} = \\frac{\\sum{(Y_i - \\bar{Y})^2}}{N-1} \\end{aligned} \\] It’s often useful to just focus on the numerator of this equation. We call this Sum of Squares Total (SSR): \\[ \\begin{aligned} SS_{Total} = \\sum{(Y_i - \\bar{Y})^2} \\end{aligned} \\] The values used in the Sum of Squares Total calculation are illustrated in the figure below. The vertical blue line indicates the difference between \\(Y_i\\) and \\(\\bar{Y}\\). The \\(SS_{Total}\\) value indexes the variability of the actual video game scores around the sample mean. In the figure below we add the regression line in red. The regression line is a statistical model for the data (a best-fit line). The regression line will always run through the joint mean of the two variables (i.e., the [\\(\\bar{X}\\), \\(\\bar{Y}\\)] point). Recall that the regression line represents an individualized estimate of each person’s video game score derived from their IQ (via the regression equation). Later we will show you how to calculate the regression line. For now, accept that the regression equation for the sample in standard notation is: \\[ \\begin{aligned} \\hat{Y_i} &amp;= 9.44(X_i) -21.21 \\\\ \\end{aligned} \\] And contextualized to the variable names is: \\[ \\begin{aligned} \\widehat{score_i} &amp;= 9.44(IQ_i) -21.21 \\end{aligned} \\] Therefore, the predicted value for Jane is: \\[ \\begin{aligned} \\widehat{score_i} &amp;= 9.44(IQ_i) -21.21 \\\\ &amp;= 9.44(71) - 21.21 \\\\ &amp;= 649 \\text{(rounded)} \\\\ \\end{aligned} \\] You can see this calculation for everyone in the sample: In the graph below each person is represented by a blue dot. The estimate of each person’s video game score, \\(\\hat{Y_i}\\), derived from the regression equation, is indicated by a red dot on the red regression line. The vertical blue lines are used to indicate, for each person (i.e., blue dot, \\(Y_i\\)), the estimate of their video game score (i.e., red dot, \\(\\hat{Y_i}\\)). We can calculate the extent to which individualized estimates are better than the sample mean for modeling the data. That is, we can calculate the extent to which the regression line is better at modeling the data than the mean line. We do so by calculating the extent to which the individualized estimates on the regression line differ from the sample mean. This is done with the calculation below for the Sum of Squares Regression. \\[ \\begin{aligned} SS_{Regression} = \\sum{(\\hat{Y_i} - \\bar{Y})^2} \\end{aligned} \\] The values used in the Sum of Squares Regression calculation are illustrated in the figure below. The vertical red line indicates the difference between \\(\\hat{Y_i}\\) and \\(\\bar{Y}\\). The \\(SS_{Regression}\\) value indexes the variability of the estimates of video game scores around the sample mean. The longer the vertical red line (i.e., the larger the \\((\\hat{Y_i} - \\bar{Y})\\) difference) the better the model. Longer vertical red lines are associated with models that do a better job of accounting for variability in video scores. So far we have calculated two values, \\(SS_{Regression}\\) and \\(SS_{Total}\\). The \\(SS_{Total}\\) value indexes the variability of actual video game scores about the sample mean (it’s the numerator for the variance calculation). In contrast, \\(SS_{Regression}\\) indexes the variability of estimated video game scores about the sample mean. We can calculate the proportion of the variability in actual scores accounted for the statistical model (i.e., regression line) using \\(R^2\\): \\[ \\begin{aligned} R^2 = \\frac{SS_{Regression}}{SS_{Total}} \\end{aligned} \\] We can also think of this as in terms of variance (because N-1 terms cancel each other out). \\[ \\begin{aligned} R^2 &amp;= \\frac{\\text{Variance of predicted scores}}{\\text{Variance of actual scores}} \\\\ &amp;= \\frac{\\frac{\\sum{(\\hat{Y_i} - \\bar{Y})^2}}{N-1}}{\\frac{\\sum{(Y_i - \\bar{Y})^2}}{N-1}} \\\\ &amp;= \\frac{\\sum{(\\hat{Y_i} - \\bar{Y})^2}}{\\sum{(Y_i - \\bar{Y})^2}} \\\\ &amp;= \\frac{SS_{Regression}}{SS_{Total}}\\\\ \\end{aligned} \\] 8.2.1 Regression Let’s obtain the actual value for \\(R^2\\), as well as the slope, using R. We can obtain the regression model (i.e.. linear model or lm) using the command below: lm_object &lt;- lm(video_game ~ iq, data = sample_data) We display the result using apaTables: library(apaTables) apa.reg.table(lm_object, table.number = 1, filename = &quot;regression_table.doc&quot;) Which produces the output: If we examine the fit column on the far right of the output above we see \\(R^2\\) = .74, 95% CI [.17, .86]. This value indicates that in this sample 74% of the variability in video scores is accounted accounted for by the statistical model (i.e., red regression line). The confidence interval suggests a plausible range of values for the \\(R^2\\) at the population-level is .17 to .86. Notice that this range captures that population-level \\(R^2\\) of .36 that we calculated from the entire population previously. \\[ \\begin{aligned} R^2 &amp;= .736 = .74\\\\\\\\ \\end{aligned} \\] If we examine the b column in the output we can create the regression equations below: \\[ \\begin{aligned} \\hat{Y_i} &amp;= 9.44(X_i) -21.21 \\\\ \\widehat{score_i} &amp;= 9.44(IQ_i) -21.21\\\\ \\end{aligned} \\] This tells use the slope in our sample is 9.44, 95% CI [4.39, 14.50]. That is, in the sample, each IQ point is associated with an additional 9.44 points in the video game. The population regression line might have a smaller/larger slope. The 95% confidence intervals tells us that a plausible range of values for the slope of the regression line at the population-level is 4.39 to 14.50. Notice that this range captures that population-level slope of 8.00 that we calculated from the entire population previously. Additional regression details are provided with the command below. summary(lm_object) ## ## Call: ## lm(formula = video_game ~ iq, data = sample_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -201.2 -80.4 58.6 79.8 151.3 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -21.21 225.86 -0.09 0.9278 ## iq 9.44 2.14 4.42 0.0031 ** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 130 on 7 degrees of freedom ## Multiple R-squared: 0.736, Adjusted R-squared: 0.698 ## F-statistic: 19.5 on 1 and 7 DF, p-value: 0.00309 8.2.2 Correlation As discussed previously, a correlation can be considered a fit index for a linear regression line. That is, a correlation indicates the extent to which the data fit a straight line (i.e., the extent to which the data fit a linear model). Correlation values range between -1 and +1. The further a correlation value is from 0 the more tightly points will cluster around the regression line. A positive correlation indicates that as one value increases the other value increases. For example, as height increases weight increases. A negative correlation indicates that as one value increases the other values decreases. For example, as study time increases the number of errors on an exam decreases. A few possible positive correlations are illustrated below – notice the relation between the graph and the strength of the correlation. You can obtain the correlation from our sample data with the command below: cor.test(sample_data$iq, sample_data$video_game, na.action = &quot;pairwise.complete.obs&quot;) ## ## Pearson&#39;s product-moment correlation ## ## data: sample_data$iq and sample_data$video_game ## t = 4.4, df = 7, p-value = 0.003 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.4503 0.9696 ## sample estimates: ## cor ## 0.8579 From this output we extract the numbers below in APA reporting style: There was a positive relation between IQ and video game score, such that as IQ increased, so did video game score, \\(r\\) = .86, 95% CI[.45, .97], \\(p\\) = .003, N = 9. 8.2.3 Graphing A scatter plot can be made code below: my_plot &lt;- ggplot(data = sample_data, mapping = aes(x = iq, y = video_game)) + geom_point(color = &quot;blue&quot;, size = 4) + coord_cartesian(xlim = c(70, 140), ylim = c(400, 1500)) + scale_y_continuous(breaks = seq(400, 1500, by = 200)) + scale_x_continuous(breaks = seq(70, 140, by = 20)) + labs(x = &quot;IQ&quot;, y = &quot;Video Game Score&quot;) + theme_classic(24) 8.3 Comparing correlations In this part of the chapter we compare correlations within and across studies we do so with the cocor package. We begin by obtaining a data set from the psych package. Note that we do not use the library(psych) command due to conflicts with the tidyverse. # Obtain the bfi data set from the psych package bfi &lt;- psych::bfi # remove empty rows/columns and clean the variable names bfi &lt;- bfi %&gt;% remove_empty(&quot;rows&quot;) %&gt;% remove_empty(&quot;cols&quot;) %&gt;% clean_names() Check out the large number of columns. glimpse(bfi) ## Rows: 2,800 ## Columns: 28 ## $ a1 &lt;int&gt; 2, 2, 5, 4, 2, 6, 2, 4, 4, 2, 4, 2, 5, 5… ## $ a2 &lt;int&gt; 4, 4, 4, 4, 3, 6, 5, 3, 3, 5, 4, 5, 5, 5… ## $ a3 &lt;int&gt; 3, 5, 5, 6, 3, 5, 5, 1, 6, 6, 5, 5, 5, 5… ## $ a4 &lt;int&gt; 4, 2, 4, 5, 4, 6, 3, 5, 3, 6, 6, 5, 6, 6… ## $ a5 &lt;int&gt; 4, 5, 4, 5, 5, 5, 5, 1, 3, 5, 5, 5, 4, 6… ## $ c1 &lt;int&gt; 2, 5, 4, 4, 4, 6, 5, 3, 6, 6, 4, 5, 5, 4… ## $ c2 &lt;int&gt; 3, 4, 5, 4, 4, 6, 4, 2, 6, 5, 3, 4, 4, 4… ## $ c3 &lt;int&gt; 3, 4, 4, 3, 5, 6, 4, 4, 3, 6, 5, 5, 3, 4… ## $ c4 &lt;int&gt; 4, 3, 2, 5, 3, 1, 2, 2, 4, 2, 3, 4, 2, 2… ## $ c5 &lt;int&gt; 4, 4, 5, 5, 2, 3, 3, 4, 5, 1, 2, 5, 2, 1… ## $ e1 &lt;int&gt; 3, 1, 2, 5, 2, 2, 4, 3, 5, 2, 1, 3, 3, 2… ## $ e2 &lt;int&gt; 3, 1, 4, 3, 2, 1, 3, 6, 3, 2, 3, 3, 3, 2… ## $ e3 &lt;int&gt; 3, 6, 4, 4, 5, 6, 4, 4, NA, 4, 2, 4, 3, … ## $ e4 &lt;int&gt; 4, 4, 4, 4, 4, 5, 5, 2, 4, 5, 5, 5, 2, 6… ## $ e5 &lt;int&gt; 4, 3, 5, 4, 5, 6, 5, 1, 3, 5, 4, 4, 4, 5… ## $ n1 &lt;int&gt; 3, 3, 4, 2, 2, 3, 1, 6, 5, 5, 3, 4, 1, 1… ## $ n2 &lt;int&gt; 4, 3, 5, 5, 3, 5, 2, 3, 5, 5, 3, 5, 2, 1… ## $ n3 &lt;int&gt; 2, 3, 4, 2, 4, 2, 2, 2, 2, 5, 4, 3, 2, 1… ## $ n4 &lt;int&gt; 2, 5, 2, 4, 4, 2, 1, 6, 3, 2, 2, 2, 2, 2… ## $ n5 &lt;int&gt; 3, 5, 3, 1, 3, 3, 1, 4, 3, 4, 3, NA, 2, … ## $ o1 &lt;int&gt; 3, 4, 4, 3, 3, 4, 5, 3, 6, 5, 5, 4, 4, 5… ## $ o2 &lt;int&gt; 6, 2, 2, 3, 3, 3, 2, 2, 6, 1, 3, 6, 2, 3… ## $ o3 &lt;int&gt; 3, 4, 5, 4, 4, 5, 5, 4, 6, 5, 5, 4, 4, 4… ## $ o4 &lt;int&gt; 4, 3, 5, 3, 3, 6, 6, 5, 6, 5, 6, 5, 5, 4… ## $ o5 &lt;int&gt; 3, 3, 2, 5, 3, 1, 1, 3, 1, 2, 3, 4, 2, 4… ## $ gender &lt;int&gt; 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1… ## $ education &lt;int&gt; NA, NA, NA, NA, NA, 3, NA, 2, 1, NA, 1, … ## $ age &lt;int&gt; 16, 18, 17, 17, 17, 21, 18, 19, 19, 17, … Let’s select a small subset of the columns for our example: bfi &lt;- bfi %&gt;% select(a1, c1, e1, o1, gender) You can confirm the smaller set of columns: glimpse(bfi) ## Rows: 2,800 ## Columns: 5 ## $ a1 &lt;int&gt; 2, 2, 5, 4, 2, 6, 2, 4, 4, 2, 4, 2, 5, 5, 4… ## $ c1 &lt;int&gt; 2, 5, 4, 4, 4, 6, 5, 3, 6, 6, 4, 5, 5, 4, 5… ## $ e1 &lt;int&gt; 3, 1, 2, 5, 2, 2, 4, 3, 5, 2, 1, 3, 3, 2, 3… ## $ o1 &lt;int&gt; 3, 4, 4, 3, 3, 4, 5, 3, 6, 5, 5, 4, 4, 5, 5… ## $ gender &lt;int&gt; 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1… These columns are single items from a personality measure. a1 (Agreeableness) c1 (Conscientiousness) e1 (Extraversion) o1 (Opennness) You can obtain a condensed correlation matrix using the cor() command. You can specify use = “pairwise.complete.obs” for pairwise correlation - the documentation covers other options. The round(2) command rounds the correlations to two decimal places. cor(bfi, use = &quot;pairwise.complete.obs&quot;) %&gt;% round(2) ## a1 c1 e1 o1 gender ## a1 1.00 0.03 0.11 0.01 -0.16 ## c1 0.03 1.00 -0.02 0.17 0.01 ## e1 0.11 -0.02 1.00 -0.10 -0.13 ## o1 0.01 0.17 -0.10 1.00 -0.10 ## gender -0.16 0.01 -0.13 -0.10 1.00 Or we could use apaTable apa.cor.table() command: library(apaTables) apa.cor.table(bfi, table.number = 1, filename = &quot;table_1_bfi.doc&quot;) Inspecting the above table you see that the correlation between a1 and c1 with is r = .03, 95% CI [-.01, .07]. Likewise, the correlation between e1 and o1 is r = -.10, 95% CI [-.14, -.06]. We obtain the p-values for these relations below. 8.3.1 p-values The code below obtains the p-value for the a1/c1 relation - a value of .144. cor.test(bfi$a1, bfi$c1) ## ## Pearson&#39;s product-moment correlation ## ## data: bfi$a1 and bfi$c1 ## t = 1.5, df = 2762, p-value = 0.1 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.00949 0.06502 ## sample estimates: ## cor ## 0.0278 The code below obtains the p-value for the e1/o1 relation - a value sufficiently small we report it as \\(p\\) &lt; .001 cor.test(bfi$e1, bfi$o1) ## ## Pearson&#39;s product-moment correlation ## ## data: bfi$e1 and bfi$o1 ## t = -5.3, df = 2757, p-value = 1e-07 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.13718 -0.06329 ## sample estimates: ## cor ## -0.1004 With p-values in hand we can write this up as: Inspecting the above table you see that the correlation between a1 and c1 with is r = .03, 95% CI [-.01, .07], p = .144. Likewise, the correlation between e1 and o1 is r = -.10, 95% CI [-.14, -.06], p &lt; .001. 8.3.2 Within a data set In this section we look at comparing correlation within a single data set. 8.3.2.1 Non-overlapping correlations We will compare the correlation to between (a1, c1) to the correlation between (e1, o1) with the cocor package. In this case, because neither of the variables in the first correlation (a1, c1) are in the second correlation (e1, o1) we refer to this as a non-overlapping correlation comparison. The cocor command will provide a lot of output. We are most interested in the last part of the output corresponding to Zou (2007) which provides the confidence interval for the difference in the correlations. But we also want to examine the first part of the output which will show us the two original correlations (a1, c1) = 0.0276, and (e1, o1) = -0.1002 (these are the .03 and -.10 values prior to rounding). As well it also shows us the difference between them, Difference: r.jk - r.hm = 0.1278. library(cocor) cocor( ~ a1 + c1 | e1 + o1, data = as.data.frame(bfi)) ## ## Results of a comparison of two nonoverlapping correlations based on dependent groups ## ## Comparison between r.jk (a1, c1) = 0.0276 and r.hm (e1, o1) = -0.1002 ## Difference: r.jk - r.hm = 0.1278 ## Related correlations: r.jh = 0.1036, r.jm = 0.0125, r.kh = -0.0259, r.km = 0.1688 ## Data: as.data.frame(bfi): j = a1, k = c1, h = e1, m = o1 ## Group size: n = 2724 ## Null hypothesis: r.jk is equal to r.hm ## Alternative hypothesis: r.jk is not equal to r.hm (two-sided) ## Alpha: 0.05 ## ## pearson1898: Pearson and Filon&#39;s z (1898) ## z = 4.7832, p-value = 0.0000 ## Null hypothesis rejected ## ## dunn1969: Dunn and Clark&#39;s z (1969) ## z = 4.7676, p-value = 0.0000 ## Null hypothesis rejected ## ## steiger1980: Steiger&#39;s (1980) modification of Dunn and Clark&#39;s z (1969) using average correlations ## z = 4.7671, p-value = 0.0000 ## Null hypothesis rejected ## ## raghunathan1996: Raghunathan, Rosenthal, and Rubin&#39;s (1996) modification of Pearson and Filon&#39;s z (1898) ## z = 4.7676, p-value = 0.0000 ## Null hypothesis rejected ## ## silver2004: Silver, Hittner, and May&#39;s (2004) modification of Dunn and Clark&#39;s z (1969) using a backtransformed average Fisher&#39;s (1921) Z procedure ## z = 4.7671, p-value = 0.0000 ## Null hypothesis rejected ## ## zou2007: Zou&#39;s (2007) confidence interval ## 95% confidence interval for r.jk - r.hm: 0.0753 0.1800 ## Null hypothesis rejected (Interval does not include 0) We could write this as: There was a negative weak relation between extraversion (e1) and openness (o1) such that as extraversion increased openness decreased, r = -.10, 95% CI [-.14, -.06], p &lt; .001. In contrast, the relation between agreeableness (a1) and conscientiousness(c1) was non-significant, r = .03, 95% CI [-.01, .07], p = .144. The extraversion/openness relation was stronger than the agreeableness/conscientiousness relation, \\(\\Delta\\)r = .13, 95% CI [.07, .18], p &lt; .001. 8.3.2.2 Overlapping correlations We will compare the correlation to between (a1, c1) to the correlation between (a1, e1) with cocor. In this case, because a1 is common to the first correlation (a1, c1) and the second correlation (e1, o1) we refer to this as an overlapping correlation comparison. We obtain the (a1, e1) correlation, below, and find: r = .11, 95% [.07, .14], p &lt; .001. cor.test(bfi$a1, bfi$e1) ## ## Pearson&#39;s product-moment correlation ## ## data: bfi$a1 and bfi$e1 ## t = 5.6, df = 2759, p-value = 2e-08 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.06917 0.14294 ## sample estimates: ## cor ## 0.1062 We obtain the (a1, c1) correlation, below, and find: r = .03, 95% [-.00, .07], p = .14. cor.test(bfi$a1, bfi$c1) ## ## Pearson&#39;s product-moment correlation ## ## data: bfi$a1 and bfi$c1 ## t = 1.5, df = 2762, p-value = 0.1 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.00949 0.06502 ## sample estimates: ## cor ## 0.0278 We use the cocor command to compare the two relations: library(cocor) cocor( ~ a1 + c1 | a1 + e1, data = as.data.frame(bfi)) ## ## Results of a comparison of two overlapping correlations based on dependent groups ## ## Comparison between r.jk (a1, c1) = 0.0263 and r.jh (a1, e1) = 0.1047 ## Difference: r.jk - r.jh = -0.0784 ## Related correlation: r.kh = -0.0248 ## Data: as.data.frame(bfi): j = a1, k = c1, h = e1 ## Group size: n = 2741 ## Null hypothesis: r.jk is equal to r.jh ## Alternative hypothesis: r.jk is not equal to r.jh (two-sided) ## Alpha: 0.05 ## ## pearson1898: Pearson and Filon&#39;s z (1898) ## z = -2.8820, p-value = 0.0040 ## Null hypothesis rejected ## ## hotelling1940: Hotelling&#39;s t (1940) ## t = -2.8827, df = 2738, p-value = 0.0040 ## Null hypothesis rejected ## ## williams1959: Williams&#39; t (1959) ## t = -2.8793, df = 2738, p-value = 0.0040 ## Null hypothesis rejected ## ## olkin1967: Olkin&#39;s z (1967) ## z = -2.8820, p-value = 0.0040 ## Null hypothesis rejected ## ## dunn1969: Dunn and Clark&#39;s z (1969) ## z = -2.8775, p-value = 0.0040 ## Null hypothesis rejected ## ## hendrickson1970: Hendrickson, Stanley, and Hills&#39; (1970) modification of Williams&#39; t (1959) ## t = -2.8827, df = 2738, p-value = 0.0040 ## Null hypothesis rejected ## ## steiger1980: Steiger&#39;s (1980) modification of Dunn and Clark&#39;s z (1969) using average correlations ## z = -2.8765, p-value = 0.0040 ## Null hypothesis rejected ## ## meng1992: Meng, Rosenthal, and Rubin&#39;s z (1992) ## z = -2.8754, p-value = 0.0040 ## Null hypothesis rejected ## 95% confidence interval for r.jk - r.jh: -0.1325 -0.0251 ## Null hypothesis rejected (Interval does not include 0) ## ## hittner2003: Hittner, May, and Silver&#39;s (2003) modification of Dunn and Clark&#39;s z (1969) using a backtransformed average Fisher&#39;s (1921) Z procedure ## z = -2.8765, p-value = 0.0040 ## Null hypothesis rejected ## ## zou2007: Zou&#39;s (2007) confidence interval ## 95% confidence interval for r.jk - r.jh: -0.1317 -0.0250 ## Null hypothesis rejected (Interval does not include 0) The cocor command provides a lot of output. We are most interested in the last part of the output corresponding to Zou (2007) which provides the confidence interval for the difference: -.13 to -.03. But we also want to examine the first part of the output which will show us the two original correlations \\(r_{(a1, c1)}\\) = 0.0276, and \\(r_{(a1, e1)}\\) = 0.10472 As well, the output also shows us the difference between thesee two correlations, Difference: r.jk - r.jh = -0.0784 (with rounding, -.08). We can write this up as: Agreeableness and extraversion were weakly related, r = .11, 95% [.07, .14], p &lt; .001, such that as agreeableness increased so did extraversion. The relation between agreeableness and conscientiousness was non-significant, r = .03, 95% [-.00, .07], p = .14. The agreeableness/extraversion relation was significantly stronger than the agreeableness/conscientiousness relation, \\(\\Delta\\)r = .08, 95% CI [.03, .13], p = .004. 8.3.3 Between data sets In this section we look at comparing correlations from two data sets. 8.3.3.1 Create seperate data files for men and women (if needed) We begin by creating two separate data sets - one for men and one for women: bfi_men &lt;- bfi %&gt;% filter(gender == 1) %&gt;% select(-gender) bfi_women &lt;- bfi %&gt;% filter(gender == 2) %&gt;% select(-gender) Use glimpse() to check out the subgroups. Note that it also tells you the number of participants in each subgroup. glimpse(bfi_men) ## Rows: 919 ## Columns: 4 ## $ a1 &lt;int&gt; 2, 2, 2, 4, 4, 4, 2, 5, 4, 4, 5, 5, 1, 4, 1, 4,… ## $ c1 &lt;int&gt; 2, 4, 5, 3, 6, 4, 5, 4, 5, 5, 5, 4, 4, 5, 1, 4,… ## $ e1 &lt;int&gt; 3, 2, 4, 3, 5, 1, 3, 2, 3, 1, 2, 3, 2, 3, 6, 2,… ## $ o1 &lt;int&gt; 3, 3, 5, 3, 6, 5, 4, 5, 5, 6, 5, 6, 6, 6, 6, 4,… glimpse(bfi_women) ## Rows: 1,881 ## Columns: 4 ## $ a1 &lt;int&gt; 2, 5, 4, 6, 2, 5, 4, 4, 4, 1, 2, 1, 2, 2, 2, 4,… ## $ c1 &lt;int&gt; 5, 4, 4, 6, 6, 5, 4, 5, 1, 5, 3, 5, 6, 4, 5, 5,… ## $ e1 &lt;int&gt; 1, 2, 5, 2, 2, 3, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1,… ## $ o1 &lt;int&gt; 4, 4, 3, 4, 5, 4, 5, 4, 4, 5, 6, 6, 5, 6, 2, 4,… 8.3.3.2 Check out the subgroup correlations For men, we can obtain the correlation between a1/e1 with the code below. From this we determine, r = .14, 95% [.07, .20], p &lt; .001. cor.test(bfi_men$a1, bfi_men$e1) ## ## Pearson&#39;s product-moment correlation ## ## data: bfi_men$a1 and bfi_men$e1 ## t = 4.2, df = 910, p-value = 3e-05 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.07448 0.20182 ## sample estimates: ## cor ## 0.1387 For women, we can obtain the correlation between a1/e1 with the code below. From this we determine, r = .06, 95% [.02, .11], p = .007. cor.test(bfi_women$a1, bfi_women$e1) ## ## Pearson&#39;s product-moment correlation ## ## data: bfi_women$a1 and bfi_women$e1 ## t = 2.7, df = 1847, p-value = 0.007 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.01672 0.10754 ## sample estimates: ## cor ## 0.06226 8.3.3.3 Comparison r(a1, e1) We run the R commands below to compare the correlations for men and women. library(cocor) bfi_men_dataframe &lt;- as.data.frame(bfi_men) bfi_women_dataframe &lt;- as.data.frame(bfi_women) cocor( ~ a1 + e1 | a1 + e1, data = list(bfi_men_dataframe, bfi_women_dataframe)) ## ## Results of a comparison of two correlations based on independent groups ## ## Comparison between r1.jk (a1, e1) = 0.1387 and r2.hm (a1, e1) = 0.0623 ## Difference: r1.jk - r2.hm = 0.0765 ## Data: list(bfi_men_dataframe, bfi_women_dataframe): j = a1, k = e1, h = a1, m = e1 ## Group sizes: n1 = 912, n2 = 1849 ## Null hypothesis: r1.jk is equal to r2.hm ## Alternative hypothesis: r1.jk is not equal to r2.hm (two-sided) ## Alpha: 0.05 ## ## fisher1925: Fisher&#39;s z (1925) ## z = 1.9074, p-value = 0.0565 ## Null hypothesis retained ## ## zou2007: Zou&#39;s (2007) confidence interval ## 95% confidence interval for r1.jk - r2.hm: -0.0021 0.1543 ## Null hypothesis retained (Interval includes 0) The output reveals the correlation for men, \\(r_{(a1, e1)}\\) = 0.1387, .14 rounded, and women \\(r_{(a1, e1)}\\)= 0.0623, .06 rounded, in the output. We also see the comparison: Difference: r1.jk - r2.hm = 0.0765. Finally, we see the zou2007 95% confidence interval: -.00 to .15. We write this up as: For men, there was a positive relation between agreeableness (a1) and extraversion (e1), r = .14, 95% [.07, .20], p &lt; .001, such that as agreeableness increased so did extraversion. Likewise, for women, there was a similar positive relation between agreeableness (a1) and extraversion (e1), r = .06, 95% [.02, .11], p = .007. We did not find a significant difference in the strength of these relations, \\(\\Delta\\)r = .08, 95% CI [-.00, .15], p = .057. "],["multiple-regression.html", "Chapter 9 Multiple regression 9.1 Overview 9.2 Example 9.3 Load the data 9.4 Bivariate relations 9.5 Single best predictor 9.6 Multiple regression 9.7 b-weights 9.8 \\(R^2\\) 9.9 Semi-partial (\\(sr\\)) 9.10 Beta-weights 9.11 Graphing", " Chapter 9 Multiple regression The following CRAN packages must be installed: Required CRAN Packages tidyverse apaTables janitor remotes skimr The following GitHub packages must be installed: Required GitHub Packages dstanley4/fastInteraction After the remotes package is installed, it can be used to install a package from GitHub: remotes::install_github(&quot;dstanley4/fastInteraction&quot;) 9.1 Overview Multiple regression is a means relating multiple predictor variables to a single criterion variable. We can determine the amount of variance in the criterion accounted for by the set of predictors (\\(R^2\\)), a single predictor on it’s own (\\(r^2\\)), or the extent to which a single predictor accounts for unique variance account for in the criterion that is not accounted for by any of the other predictors (\\(sr^2\\)). 9.2 Example In this chapter, we examine the extent to video game scores are predicted by age and IQ for people who live in the City of Guelph. As before, we treat citizens of Guelph as our population – though in this chapter we move straight to the sample data (without showing the population-level data). We are interested in using both IQ and age to predict video game scores so we refer to these variables as predictor variables. The value being predicted is video game score and we refer to that variable as the criterion (i.e., the dependent variable). You can think of the multiple regression problem using a venn diagram: {r. echo = FALSE} knitr::include_graphics(\"ch_multiple_regression/images/mr_venn.png\") 9.3 Load the data We use a data set called “data_mr_ex.csv” in this example. The data can be loaded with the command: library(tidyverse) library(janitor) my_data &lt;- read_csv(&quot;data_mr_ex.csv&quot;) # ensure column names match desired naming convention my_data &lt;- my_data %&gt;% clean_names() We see the structure of the data with the glimpse() command: glimpse(my_data) ## Rows: 200 ## Columns: 3 ## $ video_game &lt;dbl&gt; 122.0, 108.7, 130.4, 123.4, 121.5, 125.… ## $ iq &lt;dbl&gt; 107.6, 100.9, 89.0, 90.3, 97.1, 108.1, … ## $ age &lt;dbl&gt; 41.1, 55.1, 43.9, 46.7, 42.1, 41.2, 41.… 9.4 Bivariate relations When you conduct multiple regression analyses you should always report a correlation matrix with your predictors and criterion. library(apaTables) apa.cor.table(my_data) ## ## ## Means, standard deviations, and correlations with confidence intervals ## ## ## Variable M SD 1 2 ## 1. video_game 119.03 10.75 ## ## 2. iq 102.00 15.00 .50** ## [.39, .60] ## ## 3. age 45.00 6.00 -.30** -.20** ## [-.42, -.17] [-.33, -.07] ## ## ## Note. M and SD are used to represent mean and standard deviation, respectively. ## Values in square brackets indicate the 95% confidence interval. ## The confidence interval is a plausible range of population correlations ## that could have caused the sample correlation (Cumming, 2014). ## * indicates p &lt; .05. ** indicates p &lt; .01. ## You should always check for curvilinear relations when reporting correlations via a graph. We quickly create a graph for doing so with the code below. In this case we don’t see any curvilinear relations. library(GGally) ggpairs(my_data) You can think of each bivariate correlation as the shaded areas on the figure below. In this type of figure the degree of overlap between two circles is determined by the correlation squared (i.r., \\(r^2\\)). The value you obtain for \\(r^2\\) indicates the proportion of the criterion that is covered by the predictor. For example, if \\(r\\) = .50 then \\(r^2\\) = .25 which indicates 25% of the criterion should be covered by the circle representing that predictor. 9.5 Single best predictor What is the best predictor of video_game? Many researchers incorrectly believe you need multiple regression to answer this question - you do not. To determine the single best predictor in a set of predictors just look at the correlation matrix above - no need for regression (or beta-weights). The strongest correlation is the best predictor. In our current example, video_game_score is predicted by iq (r = .50) and age (r = -.30). The best predictor of video_game_score is iq because it has the strongest correlation (using absolute values .50 is larger than .30). 9.6 Multiple regression Multiple regression is frequently used to ask two questions: How well we can predict the criterion using a set of predictors (see \\(R^2\\))? What is the unique contribution of a single variable in a set or predictors? In other words, how much does one variable predict the criterion above and beyond another variable? For example, does study time predict exam grades above and beyond iq? Or phrased differently: Does study time predict unique variance in exam grades that is not accounted for by iq? (see \\(sr^2\\)). We want to use age and IQ to predict video game score (\\(Y\\)). More specifically, we want to combine age and IQ to create a new variable (\\(\\widehat{Y}\\)) that correlates as highly as possible with video game score. We do with the code below: lm_object &lt;- lm(video_game ~ age + iq, data = my_data) Now look at the brief output: print(lm_object) ## ## Call: ## lm(formula = video_game ~ age + iq, data = my_data) ## ## Coefficients: ## (Intercept) age iq ## 102.233 -0.371 0.328 This output shows you how we can combine age, IQ, and a constant to create (\\(\\widehat{Y}\\)). More specifically: \\(\\widehat{Y} = 102.233 - 0.0371(age) + 0.328(iq)\\) The slopes for age and iq are -0.0371 and 0.328, respectively. These are also referred to as the b-weights or unstandardized regression coefficients. The computer picks these weight so that predicted video game scores (\\(\\widehat{Y}\\)) will corresponds as closely as possible to actual video game scores. A quick way to get more comprehensive regression output is to use the apa.reg.table function in the apaTables package. library(apaTables) apa.reg.table(lm_object, filename = &quot;table_regression.doc&quot;) 9.7 b-weights An inspection of the b column in the above table reveals the b-weights we previously discussed. The b-weights are also known as the slopes or the unstandardized regression weights. The b-weights are used to create predicted/estimated video game score via the regression equation: \\[ \\begin{aligned} \\widehat{Y} &amp;= 102.233 + 0.3285(Z) - 0.3712(X) \\\\ \\widehat{\\text{video game}} &amp;= 102.233 + 0.3285(iq) - 0.3712(age) \\\\ \\end{aligned} \\] You can think of the regression equation as a receipe for making \\(\\hat{Y}\\). The variables in the regression (e.g., age and iq) are the ingredients. The b-weights (e.g., 0.3285 and 00.3712) are the amount of each ingredient you need to make \\(\\hat{Y}\\). As previously noted, the computer picks the b-weights using a process that ensures the predicted video game scores (\\(\\hat{Y}\\)) corresponds as closely as possible to actual video game scores (\\(Y\\)). Consider the regression calculation for Person 1, below, who is 41.7 years old and has an IQ of 107.6. \\[ \\begin{aligned} \\widehat{Y} &amp;= 102.233 + 0.3285(Z) - 0.3712(X) \\\\ \\widehat{\\text{video game}} &amp;= 102.233 + 0.3285(iq) - 0.3712(age) \\\\ &amp;= 102.233 + 0.3285(107.6) - 0.3712(41.1) \\\\ &amp;= 122.3 \\end{aligned} \\] The above calculation reveals an estimated video game score for Person 1 of 122.3 (i.e., \\(\\hat{Y} = 122.3\\)) – which differs only slightly from their actual video game score of 122 (i.e.. \\(Y = 122\\)). You can see the similarity between actual video game scores (\\(Y\\)) and predicted video game scores (\\(\\hat{Y}\\)) for the first several participants in the table below. You can interpret the b-weights as indicating how much the criterion changes when a predictor changes – holding the other predictors constant. In this context, a 0.3285 b-weight for IQ indicates that for each one-unit increase in IQ video game score will increase 0.3285 points – holding the effect of age constant. Don’t forget the b-weight can only be interpreting in context of that specific regression equation. If you replaced the age predictor with, say, height as a predictor, then the b-weight for IQ would change. Context matters when interpreting b-weights. 9.8 \\(R^2\\) How effective is the set of predictors? We can calculate \\(R^2\\) to determine the proportion of variance the criterion that is accounted for by the set of predictors. This value is illustrated graphically below: You will simply obtain \\(R^2\\) from computer output. But how is \\(R^2\\) calculated? Understanding how \\(R^2\\) is calculated can help you to understand how to interpret it. There are two methods for doing so - that produce the same number: 9.8.1 Method 1: Ratio Approach What does the \\(R^2\\) mean? It is the proportion variability in criterion scores (\\(Y\\)) accounted for by (\\(\\widehat{Y}\\)). In other words, it is the proportion of the variability in criterion scores that can be accounted for by (a linear combination of) iq and age. We begin by obtaining predicted video game scores (\\(\\widehat{Y}\\)) using the regression: \\(\\widehat{Y} = 102.233 + 0.3285(iq) - 0.3712(age)\\) predicted_video_game_scores \\(= 102.233 + 0.3285(iq) - 0.3712(age)\\) The code below uses the above equation to calculate predicted video game score for each person: predicted_video_game_scores &lt;- predict(lm_object) actual_video_game_scores &lt;- my_data$video_game Recall the formula for \\(R^2\\): \\[ \\begin{aligned} R^2 = \\frac{\\text{Variance of predicted scores}}{\\text{Variance of actual scores}} \\end{aligned} \\] We implement this formula using the code below: var_predicted_video_game_scores &lt;- var(predicted_video_game_scores ) var_actual_video_game_scores &lt;- var(actual_video_game_scores) R2 &lt;- var_predicted_video_game_scores / var_actual_video_game_scores print(R2) ## [1] 0.2911 Thus, 29% of the variability in video game scores is predicted by the combination of age and IQ. 9.8.2 Method 2: Correlation Approach An alternative way of thinking about \\(R^2\\) is as the squared correlation between predicted criterion scores and actual criterion scores: \\[ \\begin{aligned} R^2 &amp;= r^2_{\\hat{Y}, Y}\\\\ &amp;= r^2_{(predicted_video_game_scores, actual_video_game_scores)}\\\\ \\end{aligned} \\] We implement this formula with the code below and obtain the same value: R &lt;- cor(predicted_video_game_scores, actual_video_game_scores) R2 &lt;- R * R print(R2) ## [1] 0.2911 9.8.3 \\(R^2\\) in practice In practice we simply look at the apa.reg.table() output and obtain the \\(R^2\\) value and 95% CI from this output: From this table we determine: \\(R^2\\) = .29, 95% CI [.19, .38]. to obtain the required p-value we use the summary() command on the previously calculated lm_object: summary(lm_object) ## ## Call: ## lm(formula = video_game ~ age + iq, data = my_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -26.658 -5.480 0.602 6.328 20.539 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 102.2333 7.3386 13.93 &lt; 2e-16 *** ## age -0.3712 0.1098 -3.38 0.00088 *** ## iq 0.3285 0.0439 7.48 2.4e-12 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.1 on 197 degrees of freedom ## Multiple R-squared: 0.291, Adjusted R-squared: 0.284 ## F-statistic: 40.5 on 2 and 197 DF, p-value: 1.91e-15 At the bottom of this output we see that the p-value is 1.912e-15 or 0.000000000000001912. Consequently, we report the \\(R^2\\) value as: \\(R^2\\) = .29, 95% CI [.19, .38], \\(p\\) &lt; .001. Thus, 29% of the variability in video game scores is predicted by the combination of age and IQ. 9.9 Semi-partial (\\(sr\\)) A semi-partial correlation is represented by the symbol \\(sr\\) and correspondingly a squared semi-partial correlation is represented by the symbol \\(sr^2\\). What is a squared semi-partial correlation and why is it useful? Semi-partial correlations are a way of determining the unique contribution of a variable to predicting the criterion (in the context of the other predictors). The semi-partial correlation is the correlation of one predictor (with all the other predictors removed) with the criterion. The semi-partial correlation squared is the amount \\(R^2\\) would drop by if that variable was removed from the regression. It is the percentage of variability in criterion scores that is uniquely accounted for by a predictor. This is illustrated in the venn diagram below: 9.9.1 \\(sr^2\\) in theory In the text below we go “inside the black box” to show you how semi-partial correlations are computed. In practice, they are just displayed in R output - but understanding the text below where we calculate them “old school” will help with you interpret \\(sr^2\\). Overall, squared semi-partial correlations provide an index of how much that predictor contributes to the overall \\(R^2\\) (with the effect of the other predictors removed). We calculate \\(sr^2\\) for IQ (removing the effect of age) to demonstrate this fact. We do this with a regression equation in which we make IQ the criterion (\\(Y\\)). Then we predict IQ with age. This produces my_iq_regression which has inside of it a predictor version of IQ, \\(\\widehat{Y_{iq}}\\), which in this case represents a best guess of IQ based on age. my_iq_regression &lt;- lm(iq ~ age, data = my_data) print(my_iq_regression) ## ## Call: ## lm(formula = iq ~ age, data = my_data) ## ## Coefficients: ## (Intercept) age ## 124.763 -0.506 . Thus, we find: \\(\\widehat{Y_{iq}} = 124.763 - 0.506(age)\\) Consequently, when you see \\(\\widehat{Y_{iq}}\\) recognize that it is really just an estimate of IQ created entirely from age. In contrast, \\(Y_{iq}\\) is the actual IQ score we obtained from participants. We want IQ with the effect of age removed. Therefore, we want IQ (i.e., \\(Y_{iq}\\)) with the effect of age (i.e.,\\(\\widehat{Y_{iq}}\\) ) removed. Thus we want: residual = \\(Y_{iq}\\) - \\(\\widehat{Y_{iq}}\\) or another way of thinking of it is: iq_without_age = \\(Y_{iq}\\) - \\(\\widehat{Y_{iq}}\\) iq_without_age = iq - (124.763 - 0.506(age) ) We do this below: iq_without_age &lt;- resid(my_iq_regression) Then we correlate IQ without age (i.e., iq_without_age) with video game scores (i.e., video_game). This tells us how IQ correlates with video game scores when the effects of age have been removed from IQ; that is, the semi-partial correlation (i.e., \\(sr\\)). Once again refer to the venn diagram above illustrating \\(sr^2\\). # apa.reg.table does this for you - this is for learning/illustration only. sr &lt;- cor(iq_without_age, my_data$video_game) sr2 &lt;- sr * sr 9.9.2 \\(sr^2\\) in practice The \\(sr^2\\) values with confidence intervals are reported in apa.reg.table() output: From this table we determine: age: \\(sr^2\\) = .04 , 95% CI [-.01, .09] iq: \\(sr^2\\) = .20, 95% CI [.11, .30] However, to obtain the p-value for each \\(sr^2\\) value we need to use the summary() command: summary(lm_object) ## ## Call: ## lm(formula = video_game ~ age + iq, data = my_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -26.658 -5.480 0.602 6.328 20.539 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 102.2333 7.3386 13.93 &lt; 2e-16 *** ## age -0.3712 0.1098 -3.38 0.00088 *** ## iq 0.3285 0.0439 7.48 2.4e-12 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.1 on 197 degrees of freedom ## Multiple R-squared: 0.291, Adjusted R-squared: 0.284 ## F-statistic: 40.5 on 2 and 197 DF, p-value: 1.91e-15 The p-value for the b-weight (i.e. Estimate) is the p-value for \\(sr^2\\), Therefore, we simply look in the Pr(&gt;|t|) column to obtain the required p-value. Adding this value to our reporting, we find: age: \\(sr^2\\) = .04 , 95% CI [-.01, .09], p &lt; .001 iq: \\(sr^2\\) = .20, 95% CI [.11, .30], p &lt; .001 If a predictor is significant, this indicates that the predictor contributes unique variance to \\(\\widehat{Y_{video game}}\\) that can not be contributed by any of the other predictors. The amount of unique variance contributed by a predictor is indicated by \\(sr^2\\) (semi-partial correlation squared). 9.9.3 Blocks regression Some researchers are unfamiliar with semi-partial correlations and prefer to think in term of how the \\(R^2\\) value changes over two different regression. This approach is just an indirect way of calculating \\(sr^2\\). Consider the example below where the researcher conducts the first regression, block 1, in which age is the predictor. Then he conducts a second regression, block 2, in which both age and iq are the predictors. # apa.reg.table does this for you - this is for learning/illustration only. block1 &lt;- lm(video_game ~ age, data = my_data) block2 &lt;- lm(video_game ~ age + iq, data = my_data) The goal is to examine the \\(R^2\\) when only age is the predictor and see how much it increases when you have both age and iq as predictors. The resulting difference, \\(\\Delta R^2\\) tells you how much iq predicted video game score beyond age alone. Examine the output below. apa.reg.table(block1, block2, filename = &quot;table_mr_blocks.doc&quot;) This table illustrates that for the first regression when just age was a predictor that \\(R^2\\) = .09. When both age and iq were predictors \\(R^2\\) = .29. That indicates that \\(R^2\\) increased by .20 when we added iq as a predictor. Thus, \\(\\Delta R^2\\) = .20. This is the amount \\(R^2\\) increased by due to adding iq as predictor. Conceptually, and mathematically, this is identical to the \\(sr^2\\) value for iq. Indeed, if you look at this output in detail you see that for iq \\(sr^2\\) = .20. 9.10 Beta-weights Beta-weights are often referred to as standardized regression weights. This is a poor description that makes beta weights hard to understand. A better description of beta-weights is the regression weights for standardized variables; that is variables with a mean of 0 and a standard deviation of 1.0. 9.10.1 In practice Recall we ran a regression with the command below. This command used the original/raw form of the variables. lm_object &lt;- lm(video_game ~ age + iq, data = my_data) From lm_object created we used apa.reg.table() to obtain this output: Notice the beta column in this output. It reports beta weights of -.21 and .46 for age and iq, respectively. Where did these values come from? To answer this question, we need to start with the lm_object. The apa.reg.table() command just formats the information contained in the lm_object. We can see an unformatted version of this information with the summary() command: summary(lm_object) ## ## Call: ## lm(formula = video_game ~ age + iq, data = my_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -26.658 -5.480 0.602 6.328 20.539 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 102.2333 7.3386 13.93 &lt; 2e-16 *** ## age -0.3712 0.1098 -3.38 0.00088 *** ## iq 0.3285 0.0439 7.48 2.4e-12 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.1 on 197 degrees of freedom ## Multiple R-squared: 0.291, Adjusted R-squared: 0.284 ## F-statistic: 40.5 on 2 and 197 DF, p-value: 1.91e-15 Notice that the values in the Estimates column correspond to the b-weights column in the apa.reg.table() output. We will use this fact to create beta-weights. 9.10.2 Old school To obtain beta-weights there are two steps. First, we create standardized score versions of each column. Second, we run a normal regression using those columns. A set of standardized scores have a mean of 0 and a standard deviation of 1.0. To create the standardized score versions of each column in the regression we use the z-score formula: \\[ \\begin{aligned} \\text{standardized scores}=z_{X} = \\frac{X-\\bar{X}}{\\sigma_X} \\end{aligned} \\] Consider the age column. We can calculate the mean for this column, mean(age), and the standard deviation for this column, sd(age). Then for every value in the age column we subtract the column mean and then divide by the column standard deviation. We do so with the calculation: (age-mean(age))/sd(age). The code below creates standardized score versions of the iq, age, and video_game columns called z_iq, z_age, and z_video_game, respectively. my_data &lt;- my_data %&gt;% mutate(z_iq = (iq-mean(iq))/sd(iq), z_age = (age-mean(age))/sd(age), z_video_game = (video_game-mean(video_game))/sd(video_game)) We can confirm a mean of 0 and a standard deviation of 1.0 for these new columns with the skim command: library(skimr) skim(my_data) Now we conduct the regression again with standardized variables (i.e., z-score versions). lm_object_zscores &lt;- lm(z_video_game ~ z_iq + z_age, data = my_data) We can obtain the regression weights for analysis using these standardized scores with the summary() command: summary(lm_object_zscores) ## ## Call: ## lm(formula = z_video_game ~ z_iq + z_age, data = my_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.479 -0.509 0.056 0.588 1.910 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.73e-16 5.98e-02 0.00 1.00000 ## z_iq 4.58e-01 6.13e-02 7.48 2.4e-12 *** ## z_age -2.07e-01 6.13e-02 -3.38 0.00088 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.846 on 197 degrees of freedom ## Multiple R-squared: 0.291, Adjusted R-squared: 0.284 ## F-statistic: 40.5 on 2 and 197 DF, p-value: 1.91e-15 Notice that the estimates above are 4.582e-01 -2.070e-01 which are, in decimal form, .46 and -.21, respectively. These are the beta-weights from the apa.reg.table on the previous page. Thus, when you conduct a normal regression but used standardized variables in it you obtain beta-weights. Interpretation. The typically reported b-weights describe how a 1 unit change in IQ influences video_game points. Similarly, beta-weights, describe how a 1 unit change in z_iq influences z_video_game. Keep in mind, however, that 1 unit of z_iq (and z_video_game) is 1 standard deviation. As a result, a beta-weight indicates how much the criterion scores will change in SD units when a predictor increases by 1 SD – holding the effect of the other predictors constant. Similar to b-weights, beta-weights can only be interpreted in the context of the other variables in the equation. Hopefully, this description has made it clear that although beta-weights are often referred to as standardized regression weights; it would be more accurate to describe them as the weights for standardized variables. 9.11 Graphing Let’s take a minute to consider the nature of the data we have so far - examine the first few rows of the data below (that includes the predicted value for each person). You can see that each person has three measured variables associated with them: video_game_score, iq, and age. These columns are in blue to indicate the fact they are measured variables. Because we have three measured variables we can’t create a typical 2D scatter plot. That type of plot only work when there is one predictor and one criterion. Now we have two predictors and one criterion. Consequently, we need make a 3D scatter plot. Correspondingly, because we have two predictors, we can’t obtain a regression line (i.e., best-fit line). A regression line is only possible when there is one predictor. Now we have two predictors. Consequently, a regression surface is required to show the predicted values for combinations of age and iq. In this case, when there are two predictor variables, the regression surface is a plane. Let’s create the 3D scatter plot with a regression surface. You recall we previously created the lm_object when we ran our regression: lm_object &lt;- lm(video_game ~ age + iq, data = my_data) The lm_object has the three data point for each person (age, iq, video_game) embedded inside it. So we can use the lm_object to create the scatter plot with regression plane. We do so using the fastInteraction package. More specifically, we use the fast.plot command as illustrated below.Note: The fast.plot command uses the argument “moderator” which is not appropriate in our context. When you see moderator in the command below just think of it as another predictor. library(fastInteraction) surface_plot &lt;- fast.plot(lm_object, criterion = video_game, predictor = iq, moderator = age) Then just type: surface_plot You can see the graph below: All of the predicted scores fall on the regression surface. You can think of the regression surface as a best-fit plane. In some sense you can think of the plane as a collection of best-fit lines. Indeed, two illustrative best-fit lines are place on this surface. For all the best-fit lines on the plane the slopes are the same - just the intercepts differ. You can see the people relative to the predicted surface/plane by looking at the dots. Each dot represents a person. Try the interactive version of the graph below. Caveat, sometimes it doesn’t appear correctly on the web. If the graph appears incorrectly (e.g., no data points or no surface) try using the Chrome browser. Safari sometimes has problems with this web object. You can rotate the graph to see a better view of the surface. The graph illustrates that predicted video game scores (i.e., the surface) change as a function of both age and iq. surface_plot "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
